
can_communication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cbc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004e44  08004e44  00014e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e5c  08004e5c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004e5c  08004e5c  00014e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e64  08004e64  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e64  08004e64  00014e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e68  08004e68  00014e68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004e6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000001d0  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001dc  200001dc  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010f18  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021e0  00000000  00000000  00030f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ed8  00000000  00000000  00033138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002108f  00000000  00000000  00034010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011583  00000000  00000000  0005509f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf3d6  00000000  00000000  00066622  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001359f8  2**0
                  CONTENTS, READONLY
 20 .debug_ranges 00000df8  00000000  00000000  00135a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003ec0  00000000  00000000  00136840  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004e2c 	.word	0x08004e2c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004e2c 	.word	0x08004e2c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <HAL_CAN_RxFifo0MsgPendingCallback>:
uint32_t TxMailbox;

int datacheck1 = 0;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader1 ,RxData1);
 80004d4:	4b08      	ldr	r3, [pc, #32]	; (80004f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80004d6:	4a09      	ldr	r2, [pc, #36]	; (80004fc <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80004d8:	2100      	movs	r1, #0
 80004da:	6878      	ldr	r0, [r7, #4]
 80004dc:	f001 fc28 	bl	8001d30 <HAL_CAN_GetRxMessage>
		if (RxHeader1.DLC == 8)
 80004e0:	4b06      	ldr	r3, [pc, #24]	; (80004fc <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80004e2:	691b      	ldr	r3, [r3, #16]
 80004e4:	2b08      	cmp	r3, #8
 80004e6:	d102      	bne.n	80004ee <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
		{
			data_flag1 = 1;
 80004e8:	4b05      	ldr	r3, [pc, #20]	; (8000500 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80004ea:	2201      	movs	r2, #1
 80004ec:	701a      	strb	r2, [r3, #0]
		}

}
 80004ee:	bf00      	nop
 80004f0:	3708      	adds	r7, #8
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	20000190 	.word	0x20000190
 80004fc:	2000016c 	.word	0x2000016c
 8000500:	2000002b 	.word	0x2000002b

08000504 <HAL_UART_RxCpltCallback>:

uint8_t buffer[MAX_BUFFER_SIZE];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	if( huart -> Instance == USART2 ) {
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a13      	ldr	r2, [pc, #76]	; (8000560 <HAL_UART_RxCpltCallback+0x5c>)
 8000512:	4293      	cmp	r3, r2
 8000514:	d11f      	bne.n	8000556 <HAL_UART_RxCpltCallback+0x52>
		buffer[index_buffer++] = temp;
 8000516:	4b13      	ldr	r3, [pc, #76]	; (8000564 <HAL_UART_RxCpltCallback+0x60>)
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	1c5a      	adds	r2, r3, #1
 800051c:	b2d1      	uxtb	r1, r2
 800051e:	4a11      	ldr	r2, [pc, #68]	; (8000564 <HAL_UART_RxCpltCallback+0x60>)
 8000520:	7011      	strb	r1, [r2, #0]
 8000522:	461a      	mov	r2, r3
 8000524:	4b10      	ldr	r3, [pc, #64]	; (8000568 <HAL_UART_RxCpltCallback+0x64>)
 8000526:	7819      	ldrb	r1, [r3, #0]
 8000528:	4b10      	ldr	r3, [pc, #64]	; (800056c <HAL_UART_RxCpltCallback+0x68>)
 800052a:	5499      	strb	r1, [r3, r2]
		if(index_buffer == 30) index_buffer = 0;
 800052c:	4b0d      	ldr	r3, [pc, #52]	; (8000564 <HAL_UART_RxCpltCallback+0x60>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	2b1e      	cmp	r3, #30
 8000532:	d102      	bne.n	800053a <HAL_UART_RxCpltCallback+0x36>
 8000534:	4b0b      	ldr	r3, [pc, #44]	; (8000564 <HAL_UART_RxCpltCallback+0x60>)
 8000536:	2200      	movs	r2, #0
 8000538:	701a      	strb	r2, [r3, #0]
		buffer_flag = 1;
 800053a:	4b0d      	ldr	r3, [pc, #52]	; (8000570 <HAL_UART_RxCpltCallback+0x6c>)
 800053c:	2201      	movs	r2, #1
 800053e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit (&huart2, &temp, 1, 50) ;
 8000540:	2332      	movs	r3, #50	; 0x32
 8000542:	2201      	movs	r2, #1
 8000544:	4908      	ldr	r1, [pc, #32]	; (8000568 <HAL_UART_RxCpltCallback+0x64>)
 8000546:	480b      	ldr	r0, [pc, #44]	; (8000574 <HAL_UART_RxCpltCallback+0x70>)
 8000548:	f003 fc19 	bl	8003d7e <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart2, & temp, 1);
 800054c:	2201      	movs	r2, #1
 800054e:	4906      	ldr	r1, [pc, #24]	; (8000568 <HAL_UART_RxCpltCallback+0x64>)
 8000550:	4808      	ldr	r0, [pc, #32]	; (8000574 <HAL_UART_RxCpltCallback+0x70>)
 8000552:	f003 fca6 	bl	8003ea2 <HAL_UART_Receive_IT>
	}
}
 8000556:	bf00      	nop
 8000558:	3708      	adds	r7, #8
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	40004400 	.word	0x40004400
 8000564:	20000029 	.word	0x20000029
 8000568:	20000028 	.word	0x20000028
 800056c:	2000019c 	.word	0x2000019c
 8000570:	2000002a 	.word	0x2000002a
 8000574:	20000110 	.word	0x20000110

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057c:	f000 fdb0 	bl	80010e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000580:	f000 f896 	bl	80006b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000584:	f000 fa62 	bl	8000a4c <MX_GPIO_Init>
  MX_CAN1_Init();
 8000588:	f000 f942 	bl	8000810 <MX_CAN1_Init>
  MX_CAN2_Init();
 800058c:	f000 f994 	bl	80008b8 <MX_CAN2_Init>
  MX_TIM2_Init();
 8000590:	f000 f9e6 	bl	8000960 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000594:	f000 fa30 	bl	80009f8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000598:	f000 f8e8 	bl	800076c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 800059c:	4839      	ldr	r0, [pc, #228]	; (8000684 <main+0x10c>)
 800059e:	f001 fa73 	bl	8001a88 <HAL_CAN_Start>
  HAL_CAN_Start(&hcan2);
 80005a2:	4839      	ldr	r0, [pc, #228]	; (8000688 <main+0x110>)
 80005a4:	f001 fa70 	bl	8001a88 <HAL_CAN_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 80005a8:	4838      	ldr	r0, [pc, #224]	; (800068c <main+0x114>)
 80005aa:	f002 ff69 	bl	8003480 <HAL_TIM_Base_Start_IT>

  // Activate the notification
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80005ae:	2102      	movs	r1, #2
 80005b0:	4834      	ldr	r0, [pc, #208]	; (8000684 <main+0x10c>)
 80005b2:	f001 fccf 	bl	8001f54 <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING);
 80005b6:	2110      	movs	r1, #16
 80005b8:	4833      	ldr	r0, [pc, #204]	; (8000688 <main+0x110>)
 80005ba:	f001 fccb 	bl	8001f54 <HAL_CAN_ActivateNotification>

  HAL_Delay(300);
 80005be:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80005c2:	f000 fdff 	bl	80011c4 <HAL_Delay>

  TxHeader1.DLC   = 8;  // data length
 80005c6:	4b32      	ldr	r3, [pc, #200]	; (8000690 <main+0x118>)
 80005c8:	2208      	movs	r2, #8
 80005ca:	611a      	str	r2, [r3, #16]
  TxHeader1.IDE   = CAN_ID_STD;
 80005cc:	4b30      	ldr	r3, [pc, #192]	; (8000690 <main+0x118>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	609a      	str	r2, [r3, #8]
  TxHeader1.RTR   = CAN_RTR_DATA;
 80005d2:	4b2f      	ldr	r3, [pc, #188]	; (8000690 <main+0x118>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	60da      	str	r2, [r3, #12]
  TxHeader1.StdId = 0x012;  // ID
 80005d8:	4b2d      	ldr	r3, [pc, #180]	; (8000690 <main+0x118>)
 80005da:	2212      	movs	r2, #18
 80005dc:	601a      	str	r2, [r3, #0]

  TxData1[0] = 100;
 80005de:	4b2d      	ldr	r3, [pc, #180]	; (8000694 <main+0x11c>)
 80005e0:	2264      	movs	r2, #100	; 0x64
 80005e2:	701a      	strb	r2, [r3, #0]
  TxData1[1] = 40;
 80005e4:	4b2b      	ldr	r3, [pc, #172]	; (8000694 <main+0x11c>)
 80005e6:	2228      	movs	r2, #40	; 0x28
 80005e8:	705a      	strb	r2, [r3, #1]

  setTimer1(100);
 80005ea:	2064      	movs	r0, #100	; 0x64
 80005ec:	f000 fcee 	bl	8000fcc <setTimer1>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //LAB1 ECU BOARD
	  /*Node1 (practice board): recieve data*/
	  if(data_flag1){
 80005f0:	4b29      	ldr	r3, [pc, #164]	; (8000698 <main+0x120>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d01a      	beq.n	800062e <main+0xb6>
		  TxData1[0] = RxData1[0];
 80005f8:	4b28      	ldr	r3, [pc, #160]	; (800069c <main+0x124>)
 80005fa:	781a      	ldrb	r2, [r3, #0]
 80005fc:	4b25      	ldr	r3, [pc, #148]	; (8000694 <main+0x11c>)
 80005fe:	701a      	strb	r2, [r3, #0]
		  TxData1[1] = RxData1[1];
 8000600:	4b26      	ldr	r3, [pc, #152]	; (800069c <main+0x124>)
 8000602:	785a      	ldrb	r2, [r3, #1]
 8000604:	4b23      	ldr	r3, [pc, #140]	; (8000694 <main+0x11c>)
 8000606:	705a      	strb	r2, [r3, #1]
		  TxData1[2] = TxData1[0] + TxData1[1];
 8000608:	4b22      	ldr	r3, [pc, #136]	; (8000694 <main+0x11c>)
 800060a:	781a      	ldrb	r2, [r3, #0]
 800060c:	4b21      	ldr	r3, [pc, #132]	; (8000694 <main+0x11c>)
 800060e:	785b      	ldrb	r3, [r3, #1]
 8000610:	4413      	add	r3, r2
 8000612:	b2da      	uxtb	r2, r3
 8000614:	4b1f      	ldr	r3, [pc, #124]	; (8000694 <main+0x11c>)
 8000616:	709a      	strb	r2, [r3, #2]
		  TxData1[7] = calculate_crc_sae_j1850(TxData1, 7);
 8000618:	2107      	movs	r1, #7
 800061a:	481e      	ldr	r0, [pc, #120]	; (8000694 <main+0x11c>)
 800061c:	f000 fa8c 	bl	8000b38 <calculate_crc_sae_j1850>
 8000620:	4603      	mov	r3, r0
 8000622:	461a      	mov	r2, r3
 8000624:	4b1b      	ldr	r3, [pc, #108]	; (8000694 <main+0x11c>)
 8000626:	71da      	strb	r2, [r3, #7]
		  data_flag1 = 0;
 8000628:	4b1b      	ldr	r3, [pc, #108]	; (8000698 <main+0x120>)
 800062a:	2200      	movs	r2, #0
 800062c:	701a      	strb	r2, [r3, #0]
	  }

	  /*Node1 : send data*/
	  if(timer1_flag){
 800062e:	4b1c      	ldr	r3, [pc, #112]	; (80006a0 <main+0x128>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d019      	beq.n	800066a <main+0xf2>
		  setTimer1(20);
 8000636:	2014      	movs	r0, #20
 8000638:	f000 fcc8 	bl	8000fcc <setTimer1>
		  if(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) > 0)
 800063c:	4811      	ldr	r0, [pc, #68]	; (8000684 <main+0x10c>)
 800063e:	f001 fb42 	bl	8001cc6 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d00e      	beq.n	8000666 <main+0xee>
		  { // check Mailbox
		 	 if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader1, TxData1, &TxMailbox) == HAL_OK)
 8000648:	4b16      	ldr	r3, [pc, #88]	; (80006a4 <main+0x12c>)
 800064a:	4a12      	ldr	r2, [pc, #72]	; (8000694 <main+0x11c>)
 800064c:	4910      	ldr	r1, [pc, #64]	; (8000690 <main+0x118>)
 800064e:	480d      	ldr	r0, [pc, #52]	; (8000684 <main+0x10c>)
 8000650:	f001 fa5e 	bl	8001b10 <HAL_CAN_AddTxMessage>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d107      	bne.n	800066a <main+0xf2>
		 	 {
		 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, SET);
 800065a:	2201      	movs	r2, #1
 800065c:	2104      	movs	r1, #4
 800065e:	4812      	ldr	r0, [pc, #72]	; (80006a8 <main+0x130>)
 8000660:	f002 fa0e 	bl	8002a80 <HAL_GPIO_WritePin>
 8000664:	e001      	b.n	800066a <main+0xf2>
		 	  }
		  }
		   else
		   {
		 	  Error_Handler();
 8000666:	f000 faad 	bl	8000bc4 <Error_Handler>
		   }
	  }
	  /*Node 2(verification board): recive data*/
	  if(data_flag2){
 800066a:	4b10      	ldr	r3, [pc, #64]	; (80006ac <main+0x134>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d0be      	beq.n	80005f0 <main+0x78>
		  data_flag2 = 0;
 8000672:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <main+0x134>)
 8000674:	2200      	movs	r2, #0
 8000676:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8000678:	2102      	movs	r1, #2
 800067a:	480b      	ldr	r0, [pc, #44]	; (80006a8 <main+0x130>)
 800067c:	f002 fa19 	bl	8002ab2 <HAL_GPIO_TogglePin>
	  if(data_flag1){
 8000680:	e7b6      	b.n	80005f0 <main+0x78>
 8000682:	bf00      	nop
 8000684:	20000078 	.word	0x20000078
 8000688:	200000a0 	.word	0x200000a0
 800068c:	200000c8 	.word	0x200000c8
 8000690:	20000154 	.word	0x20000154
 8000694:	20000188 	.word	0x20000188
 8000698:	2000002b 	.word	0x2000002b
 800069c:	20000190 	.word	0x20000190
 80006a0:	200001cc 	.word	0x200001cc
 80006a4:	20000198 	.word	0x20000198
 80006a8:	40020400 	.word	0x40020400
 80006ac:	2000002c 	.word	0x2000002c

080006b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b094      	sub	sp, #80	; 0x50
 80006b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b6:	f107 0320 	add.w	r3, r7, #32
 80006ba:	2230      	movs	r2, #48	; 0x30
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f004 fbac 	bl	8004e1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
 80006d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d4:	2300      	movs	r3, #0
 80006d6:	60bb      	str	r3, [r7, #8]
 80006d8:	4b22      	ldr	r3, [pc, #136]	; (8000764 <SystemClock_Config+0xb4>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006dc:	4a21      	ldr	r2, [pc, #132]	; (8000764 <SystemClock_Config+0xb4>)
 80006de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e2:	6413      	str	r3, [r2, #64]	; 0x40
 80006e4:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <SystemClock_Config+0xb4>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f0:	2300      	movs	r3, #0
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	4b1c      	ldr	r3, [pc, #112]	; (8000768 <SystemClock_Config+0xb8>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a1b      	ldr	r2, [pc, #108]	; (8000768 <SystemClock_Config+0xb8>)
 80006fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006fe:	6013      	str	r3, [r2, #0]
 8000700:	4b19      	ldr	r3, [pc, #100]	; (8000768 <SystemClock_Config+0xb8>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800070c:	2302      	movs	r3, #2
 800070e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000710:	2301      	movs	r3, #1
 8000712:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000714:	2310      	movs	r3, #16
 8000716:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000718:	2300      	movs	r3, #0
 800071a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071c:	f107 0320 	add.w	r3, r7, #32
 8000720:	4618      	mov	r0, r3
 8000722:	f002 fa05 	bl	8002b30 <HAL_RCC_OscConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800072c:	f000 fa4a 	bl	8000bc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000730:	230f      	movs	r3, #15
 8000732:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000734:	2300      	movs	r3, #0
 8000736:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000744:	f107 030c 	add.w	r3, r7, #12
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f002 fc68 	bl	8003020 <HAL_RCC_ClockConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000756:	f000 fa35 	bl	8000bc4 <Error_Handler>
  }
}
 800075a:	bf00      	nop
 800075c:	3750      	adds	r7, #80	; 0x50
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800
 8000768:	40007000 	.word	0x40007000

0800076c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000772:	463b      	mov	r3, r7
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800077e:	4b21      	ldr	r3, [pc, #132]	; (8000804 <MX_ADC1_Init+0x98>)
 8000780:	4a21      	ldr	r2, [pc, #132]	; (8000808 <MX_ADC1_Init+0x9c>)
 8000782:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000784:	4b1f      	ldr	r3, [pc, #124]	; (8000804 <MX_ADC1_Init+0x98>)
 8000786:	2200      	movs	r2, #0
 8000788:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800078a:	4b1e      	ldr	r3, [pc, #120]	; (8000804 <MX_ADC1_Init+0x98>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000790:	4b1c      	ldr	r3, [pc, #112]	; (8000804 <MX_ADC1_Init+0x98>)
 8000792:	2200      	movs	r2, #0
 8000794:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000796:	4b1b      	ldr	r3, [pc, #108]	; (8000804 <MX_ADC1_Init+0x98>)
 8000798:	2201      	movs	r2, #1
 800079a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800079c:	4b19      	ldr	r3, [pc, #100]	; (8000804 <MX_ADC1_Init+0x98>)
 800079e:	2200      	movs	r2, #0
 80007a0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007a4:	4b17      	ldr	r3, [pc, #92]	; (8000804 <MX_ADC1_Init+0x98>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007aa:	4b16      	ldr	r3, [pc, #88]	; (8000804 <MX_ADC1_Init+0x98>)
 80007ac:	4a17      	ldr	r2, [pc, #92]	; (800080c <MX_ADC1_Init+0xa0>)
 80007ae:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007b0:	4b14      	ldr	r3, [pc, #80]	; (8000804 <MX_ADC1_Init+0x98>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007b6:	4b13      	ldr	r3, [pc, #76]	; (8000804 <MX_ADC1_Init+0x98>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007bc:	4b11      	ldr	r3, [pc, #68]	; (8000804 <MX_ADC1_Init+0x98>)
 80007be:	2200      	movs	r2, #0
 80007c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <MX_ADC1_Init+0x98>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007ca:	480e      	ldr	r0, [pc, #56]	; (8000804 <MX_ADC1_Init+0x98>)
 80007cc:	f000 fd1e 	bl	800120c <HAL_ADC_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80007d6:	f000 f9f5 	bl	8000bc4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80007da:	2306      	movs	r3, #6
 80007dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007de:	2301      	movs	r3, #1
 80007e0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007e2:	2300      	movs	r3, #0
 80007e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e6:	463b      	mov	r3, r7
 80007e8:	4619      	mov	r1, r3
 80007ea:	4806      	ldr	r0, [pc, #24]	; (8000804 <MX_ADC1_Init+0x98>)
 80007ec:	f000 fd52 	bl	8001294 <HAL_ADC_ConfigChannel>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80007f6:	f000 f9e5 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	3710      	adds	r7, #16
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000030 	.word	0x20000030
 8000808:	40012000 	.word	0x40012000
 800080c:	0f000001 	.word	0x0f000001

08000810 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08a      	sub	sp, #40	; 0x28
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000816:	4b26      	ldr	r3, [pc, #152]	; (80008b0 <MX_CAN1_Init+0xa0>)
 8000818:	4a26      	ldr	r2, [pc, #152]	; (80008b4 <MX_CAN1_Init+0xa4>)
 800081a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 8;
 800081c:	4b24      	ldr	r3, [pc, #144]	; (80008b0 <MX_CAN1_Init+0xa0>)
 800081e:	2208      	movs	r2, #8
 8000820:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000822:	4b23      	ldr	r3, [pc, #140]	; (80008b0 <MX_CAN1_Init+0xa0>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000828:	4b21      	ldr	r3, [pc, #132]	; (80008b0 <MX_CAN1_Init+0xa0>)
 800082a:	2200      	movs	r2, #0
 800082c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800082e:	4b20      	ldr	r3, [pc, #128]	; (80008b0 <MX_CAN1_Init+0xa0>)
 8000830:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000834:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000836:	4b1e      	ldr	r3, [pc, #120]	; (80008b0 <MX_CAN1_Init+0xa0>)
 8000838:	2200      	movs	r2, #0
 800083a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800083c:	4b1c      	ldr	r3, [pc, #112]	; (80008b0 <MX_CAN1_Init+0xa0>)
 800083e:	2200      	movs	r2, #0
 8000840:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000842:	4b1b      	ldr	r3, [pc, #108]	; (80008b0 <MX_CAN1_Init+0xa0>)
 8000844:	2200      	movs	r2, #0
 8000846:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000848:	4b19      	ldr	r3, [pc, #100]	; (80008b0 <MX_CAN1_Init+0xa0>)
 800084a:	2200      	movs	r2, #0
 800084c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800084e:	4b18      	ldr	r3, [pc, #96]	; (80008b0 <MX_CAN1_Init+0xa0>)
 8000850:	2200      	movs	r2, #0
 8000852:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000854:	4b16      	ldr	r3, [pc, #88]	; (80008b0 <MX_CAN1_Init+0xa0>)
 8000856:	2200      	movs	r2, #0
 8000858:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800085a:	4b15      	ldr	r3, [pc, #84]	; (80008b0 <MX_CAN1_Init+0xa0>)
 800085c:	2200      	movs	r2, #0
 800085e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000860:	4813      	ldr	r0, [pc, #76]	; (80008b0 <MX_CAN1_Init+0xa0>)
 8000862:	f000 ff35 	bl	80016d0 <HAL_CAN_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800086c:	f000 f9aa 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

    canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000870:	2301      	movs	r3, #1
 8000872:	623b      	str	r3, [r7, #32]
    canfilterconfig.FilterBank = 4;  // which filter bank to use from the assigned ones
 8000874:	2304      	movs	r3, #4
 8000876:	617b      	str	r3, [r7, #20]
    canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000878:	2300      	movs	r3, #0
 800087a:	613b      	str	r3, [r7, #16]
    canfilterconfig.FilterIdHigh = 0x0A2<<5;
 800087c:	f44f 53a2 	mov.w	r3, #5184	; 0x1440
 8000880:	603b      	str	r3, [r7, #0]
    canfilterconfig.FilterIdLow = 0;
 8000882:	2300      	movs	r3, #0
 8000884:	607b      	str	r3, [r7, #4]
    canfilterconfig.FilterMaskIdHigh = 0x0A2<<5;
 8000886:	f44f 53a2 	mov.w	r3, #5184	; 0x1440
 800088a:	60bb      	str	r3, [r7, #8]
    canfilterconfig.FilterMaskIdLow = 0;
 800088c:	2300      	movs	r3, #0
 800088e:	60fb      	str	r3, [r7, #12]
    canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000890:	2300      	movs	r3, #0
 8000892:	61bb      	str	r3, [r7, #24]
    canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000894:	2301      	movs	r3, #1
 8000896:	61fb      	str	r3, [r7, #28]
    canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 8000898:	2314      	movs	r3, #20
 800089a:	627b      	str	r3, [r7, #36]	; 0x24

    HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 800089c:	463b      	mov	r3, r7
 800089e:	4619      	mov	r1, r3
 80008a0:	4803      	ldr	r0, [pc, #12]	; (80008b0 <MX_CAN1_Init+0xa0>)
 80008a2:	f001 f811 	bl	80018c8 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 80008a6:	bf00      	nop
 80008a8:	3728      	adds	r7, #40	; 0x28
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	20000078 	.word	0x20000078
 80008b4:	40006400 	.word	0x40006400

080008b8 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08a      	sub	sp, #40	; 0x28
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80008be:	4b26      	ldr	r3, [pc, #152]	; (8000958 <MX_CAN2_Init+0xa0>)
 80008c0:	4a26      	ldr	r2, [pc, #152]	; (800095c <MX_CAN2_Init+0xa4>)
 80008c2:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 8;
 80008c4:	4b24      	ldr	r3, [pc, #144]	; (8000958 <MX_CAN2_Init+0xa0>)
 80008c6:	2208      	movs	r2, #8
 80008c8:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80008ca:	4b23      	ldr	r3, [pc, #140]	; (8000958 <MX_CAN2_Init+0xa0>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80008d0:	4b21      	ldr	r3, [pc, #132]	; (8000958 <MX_CAN2_Init+0xa0>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 80008d6:	4b20      	ldr	r3, [pc, #128]	; (8000958 <MX_CAN2_Init+0xa0>)
 80008d8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80008dc:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80008de:	4b1e      	ldr	r3, [pc, #120]	; (8000958 <MX_CAN2_Init+0xa0>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80008e4:	4b1c      	ldr	r3, [pc, #112]	; (8000958 <MX_CAN2_Init+0xa0>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80008ea:	4b1b      	ldr	r3, [pc, #108]	; (8000958 <MX_CAN2_Init+0xa0>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80008f0:	4b19      	ldr	r3, [pc, #100]	; (8000958 <MX_CAN2_Init+0xa0>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80008f6:	4b18      	ldr	r3, [pc, #96]	; (8000958 <MX_CAN2_Init+0xa0>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80008fc:	4b16      	ldr	r3, [pc, #88]	; (8000958 <MX_CAN2_Init+0xa0>)
 80008fe:	2200      	movs	r2, #0
 8000900:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000902:	4b15      	ldr	r3, [pc, #84]	; (8000958 <MX_CAN2_Init+0xa0>)
 8000904:	2200      	movs	r2, #0
 8000906:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000908:	4813      	ldr	r0, [pc, #76]	; (8000958 <MX_CAN2_Init+0xa0>)
 800090a:	f000 fee1 	bl	80016d0 <HAL_CAN_Init>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000914:	f000 f956 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */
      CAN_FilterTypeDef canfilterconfig;

      canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000918:	2301      	movs	r3, #1
 800091a:	623b      	str	r3, [r7, #32]
      canfilterconfig.FilterBank = 25;  // which filter bank to use from the assigned ones
 800091c:	2319      	movs	r3, #25
 800091e:	617b      	str	r3, [r7, #20]
      canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8000920:	2301      	movs	r3, #1
 8000922:	613b      	str	r3, [r7, #16]
      canfilterconfig.FilterIdHigh = 0x012<<5;
 8000924:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000928:	603b      	str	r3, [r7, #0]
      canfilterconfig.FilterIdLow = 0;
 800092a:	2300      	movs	r3, #0
 800092c:	607b      	str	r3, [r7, #4]
      canfilterconfig.FilterMaskIdHigh = 0x012<<5;
 800092e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000932:	60bb      	str	r3, [r7, #8]
      canfilterconfig.FilterMaskIdLow = 0;
 8000934:	2300      	movs	r3, #0
 8000936:	60fb      	str	r3, [r7, #12]
      canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000938:	2300      	movs	r3, #0
 800093a:	61bb      	str	r3, [r7, #24]
      canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800093c:	2301      	movs	r3, #1
 800093e:	61fb      	str	r3, [r7, #28]
      canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 8000940:	2314      	movs	r3, #20
 8000942:	627b      	str	r3, [r7, #36]	; 0x24

      HAL_CAN_ConfigFilter(&hcan2, &canfilterconfig);
 8000944:	463b      	mov	r3, r7
 8000946:	4619      	mov	r1, r3
 8000948:	4803      	ldr	r0, [pc, #12]	; (8000958 <MX_CAN2_Init+0xa0>)
 800094a:	f000 ffbd 	bl	80018c8 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN2_Init 2 */

}
 800094e:	bf00      	nop
 8000950:	3728      	adds	r7, #40	; 0x28
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	200000a0 	.word	0x200000a0
 800095c:	40006800 	.word	0x40006800

08000960 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b086      	sub	sp, #24
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000966:	f107 0308 	add.w	r3, r7, #8
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000974:	463b      	mov	r3, r7
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800097c:	4b1d      	ldr	r3, [pc, #116]	; (80009f4 <MX_TIM2_Init+0x94>)
 800097e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000982:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 8000984:	4b1b      	ldr	r3, [pc, #108]	; (80009f4 <MX_TIM2_Init+0x94>)
 8000986:	220f      	movs	r2, #15
 8000988:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800098a:	4b1a      	ldr	r3, [pc, #104]	; (80009f4 <MX_TIM2_Init+0x94>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8000990:	4b18      	ldr	r3, [pc, #96]	; (80009f4 <MX_TIM2_Init+0x94>)
 8000992:	f242 720f 	movw	r2, #9999	; 0x270f
 8000996:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000998:	4b16      	ldr	r3, [pc, #88]	; (80009f4 <MX_TIM2_Init+0x94>)
 800099a:	2200      	movs	r2, #0
 800099c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800099e:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <MX_TIM2_Init+0x94>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009a4:	4813      	ldr	r0, [pc, #76]	; (80009f4 <MX_TIM2_Init+0x94>)
 80009a6:	f002 fd1b 	bl	80033e0 <HAL_TIM_Base_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80009b0:	f000 f908 	bl	8000bc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009ba:	f107 0308 	add.w	r3, r7, #8
 80009be:	4619      	mov	r1, r3
 80009c0:	480c      	ldr	r0, [pc, #48]	; (80009f4 <MX_TIM2_Init+0x94>)
 80009c2:	f002 fed5 	bl	8003770 <HAL_TIM_ConfigClockSource>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80009cc:	f000 f8fa 	bl	8000bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009d0:	2300      	movs	r3, #0
 80009d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009d4:	2300      	movs	r3, #0
 80009d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009d8:	463b      	mov	r3, r7
 80009da:	4619      	mov	r1, r3
 80009dc:	4805      	ldr	r0, [pc, #20]	; (80009f4 <MX_TIM2_Init+0x94>)
 80009de:	f003 f8f1 	bl	8003bc4 <HAL_TIMEx_MasterConfigSynchronization>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80009e8:	f000 f8ec 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009ec:	bf00      	nop
 80009ee:	3718      	adds	r7, #24
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	200000c8 	.word	0x200000c8

080009f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009fc:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 80009fe:	4a12      	ldr	r2, [pc, #72]	; (8000a48 <MX_USART2_UART_Init+0x50>)
 8000a00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000a02:	4b10      	ldr	r3, [pc, #64]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a04:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a16:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a1c:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a1e:	220c      	movs	r2, #12
 8000a20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a22:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a2e:	4805      	ldr	r0, [pc, #20]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a30:	f003 f958 	bl	8003ce4 <HAL_UART_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a3a:	f000 f8c3 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000110 	.word	0x20000110
 8000a48:	40004400 	.word	0x40004400

08000a4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08a      	sub	sp, #40	; 0x28
 8000a50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
 8000a60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	613b      	str	r3, [r7, #16]
 8000a66:	4b31      	ldr	r3, [pc, #196]	; (8000b2c <MX_GPIO_Init+0xe0>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a30      	ldr	r2, [pc, #192]	; (8000b2c <MX_GPIO_Init+0xe0>)
 8000a6c:	f043 0304 	orr.w	r3, r3, #4
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b2e      	ldr	r3, [pc, #184]	; (8000b2c <MX_GPIO_Init+0xe0>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f003 0304 	and.w	r3, r3, #4
 8000a7a:	613b      	str	r3, [r7, #16]
 8000a7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	4b2a      	ldr	r3, [pc, #168]	; (8000b2c <MX_GPIO_Init+0xe0>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a29      	ldr	r2, [pc, #164]	; (8000b2c <MX_GPIO_Init+0xe0>)
 8000a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b27      	ldr	r3, [pc, #156]	; (8000b2c <MX_GPIO_Init+0xe0>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60bb      	str	r3, [r7, #8]
 8000a9e:	4b23      	ldr	r3, [pc, #140]	; (8000b2c <MX_GPIO_Init+0xe0>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a22      	ldr	r2, [pc, #136]	; (8000b2c <MX_GPIO_Init+0xe0>)
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b20      	ldr	r3, [pc, #128]	; (8000b2c <MX_GPIO_Init+0xe0>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	60bb      	str	r3, [r7, #8]
 8000ab4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	607b      	str	r3, [r7, #4]
 8000aba:	4b1c      	ldr	r3, [pc, #112]	; (8000b2c <MX_GPIO_Init+0xe0>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a1b      	ldr	r2, [pc, #108]	; (8000b2c <MX_GPIO_Init+0xe0>)
 8000ac0:	f043 0302 	orr.w	r3, r3, #2
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b19      	ldr	r3, [pc, #100]	; (8000b2c <MX_GPIO_Init+0xe0>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0302 	and.w	r3, r3, #2
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	210f      	movs	r1, #15
 8000ad6:	4816      	ldr	r0, [pc, #88]	; (8000b30 <MX_GPIO_Init+0xe4>)
 8000ad8:	f001 ffd2 	bl	8002a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000adc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ae0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ae2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ae6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	4619      	mov	r1, r3
 8000af2:	4810      	ldr	r0, [pc, #64]	; (8000b34 <MX_GPIO_Init+0xe8>)
 8000af4:	f001 fe28 	bl	8002748 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000af8:	230f      	movs	r3, #15
 8000afa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afc:	2301      	movs	r3, #1
 8000afe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b04:	2300      	movs	r3, #0
 8000b06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4808      	ldr	r0, [pc, #32]	; (8000b30 <MX_GPIO_Init+0xe4>)
 8000b10:	f001 fe1a 	bl	8002748 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b14:	2200      	movs	r2, #0
 8000b16:	2100      	movs	r1, #0
 8000b18:	2028      	movs	r0, #40	; 0x28
 8000b1a:	f001 fd4c 	bl	80025b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b1e:	2028      	movs	r0, #40	; 0x28
 8000b20:	f001 fd65 	bl	80025ee <HAL_NVIC_EnableIRQ>

}
 8000b24:	bf00      	nop
 8000b26:	3728      	adds	r7, #40	; 0x28
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	40020400 	.word	0x40020400
 8000b34:	40020800 	.word	0x40020800

08000b38 <calculate_crc_sae_j1850>:

/* USER CODE BEGIN 4 */
uint8_t calculate_crc_sae_j1850(uint8_t *data, int length){
 8000b38:	b480      	push	{r7}
 8000b3a:	b087      	sub	sp, #28
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	6039      	str	r1, [r7, #0]
	 uint8_t polynomial = 0x1D; // Generator polynomial for CRC-8 SAE J1850
 8000b42:	231d      	movs	r3, #29
 8000b44:	72fb      	strb	r3, [r7, #11]
	 uint8_t remainder = 0xFF;
 8000b46:	23ff      	movs	r3, #255	; 0xff
 8000b48:	75fb      	strb	r3, [r7, #23]

	    for (int i = 0; i < length; i++) {
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	e022      	b.n	8000b96 <calculate_crc_sae_j1850+0x5e>
	        remainder ^= data[i];
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	687a      	ldr	r2, [r7, #4]
 8000b54:	4413      	add	r3, r2
 8000b56:	781a      	ldrb	r2, [r3, #0]
 8000b58:	7dfb      	ldrb	r3, [r7, #23]
 8000b5a:	4053      	eors	r3, r2
 8000b5c:	75fb      	strb	r3, [r7, #23]
	        for (int bit = 0; bit < 8; bit++) {
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	e012      	b.n	8000b8a <calculate_crc_sae_j1850+0x52>
	            if (remainder & 0x80) {
 8000b64:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	da08      	bge.n	8000b7e <calculate_crc_sae_j1850+0x46>
	                remainder = (remainder << 1) ^ polynomial;
 8000b6c:	7dfb      	ldrb	r3, [r7, #23]
 8000b6e:	005b      	lsls	r3, r3, #1
 8000b70:	b25a      	sxtb	r2, r3
 8000b72:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000b76:	4053      	eors	r3, r2
 8000b78:	b25b      	sxtb	r3, r3
 8000b7a:	75fb      	strb	r3, [r7, #23]
 8000b7c:	e002      	b.n	8000b84 <calculate_crc_sae_j1850+0x4c>
	            } else {
	                remainder <<= 1;
 8000b7e:	7dfb      	ldrb	r3, [r7, #23]
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	75fb      	strb	r3, [r7, #23]
	        for (int bit = 0; bit < 8; bit++) {
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	3301      	adds	r3, #1
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	2b07      	cmp	r3, #7
 8000b8e:	dde9      	ble.n	8000b64 <calculate_crc_sae_j1850+0x2c>
	    for (int i = 0; i < length; i++) {
 8000b90:	693b      	ldr	r3, [r7, #16]
 8000b92:	3301      	adds	r3, #1
 8000b94:	613b      	str	r3, [r7, #16]
 8000b96:	693a      	ldr	r2, [r7, #16]
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	429a      	cmp	r2, r3
 8000b9c:	dbd8      	blt.n	8000b50 <calculate_crc_sae_j1850+0x18>
	            }
	        }
	    }

	    return remainder ^ 0xFF; // Invert the bits
 8000b9e:	7dfb      	ldrb	r3, [r7, #23]
 8000ba0:	43db      	mvns	r3, r3
 8000ba2:	b2db      	uxtb	r3, r3
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	371c      	adds	r7, #28
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
//  if(htim->Instance == TIM2){
//		button_reading();
//		SCH_Update();
//	}
	timerRun();
 8000bb8:	f000 fa24 	bl	8001004 <timerRun>

}
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc8:	b672      	cpsid	i
}
 8000bca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <Error_Handler+0x8>
	...

08000bd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	607b      	str	r3, [r7, #4]
 8000bda:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <HAL_MspInit+0x4c>)
 8000bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bde:	4a0f      	ldr	r2, [pc, #60]	; (8000c1c <HAL_MspInit+0x4c>)
 8000be0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000be4:	6453      	str	r3, [r2, #68]	; 0x44
 8000be6:	4b0d      	ldr	r3, [pc, #52]	; (8000c1c <HAL_MspInit+0x4c>)
 8000be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	603b      	str	r3, [r7, #0]
 8000bf6:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <HAL_MspInit+0x4c>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfa:	4a08      	ldr	r2, [pc, #32]	; (8000c1c <HAL_MspInit+0x4c>)
 8000bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c00:	6413      	str	r3, [r2, #64]	; 0x40
 8000c02:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <HAL_MspInit+0x4c>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c0a:	603b      	str	r3, [r7, #0]
 8000c0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	40023800 	.word	0x40023800

08000c20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08a      	sub	sp, #40	; 0x28
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a17      	ldr	r2, [pc, #92]	; (8000c9c <HAL_ADC_MspInit+0x7c>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d127      	bne.n	8000c92 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	613b      	str	r3, [r7, #16]
 8000c46:	4b16      	ldr	r3, [pc, #88]	; (8000ca0 <HAL_ADC_MspInit+0x80>)
 8000c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4a:	4a15      	ldr	r2, [pc, #84]	; (8000ca0 <HAL_ADC_MspInit+0x80>)
 8000c4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c50:	6453      	str	r3, [r2, #68]	; 0x44
 8000c52:	4b13      	ldr	r3, [pc, #76]	; (8000ca0 <HAL_ADC_MspInit+0x80>)
 8000c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c5a:	613b      	str	r3, [r7, #16]
 8000c5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <HAL_ADC_MspInit+0x80>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a0e      	ldr	r2, [pc, #56]	; (8000ca0 <HAL_ADC_MspInit+0x80>)
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <HAL_ADC_MspInit+0x80>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c7a:	2340      	movs	r3, #64	; 0x40
 8000c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c86:	f107 0314 	add.w	r3, r7, #20
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <HAL_ADC_MspInit+0x84>)
 8000c8e:	f001 fd5b 	bl	8002748 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c92:	bf00      	nop
 8000c94:	3728      	adds	r7, #40	; 0x28
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40012000 	.word	0x40012000
 8000ca0:	40023800 	.word	0x40023800
 8000ca4:	40020000 	.word	0x40020000

08000ca8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08c      	sub	sp, #48	; 0x30
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb0:	f107 031c 	add.w	r3, r7, #28
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a4a      	ldr	r2, [pc, #296]	; (8000df0 <HAL_CAN_MspInit+0x148>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d13e      	bne.n	8000d48 <HAL_CAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000cca:	4b4a      	ldr	r3, [pc, #296]	; (8000df4 <HAL_CAN_MspInit+0x14c>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	3301      	adds	r3, #1
 8000cd0:	4a48      	ldr	r2, [pc, #288]	; (8000df4 <HAL_CAN_MspInit+0x14c>)
 8000cd2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000cd4:	4b47      	ldr	r3, [pc, #284]	; (8000df4 <HAL_CAN_MspInit+0x14c>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d10d      	bne.n	8000cf8 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61bb      	str	r3, [r7, #24]
 8000ce0:	4b45      	ldr	r3, [pc, #276]	; (8000df8 <HAL_CAN_MspInit+0x150>)
 8000ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce4:	4a44      	ldr	r2, [pc, #272]	; (8000df8 <HAL_CAN_MspInit+0x150>)
 8000ce6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cea:	6413      	str	r3, [r2, #64]	; 0x40
 8000cec:	4b42      	ldr	r3, [pc, #264]	; (8000df8 <HAL_CAN_MspInit+0x150>)
 8000cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cf4:	61bb      	str	r3, [r7, #24]
 8000cf6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]
 8000cfc:	4b3e      	ldr	r3, [pc, #248]	; (8000df8 <HAL_CAN_MspInit+0x150>)
 8000cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d00:	4a3d      	ldr	r2, [pc, #244]	; (8000df8 <HAL_CAN_MspInit+0x150>)
 8000d02:	f043 0301 	orr.w	r3, r3, #1
 8000d06:	6313      	str	r3, [r2, #48]	; 0x30
 8000d08:	4b3b      	ldr	r3, [pc, #236]	; (8000df8 <HAL_CAN_MspInit+0x150>)
 8000d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0c:	f003 0301 	and.w	r3, r3, #1
 8000d10:	617b      	str	r3, [r7, #20]
 8000d12:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000d14:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d22:	2303      	movs	r3, #3
 8000d24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000d26:	2309      	movs	r3, #9
 8000d28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2a:	f107 031c 	add.w	r3, r7, #28
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4832      	ldr	r0, [pc, #200]	; (8000dfc <HAL_CAN_MspInit+0x154>)
 8000d32:	f001 fd09 	bl	8002748 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000d36:	2200      	movs	r2, #0
 8000d38:	2100      	movs	r1, #0
 8000d3a:	2014      	movs	r0, #20
 8000d3c:	f001 fc3b 	bl	80025b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000d40:	2014      	movs	r0, #20
 8000d42:	f001 fc54 	bl	80025ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000d46:	e04f      	b.n	8000de8 <HAL_CAN_MspInit+0x140>
  else if(hcan->Instance==CAN2)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a2c      	ldr	r2, [pc, #176]	; (8000e00 <HAL_CAN_MspInit+0x158>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d14a      	bne.n	8000de8 <HAL_CAN_MspInit+0x140>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	613b      	str	r3, [r7, #16]
 8000d56:	4b28      	ldr	r3, [pc, #160]	; (8000df8 <HAL_CAN_MspInit+0x150>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5a:	4a27      	ldr	r2, [pc, #156]	; (8000df8 <HAL_CAN_MspInit+0x150>)
 8000d5c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000d60:	6413      	str	r3, [r2, #64]	; 0x40
 8000d62:	4b25      	ldr	r3, [pc, #148]	; (8000df8 <HAL_CAN_MspInit+0x150>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d66:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000d6a:	613b      	str	r3, [r7, #16]
 8000d6c:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000d6e:	4b21      	ldr	r3, [pc, #132]	; (8000df4 <HAL_CAN_MspInit+0x14c>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	3301      	adds	r3, #1
 8000d74:	4a1f      	ldr	r2, [pc, #124]	; (8000df4 <HAL_CAN_MspInit+0x14c>)
 8000d76:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000d78:	4b1e      	ldr	r3, [pc, #120]	; (8000df4 <HAL_CAN_MspInit+0x14c>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d10d      	bne.n	8000d9c <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000d80:	2300      	movs	r3, #0
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	4b1c      	ldr	r3, [pc, #112]	; (8000df8 <HAL_CAN_MspInit+0x150>)
 8000d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d88:	4a1b      	ldr	r2, [pc, #108]	; (8000df8 <HAL_CAN_MspInit+0x150>)
 8000d8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d90:	4b19      	ldr	r3, [pc, #100]	; (8000df8 <HAL_CAN_MspInit+0x150>)
 8000d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60bb      	str	r3, [r7, #8]
 8000da0:	4b15      	ldr	r3, [pc, #84]	; (8000df8 <HAL_CAN_MspInit+0x150>)
 8000da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da4:	4a14      	ldr	r2, [pc, #80]	; (8000df8 <HAL_CAN_MspInit+0x150>)
 8000da6:	f043 0302 	orr.w	r3, r3, #2
 8000daa:	6313      	str	r3, [r2, #48]	; 0x30
 8000dac:	4b12      	ldr	r3, [pc, #72]	; (8000df8 <HAL_CAN_MspInit+0x150>)
 8000dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db0:	f003 0302 	and.w	r3, r3, #2
 8000db4:	60bb      	str	r3, [r7, #8]
 8000db6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000db8:	2360      	movs	r3, #96	; 0x60
 8000dba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000dc8:	2309      	movs	r3, #9
 8000dca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dcc:	f107 031c 	add.w	r3, r7, #28
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	480c      	ldr	r0, [pc, #48]	; (8000e04 <HAL_CAN_MspInit+0x15c>)
 8000dd4:	f001 fcb8 	bl	8002748 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2100      	movs	r1, #0
 8000ddc:	2041      	movs	r0, #65	; 0x41
 8000dde:	f001 fbea 	bl	80025b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8000de2:	2041      	movs	r0, #65	; 0x41
 8000de4:	f001 fc03 	bl	80025ee <HAL_NVIC_EnableIRQ>
}
 8000de8:	bf00      	nop
 8000dea:	3730      	adds	r7, #48	; 0x30
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40006400 	.word	0x40006400
 8000df4:	200001bc 	.word	0x200001bc
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	40020000 	.word	0x40020000
 8000e00:	40006800 	.word	0x40006800
 8000e04:	40020400 	.word	0x40020400

08000e08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e18:	d115      	bne.n	8000e46 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <HAL_TIM_Base_MspInit+0x48>)
 8000e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e22:	4a0b      	ldr	r2, [pc, #44]	; (8000e50 <HAL_TIM_Base_MspInit+0x48>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2a:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <HAL_TIM_Base_MspInit+0x48>)
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e36:	2200      	movs	r2, #0
 8000e38:	2100      	movs	r1, #0
 8000e3a:	201c      	movs	r0, #28
 8000e3c:	f001 fbbb 	bl	80025b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e40:	201c      	movs	r0, #28
 8000e42:	f001 fbd4 	bl	80025ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e46:	bf00      	nop
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40023800 	.word	0x40023800

08000e54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08a      	sub	sp, #40	; 0x28
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a1d      	ldr	r2, [pc, #116]	; (8000ee8 <HAL_UART_MspInit+0x94>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d133      	bne.n	8000ede <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	613b      	str	r3, [r7, #16]
 8000e7a:	4b1c      	ldr	r3, [pc, #112]	; (8000eec <HAL_UART_MspInit+0x98>)
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7e:	4a1b      	ldr	r2, [pc, #108]	; (8000eec <HAL_UART_MspInit+0x98>)
 8000e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e84:	6413      	str	r3, [r2, #64]	; 0x40
 8000e86:	4b19      	ldr	r3, [pc, #100]	; (8000eec <HAL_UART_MspInit+0x98>)
 8000e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e8e:	613b      	str	r3, [r7, #16]
 8000e90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	4b15      	ldr	r3, [pc, #84]	; (8000eec <HAL_UART_MspInit+0x98>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	4a14      	ldr	r2, [pc, #80]	; (8000eec <HAL_UART_MspInit+0x98>)
 8000e9c:	f043 0301 	orr.w	r3, r3, #1
 8000ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea2:	4b12      	ldr	r3, [pc, #72]	; (8000eec <HAL_UART_MspInit+0x98>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000eae:	230c      	movs	r3, #12
 8000eb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ebe:	2307      	movs	r3, #7
 8000ec0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec2:	f107 0314 	add.w	r3, r7, #20
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4809      	ldr	r0, [pc, #36]	; (8000ef0 <HAL_UART_MspInit+0x9c>)
 8000eca:	f001 fc3d 	bl	8002748 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	2026      	movs	r0, #38	; 0x26
 8000ed4:	f001 fb6f 	bl	80025b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ed8:	2026      	movs	r0, #38	; 0x26
 8000eda:	f001 fb88 	bl	80025ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ede:	bf00      	nop
 8000ee0:	3728      	adds	r7, #40	; 0x28
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40004400 	.word	0x40004400
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	40020000 	.word	0x40020000

08000ef4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <NMI_Handler+0x4>

08000efa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000efe:	e7fe      	b.n	8000efe <HardFault_Handler+0x4>

08000f00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <MemManage_Handler+0x4>

08000f06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f0a:	e7fe      	b.n	8000f0a <BusFault_Handler+0x4>

08000f0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f10:	e7fe      	b.n	8000f10 <UsageFault_Handler+0x4>

08000f12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr

08000f2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f40:	f000 f920 	bl	8001184 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f44:	bf00      	nop
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000f4c:	4802      	ldr	r0, [pc, #8]	; (8000f58 <CAN1_RX0_IRQHandler+0x10>)
 8000f4e:	f001 f827 	bl	8001fa0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000078 	.word	0x20000078

08000f5c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f60:	4802      	ldr	r0, [pc, #8]	; (8000f6c <TIM2_IRQHandler+0x10>)
 8000f62:	f002 fafd 	bl	8003560 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	200000c8 	.word	0x200000c8

08000f70 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f74:	4802      	ldr	r0, [pc, #8]	; (8000f80 <USART2_IRQHandler+0x10>)
 8000f76:	f002 ffc5 	bl	8003f04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000110 	.word	0x20000110

08000f84 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000f88:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f8c:	f001 fdac 	bl	8002ae8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000f98:	4802      	ldr	r0, [pc, #8]	; (8000fa4 <CAN2_RX1_IRQHandler+0x10>)
 8000f9a:	f001 f801 	bl	8001fa0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	200000a0 	.word	0x200000a0

08000fa8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <SystemInit+0x20>)
 8000fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fb2:	4a05      	ldr	r2, [pc, #20]	; (8000fc8 <SystemInit+0x20>)
 8000fb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <setTimer1>:
int timer1_flag = 0;
int timer2_flag = 0;
int timer3_flag = 0;


void setTimer1 (int duration) {
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/Timer_Cycle;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4a08      	ldr	r2, [pc, #32]	; (8000ff8 <setTimer1+0x2c>)
 8000fd8:	fb82 1203 	smull	r1, r2, r2, r3
 8000fdc:	1092      	asrs	r2, r2, #2
 8000fde:	17db      	asrs	r3, r3, #31
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	4a06      	ldr	r2, [pc, #24]	; (8000ffc <setTimer1+0x30>)
 8000fe4:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000fe6:	4b06      	ldr	r3, [pc, #24]	; (8001000 <setTimer1+0x34>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
}
 8000fec:	bf00      	nop
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	66666667 	.word	0x66666667
 8000ffc:	200001c0 	.word	0x200001c0
 8001000:	200001cc 	.word	0x200001cc

08001004 <timerRun>:
void setTimer3 (int duration) {
	timer3_counter = duration/Timer_Cycle;
	timer3_flag = 0;
}

void timerRun(){
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
	if(timer1_counter > 0) {
 8001008:	4b1a      	ldr	r3, [pc, #104]	; (8001074 <timerRun+0x70>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	dd0b      	ble.n	8001028 <timerRun+0x24>
		timer1_counter--;
 8001010:	4b18      	ldr	r3, [pc, #96]	; (8001074 <timerRun+0x70>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	3b01      	subs	r3, #1
 8001016:	4a17      	ldr	r2, [pc, #92]	; (8001074 <timerRun+0x70>)
 8001018:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0) {
 800101a:	4b16      	ldr	r3, [pc, #88]	; (8001074 <timerRun+0x70>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	dc02      	bgt.n	8001028 <timerRun+0x24>
			timer1_flag = 1;
 8001022:	4b15      	ldr	r3, [pc, #84]	; (8001078 <timerRun+0x74>)
 8001024:	2201      	movs	r2, #1
 8001026:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0) {
 8001028:	4b14      	ldr	r3, [pc, #80]	; (800107c <timerRun+0x78>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	dd0b      	ble.n	8001048 <timerRun+0x44>
		timer2_counter--;
 8001030:	4b12      	ldr	r3, [pc, #72]	; (800107c <timerRun+0x78>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	3b01      	subs	r3, #1
 8001036:	4a11      	ldr	r2, [pc, #68]	; (800107c <timerRun+0x78>)
 8001038:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0) {
 800103a:	4b10      	ldr	r3, [pc, #64]	; (800107c <timerRun+0x78>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2b00      	cmp	r3, #0
 8001040:	dc02      	bgt.n	8001048 <timerRun+0x44>
			timer2_flag = 1;
 8001042:	4b0f      	ldr	r3, [pc, #60]	; (8001080 <timerRun+0x7c>)
 8001044:	2201      	movs	r2, #1
 8001046:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0) {
 8001048:	4b0e      	ldr	r3, [pc, #56]	; (8001084 <timerRun+0x80>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	dd0b      	ble.n	8001068 <timerRun+0x64>
		timer3_counter--;
 8001050:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <timerRun+0x80>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	3b01      	subs	r3, #1
 8001056:	4a0b      	ldr	r2, [pc, #44]	; (8001084 <timerRun+0x80>)
 8001058:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0) {
 800105a:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <timerRun+0x80>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2b00      	cmp	r3, #0
 8001060:	dc02      	bgt.n	8001068 <timerRun+0x64>
			timer3_flag = 1;
 8001062:	4b09      	ldr	r3, [pc, #36]	; (8001088 <timerRun+0x84>)
 8001064:	2201      	movs	r2, #1
 8001066:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	200001c0 	.word	0x200001c0
 8001078:	200001cc 	.word	0x200001cc
 800107c:	200001c4 	.word	0x200001c4
 8001080:	200001d0 	.word	0x200001d0
 8001084:	200001c8 	.word	0x200001c8
 8001088:	200001d4 	.word	0x200001d4

0800108c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800108c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001090:	480d      	ldr	r0, [pc, #52]	; (80010c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001092:	490e      	ldr	r1, [pc, #56]	; (80010cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001094:	4a0e      	ldr	r2, [pc, #56]	; (80010d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001096:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001098:	e002      	b.n	80010a0 <LoopCopyDataInit>

0800109a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800109a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800109c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800109e:	3304      	adds	r3, #4

080010a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010a4:	d3f9      	bcc.n	800109a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010a6:	4a0b      	ldr	r2, [pc, #44]	; (80010d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010a8:	4c0b      	ldr	r4, [pc, #44]	; (80010d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010ac:	e001      	b.n	80010b2 <LoopFillZerobss>

080010ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010b0:	3204      	adds	r2, #4

080010b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010b4:	d3fb      	bcc.n	80010ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010b6:	f7ff ff77 	bl	8000fa8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010ba:	f003 fe8b 	bl	8004dd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010be:	f7ff fa5b 	bl	8000578 <main>
  bx  lr    
 80010c2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010cc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80010d0:	08004e6c 	.word	0x08004e6c
  ldr r2, =_sbss
 80010d4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80010d8:	200001dc 	.word	0x200001dc

080010dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010dc:	e7fe      	b.n	80010dc <ADC_IRQHandler>
	...

080010e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010e4:	4b0e      	ldr	r3, [pc, #56]	; (8001120 <HAL_Init+0x40>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a0d      	ldr	r2, [pc, #52]	; (8001120 <HAL_Init+0x40>)
 80010ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010f0:	4b0b      	ldr	r3, [pc, #44]	; (8001120 <HAL_Init+0x40>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a0a      	ldr	r2, [pc, #40]	; (8001120 <HAL_Init+0x40>)
 80010f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010fc:	4b08      	ldr	r3, [pc, #32]	; (8001120 <HAL_Init+0x40>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a07      	ldr	r2, [pc, #28]	; (8001120 <HAL_Init+0x40>)
 8001102:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001106:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001108:	2003      	movs	r0, #3
 800110a:	f001 fa49 	bl	80025a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800110e:	200f      	movs	r0, #15
 8001110:	f000 f808 	bl	8001124 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001114:	f7ff fd5c 	bl	8000bd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001118:	2300      	movs	r3, #0
}
 800111a:	4618      	mov	r0, r3
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40023c00 	.word	0x40023c00

08001124 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800112c:	4b12      	ldr	r3, [pc, #72]	; (8001178 <HAL_InitTick+0x54>)
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	4b12      	ldr	r3, [pc, #72]	; (800117c <HAL_InitTick+0x58>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	4619      	mov	r1, r3
 8001136:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800113a:	fbb3 f3f1 	udiv	r3, r3, r1
 800113e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001142:	4618      	mov	r0, r3
 8001144:	f001 fa61 	bl	800260a <HAL_SYSTICK_Config>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e00e      	b.n	8001170 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2b0f      	cmp	r3, #15
 8001156:	d80a      	bhi.n	800116e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001158:	2200      	movs	r2, #0
 800115a:	6879      	ldr	r1, [r7, #4]
 800115c:	f04f 30ff 	mov.w	r0, #4294967295
 8001160:	f001 fa29 	bl	80025b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001164:	4a06      	ldr	r2, [pc, #24]	; (8001180 <HAL_InitTick+0x5c>)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800116a:	2300      	movs	r3, #0
 800116c:	e000      	b.n	8001170 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
}
 8001170:	4618      	mov	r0, r3
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000000 	.word	0x20000000
 800117c:	20000008 	.word	0x20000008
 8001180:	20000004 	.word	0x20000004

08001184 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001188:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <HAL_IncTick+0x20>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	461a      	mov	r2, r3
 800118e:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <HAL_IncTick+0x24>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4413      	add	r3, r2
 8001194:	4a04      	ldr	r2, [pc, #16]	; (80011a8 <HAL_IncTick+0x24>)
 8001196:	6013      	str	r3, [r2, #0]
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	20000008 	.word	0x20000008
 80011a8:	200001d8 	.word	0x200001d8

080011ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  return uwTick;
 80011b0:	4b03      	ldr	r3, [pc, #12]	; (80011c0 <HAL_GetTick+0x14>)
 80011b2:	681b      	ldr	r3, [r3, #0]
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	200001d8 	.word	0x200001d8

080011c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011cc:	f7ff ffee 	bl	80011ac <HAL_GetTick>
 80011d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011dc:	d005      	beq.n	80011ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011de:	4b0a      	ldr	r3, [pc, #40]	; (8001208 <HAL_Delay+0x44>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	461a      	mov	r2, r3
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	4413      	add	r3, r2
 80011e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011ea:	bf00      	nop
 80011ec:	f7ff ffde 	bl	80011ac <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	68fa      	ldr	r2, [r7, #12]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d8f7      	bhi.n	80011ec <HAL_Delay+0x28>
  {
  }
}
 80011fc:	bf00      	nop
 80011fe:	bf00      	nop
 8001200:	3710      	adds	r7, #16
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000008 	.word	0x20000008

0800120c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001214:	2300      	movs	r3, #0
 8001216:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d101      	bne.n	8001222 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e033      	b.n	800128a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	2b00      	cmp	r3, #0
 8001228:	d109      	bne.n	800123e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff fcf8 	bl	8000c20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2200      	movs	r2, #0
 8001234:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2200      	movs	r2, #0
 800123a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	f003 0310 	and.w	r3, r3, #16
 8001246:	2b00      	cmp	r3, #0
 8001248:	d118      	bne.n	800127c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001252:	f023 0302 	bic.w	r3, r3, #2
 8001256:	f043 0202 	orr.w	r2, r3, #2
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f000 f93a 	bl	80014d8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	f023 0303 	bic.w	r3, r3, #3
 8001272:	f043 0201 	orr.w	r2, r3, #1
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	641a      	str	r2, [r3, #64]	; 0x40
 800127a:	e001      	b.n	8001280 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2200      	movs	r2, #0
 8001284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001288:	7bfb      	ldrb	r3, [r7, #15]
}
 800128a:	4618      	mov	r0, r3
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
	...

08001294 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800129e:	2300      	movs	r3, #0
 80012a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d101      	bne.n	80012b0 <HAL_ADC_ConfigChannel+0x1c>
 80012ac:	2302      	movs	r3, #2
 80012ae:	e105      	b.n	80014bc <HAL_ADC_ConfigChannel+0x228>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2201      	movs	r2, #1
 80012b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2b09      	cmp	r3, #9
 80012be:	d925      	bls.n	800130c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	68d9      	ldr	r1, [r3, #12]
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	461a      	mov	r2, r3
 80012ce:	4613      	mov	r3, r2
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	4413      	add	r3, r2
 80012d4:	3b1e      	subs	r3, #30
 80012d6:	2207      	movs	r2, #7
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	43da      	mvns	r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	400a      	ands	r2, r1
 80012e4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	68d9      	ldr	r1, [r3, #12]
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	689a      	ldr	r2, [r3, #8]
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	4618      	mov	r0, r3
 80012f8:	4603      	mov	r3, r0
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	4403      	add	r3, r0
 80012fe:	3b1e      	subs	r3, #30
 8001300:	409a      	lsls	r2, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	430a      	orrs	r2, r1
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	e022      	b.n	8001352 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	6919      	ldr	r1, [r3, #16]
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	b29b      	uxth	r3, r3
 8001318:	461a      	mov	r2, r3
 800131a:	4613      	mov	r3, r2
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	4413      	add	r3, r2
 8001320:	2207      	movs	r2, #7
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43da      	mvns	r2, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	400a      	ands	r2, r1
 800132e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	6919      	ldr	r1, [r3, #16]
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	689a      	ldr	r2, [r3, #8]
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	b29b      	uxth	r3, r3
 8001340:	4618      	mov	r0, r3
 8001342:	4603      	mov	r3, r0
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	4403      	add	r3, r0
 8001348:	409a      	lsls	r2, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	430a      	orrs	r2, r1
 8001350:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	2b06      	cmp	r3, #6
 8001358:	d824      	bhi.n	80013a4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685a      	ldr	r2, [r3, #4]
 8001364:	4613      	mov	r3, r2
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	4413      	add	r3, r2
 800136a:	3b05      	subs	r3, #5
 800136c:	221f      	movs	r2, #31
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	43da      	mvns	r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	400a      	ands	r2, r1
 800137a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	b29b      	uxth	r3, r3
 8001388:	4618      	mov	r0, r3
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685a      	ldr	r2, [r3, #4]
 800138e:	4613      	mov	r3, r2
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	4413      	add	r3, r2
 8001394:	3b05      	subs	r3, #5
 8001396:	fa00 f203 	lsl.w	r2, r0, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	430a      	orrs	r2, r1
 80013a0:	635a      	str	r2, [r3, #52]	; 0x34
 80013a2:	e04c      	b.n	800143e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	2b0c      	cmp	r3, #12
 80013aa:	d824      	bhi.n	80013f6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685a      	ldr	r2, [r3, #4]
 80013b6:	4613      	mov	r3, r2
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	4413      	add	r3, r2
 80013bc:	3b23      	subs	r3, #35	; 0x23
 80013be:	221f      	movs	r2, #31
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	43da      	mvns	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	400a      	ands	r2, r1
 80013cc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	b29b      	uxth	r3, r3
 80013da:	4618      	mov	r0, r3
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685a      	ldr	r2, [r3, #4]
 80013e0:	4613      	mov	r3, r2
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	4413      	add	r3, r2
 80013e6:	3b23      	subs	r3, #35	; 0x23
 80013e8:	fa00 f203 	lsl.w	r2, r0, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	430a      	orrs	r2, r1
 80013f2:	631a      	str	r2, [r3, #48]	; 0x30
 80013f4:	e023      	b.n	800143e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685a      	ldr	r2, [r3, #4]
 8001400:	4613      	mov	r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	4413      	add	r3, r2
 8001406:	3b41      	subs	r3, #65	; 0x41
 8001408:	221f      	movs	r2, #31
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	43da      	mvns	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	400a      	ands	r2, r1
 8001416:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	b29b      	uxth	r3, r3
 8001424:	4618      	mov	r0, r3
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685a      	ldr	r2, [r3, #4]
 800142a:	4613      	mov	r3, r2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	4413      	add	r3, r2
 8001430:	3b41      	subs	r3, #65	; 0x41
 8001432:	fa00 f203 	lsl.w	r2, r0, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	430a      	orrs	r2, r1
 800143c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800143e:	4b22      	ldr	r3, [pc, #136]	; (80014c8 <HAL_ADC_ConfigChannel+0x234>)
 8001440:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a21      	ldr	r2, [pc, #132]	; (80014cc <HAL_ADC_ConfigChannel+0x238>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d109      	bne.n	8001460 <HAL_ADC_ConfigChannel+0x1cc>
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2b12      	cmp	r3, #18
 8001452:	d105      	bne.n	8001460 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a19      	ldr	r2, [pc, #100]	; (80014cc <HAL_ADC_ConfigChannel+0x238>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d123      	bne.n	80014b2 <HAL_ADC_ConfigChannel+0x21e>
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2b10      	cmp	r3, #16
 8001470:	d003      	beq.n	800147a <HAL_ADC_ConfigChannel+0x1e6>
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2b11      	cmp	r3, #17
 8001478:	d11b      	bne.n	80014b2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2b10      	cmp	r3, #16
 800148c:	d111      	bne.n	80014b2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800148e:	4b10      	ldr	r3, [pc, #64]	; (80014d0 <HAL_ADC_ConfigChannel+0x23c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a10      	ldr	r2, [pc, #64]	; (80014d4 <HAL_ADC_ConfigChannel+0x240>)
 8001494:	fba2 2303 	umull	r2, r3, r2, r3
 8001498:	0c9a      	lsrs	r2, r3, #18
 800149a:	4613      	mov	r3, r2
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	4413      	add	r3, r2
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80014a4:	e002      	b.n	80014ac <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	3b01      	subs	r3, #1
 80014aa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d1f9      	bne.n	80014a6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80014ba:	2300      	movs	r3, #0
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3714      	adds	r7, #20
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	40012300 	.word	0x40012300
 80014cc:	40012000 	.word	0x40012000
 80014d0:	20000000 	.word	0x20000000
 80014d4:	431bde83 	.word	0x431bde83

080014d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014e0:	4b79      	ldr	r3, [pc, #484]	; (80016c8 <ADC_Init+0x1f0>)
 80014e2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	685a      	ldr	r2, [r3, #4]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	431a      	orrs	r2, r3
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	685a      	ldr	r2, [r3, #4]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800150c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	6859      	ldr	r1, [r3, #4]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	691b      	ldr	r3, [r3, #16]
 8001518:	021a      	lsls	r2, r3, #8
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	430a      	orrs	r2, r1
 8001520:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	685a      	ldr	r2, [r3, #4]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001530:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	6859      	ldr	r1, [r3, #4]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689a      	ldr	r2, [r3, #8]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	430a      	orrs	r2, r1
 8001542:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	689a      	ldr	r2, [r3, #8]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001552:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	6899      	ldr	r1, [r3, #8]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	68da      	ldr	r2, [r3, #12]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	430a      	orrs	r2, r1
 8001564:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156a:	4a58      	ldr	r2, [pc, #352]	; (80016cc <ADC_Init+0x1f4>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d022      	beq.n	80015b6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	689a      	ldr	r2, [r3, #8]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800157e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	6899      	ldr	r1, [r3, #8]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	430a      	orrs	r2, r1
 8001590:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	689a      	ldr	r2, [r3, #8]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	6899      	ldr	r1, [r3, #8]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	430a      	orrs	r2, r1
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	e00f      	b.n	80015d6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	689a      	ldr	r2, [r3, #8]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	689a      	ldr	r2, [r3, #8]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015d4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	689a      	ldr	r2, [r3, #8]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f022 0202 	bic.w	r2, r2, #2
 80015e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	6899      	ldr	r1, [r3, #8]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	7e1b      	ldrb	r3, [r3, #24]
 80015f0:	005a      	lsls	r2, r3, #1
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	430a      	orrs	r2, r1
 80015f8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d01b      	beq.n	800163c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	685a      	ldr	r2, [r3, #4]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001612:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	685a      	ldr	r2, [r3, #4]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001622:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6859      	ldr	r1, [r3, #4]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162e:	3b01      	subs	r3, #1
 8001630:	035a      	lsls	r2, r3, #13
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	430a      	orrs	r2, r1
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	e007      	b.n	800164c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	685a      	ldr	r2, [r3, #4]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800164a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800165a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	69db      	ldr	r3, [r3, #28]
 8001666:	3b01      	subs	r3, #1
 8001668:	051a      	lsls	r2, r3, #20
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	430a      	orrs	r2, r1
 8001670:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	689a      	ldr	r2, [r3, #8]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001680:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	6899      	ldr	r1, [r3, #8]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800168e:	025a      	lsls	r2, r3, #9
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	430a      	orrs	r2, r1
 8001696:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	689a      	ldr	r2, [r3, #8]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	6899      	ldr	r1, [r3, #8]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	695b      	ldr	r3, [r3, #20]
 80016b2:	029a      	lsls	r2, r3, #10
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	430a      	orrs	r2, r1
 80016ba:	609a      	str	r2, [r3, #8]
}
 80016bc:	bf00      	nop
 80016be:	3714      	adds	r7, #20
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	40012300 	.word	0x40012300
 80016cc:	0f000001 	.word	0x0f000001

080016d0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d101      	bne.n	80016e2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e0ed      	b.n	80018be <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d102      	bne.n	80016f4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f7ff fada 	bl	8000ca8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f042 0201 	orr.w	r2, r2, #1
 8001702:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001704:	f7ff fd52 	bl	80011ac <HAL_GetTick>
 8001708:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800170a:	e012      	b.n	8001732 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800170c:	f7ff fd4e 	bl	80011ac <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b0a      	cmp	r3, #10
 8001718:	d90b      	bls.n	8001732 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2205      	movs	r2, #5
 800172a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e0c5      	b.n	80018be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	2b00      	cmp	r3, #0
 800173e:	d0e5      	beq.n	800170c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f022 0202 	bic.w	r2, r2, #2
 800174e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001750:	f7ff fd2c 	bl	80011ac <HAL_GetTick>
 8001754:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001756:	e012      	b.n	800177e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001758:	f7ff fd28 	bl	80011ac <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b0a      	cmp	r3, #10
 8001764:	d90b      	bls.n	800177e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2205      	movs	r2, #5
 8001776:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e09f      	b.n	80018be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d1e5      	bne.n	8001758 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	7e1b      	ldrb	r3, [r3, #24]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d108      	bne.n	80017a6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	e007      	b.n	80017b6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	7e5b      	ldrb	r3, [r3, #25]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d108      	bne.n	80017d0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	e007      	b.n	80017e0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80017de:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	7e9b      	ldrb	r3, [r3, #26]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d108      	bne.n	80017fa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f042 0220 	orr.w	r2, r2, #32
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	e007      	b.n	800180a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f022 0220 	bic.w	r2, r2, #32
 8001808:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	7edb      	ldrb	r3, [r3, #27]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d108      	bne.n	8001824 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f022 0210 	bic.w	r2, r2, #16
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	e007      	b.n	8001834 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f042 0210 	orr.w	r2, r2, #16
 8001832:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	7f1b      	ldrb	r3, [r3, #28]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d108      	bne.n	800184e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f042 0208 	orr.w	r2, r2, #8
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	e007      	b.n	800185e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f022 0208 	bic.w	r2, r2, #8
 800185c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	7f5b      	ldrb	r3, [r3, #29]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d108      	bne.n	8001878 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f042 0204 	orr.w	r2, r2, #4
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	e007      	b.n	8001888 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f022 0204 	bic.w	r2, r2, #4
 8001886:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689a      	ldr	r2, [r3, #8]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	431a      	orrs	r2, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	431a      	orrs	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	695b      	ldr	r3, [r3, #20]
 800189c:	ea42 0103 	orr.w	r1, r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	1e5a      	subs	r2, r3, #1
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	430a      	orrs	r2, r1
 80018ac:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2201      	movs	r2, #1
 80018b8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3710      	adds	r7, #16
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
	...

080018c8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b087      	sub	sp, #28
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018de:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80018e0:	7cfb      	ldrb	r3, [r7, #19]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d003      	beq.n	80018ee <HAL_CAN_ConfigFilter+0x26>
 80018e6:	7cfb      	ldrb	r3, [r7, #19]
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	f040 80be 	bne.w	8001a6a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80018ee:	4b65      	ldr	r3, [pc, #404]	; (8001a84 <HAL_CAN_ConfigFilter+0x1bc>)
 80018f0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80018f8:	f043 0201 	orr.w	r2, r3, #1
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001908:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191c:	021b      	lsls	r3, r3, #8
 800191e:	431a      	orrs	r2, r3
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	695b      	ldr	r3, [r3, #20]
 800192a:	f003 031f 	and.w	r3, r3, #31
 800192e:	2201      	movs	r2, #1
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	43db      	mvns	r3, r3
 8001940:	401a      	ands	r2, r3
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	69db      	ldr	r3, [r3, #28]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d123      	bne.n	8001998 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	43db      	mvns	r3, r3
 800195a:	401a      	ands	r2, r3
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800196e:	683a      	ldr	r2, [r7, #0]
 8001970:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001972:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	3248      	adds	r2, #72	; 0x48
 8001978:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800198c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800198e:	6979      	ldr	r1, [r7, #20]
 8001990:	3348      	adds	r3, #72	; 0x48
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	440b      	add	r3, r1
 8001996:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	69db      	ldr	r3, [r3, #28]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d122      	bne.n	80019e6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	431a      	orrs	r2, r3
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80019bc:	683a      	ldr	r2, [r7, #0]
 80019be:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80019c0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	3248      	adds	r2, #72	; 0x48
 80019c6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80019da:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80019dc:	6979      	ldr	r1, [r7, #20]
 80019de:	3348      	adds	r3, #72	; 0x48
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	440b      	add	r3, r1
 80019e4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	699b      	ldr	r3, [r3, #24]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d109      	bne.n	8001a02 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	43db      	mvns	r3, r3
 80019f8:	401a      	ands	r2, r3
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001a00:	e007      	b.n	8001a12 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	431a      	orrs	r2, r3
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d109      	bne.n	8001a2e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	43db      	mvns	r3, r3
 8001a24:	401a      	ands	r2, r3
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001a2c:	e007      	b.n	8001a3e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	431a      	orrs	r2, r3
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	6a1b      	ldr	r3, [r3, #32]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d107      	bne.n	8001a56 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001a5c:	f023 0201 	bic.w	r2, r3, #1
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001a66:	2300      	movs	r3, #0
 8001a68:	e006      	b.n	8001a78 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
  }
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	371c      	adds	r7, #28
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	40006400 	.word	0x40006400

08001a88 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d12e      	bne.n	8001afa <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f022 0201 	bic.w	r2, r2, #1
 8001ab2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001ab4:	f7ff fb7a 	bl	80011ac <HAL_GetTick>
 8001ab8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001aba:	e012      	b.n	8001ae2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001abc:	f7ff fb76 	bl	80011ac <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b0a      	cmp	r3, #10
 8001ac8:	d90b      	bls.n	8001ae2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ace:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2205      	movs	r2, #5
 8001ada:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e012      	b.n	8001b08 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1e5      	bne.n	8001abc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001af6:	2300      	movs	r3, #0
 8001af8:	e006      	b.n	8001b08 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
  }
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b089      	sub	sp, #36	; 0x24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
 8001b1c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b24:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b2e:	7ffb      	ldrb	r3, [r7, #31]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d003      	beq.n	8001b3c <HAL_CAN_AddTxMessage+0x2c>
 8001b34:	7ffb      	ldrb	r3, [r7, #31]
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	f040 80b8 	bne.w	8001cac <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d10a      	bne.n	8001b5c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d105      	bne.n	8001b5c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f000 80a0 	beq.w	8001c9c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	0e1b      	lsrs	r3, r3, #24
 8001b60:	f003 0303 	and.w	r3, r3, #3
 8001b64:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d907      	bls.n	8001b7c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b70:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e09e      	b.n	8001cba <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	409a      	lsls	r2, r3
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d10d      	bne.n	8001baa <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001b98:	68f9      	ldr	r1, [r7, #12]
 8001b9a:	6809      	ldr	r1, [r1, #0]
 8001b9c:	431a      	orrs	r2, r3
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	3318      	adds	r3, #24
 8001ba2:	011b      	lsls	r3, r3, #4
 8001ba4:	440b      	add	r3, r1
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	e00f      	b.n	8001bca <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001bb4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001bba:	68f9      	ldr	r1, [r7, #12]
 8001bbc:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001bbe:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	3318      	adds	r3, #24
 8001bc4:	011b      	lsls	r3, r3, #4
 8001bc6:	440b      	add	r3, r1
 8001bc8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	6819      	ldr	r1, [r3, #0]
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	691a      	ldr	r2, [r3, #16]
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	3318      	adds	r3, #24
 8001bd6:	011b      	lsls	r3, r3, #4
 8001bd8:	440b      	add	r3, r1
 8001bda:	3304      	adds	r3, #4
 8001bdc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	7d1b      	ldrb	r3, [r3, #20]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d111      	bne.n	8001c0a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	3318      	adds	r3, #24
 8001bee:	011b      	lsls	r3, r3, #4
 8001bf0:	4413      	add	r3, r2
 8001bf2:	3304      	adds	r3, #4
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	68fa      	ldr	r2, [r7, #12]
 8001bf8:	6811      	ldr	r1, [r2, #0]
 8001bfa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	3318      	adds	r3, #24
 8001c02:	011b      	lsls	r3, r3, #4
 8001c04:	440b      	add	r3, r1
 8001c06:	3304      	adds	r3, #4
 8001c08:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	3307      	adds	r3, #7
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	061a      	lsls	r2, r3, #24
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	3306      	adds	r3, #6
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	041b      	lsls	r3, r3, #16
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3305      	adds	r3, #5
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	021b      	lsls	r3, r3, #8
 8001c24:	4313      	orrs	r3, r2
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	3204      	adds	r2, #4
 8001c2a:	7812      	ldrb	r2, [r2, #0]
 8001c2c:	4610      	mov	r0, r2
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	6811      	ldr	r1, [r2, #0]
 8001c32:	ea43 0200 	orr.w	r2, r3, r0
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	011b      	lsls	r3, r3, #4
 8001c3a:	440b      	add	r3, r1
 8001c3c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001c40:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	3303      	adds	r3, #3
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	061a      	lsls	r2, r3, #24
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	3302      	adds	r3, #2
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	041b      	lsls	r3, r3, #16
 8001c52:	431a      	orrs	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3301      	adds	r3, #1
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	021b      	lsls	r3, r3, #8
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	7812      	ldrb	r2, [r2, #0]
 8001c62:	4610      	mov	r0, r2
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	6811      	ldr	r1, [r2, #0]
 8001c68:	ea43 0200 	orr.w	r2, r3, r0
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	011b      	lsls	r3, r3, #4
 8001c70:	440b      	add	r3, r1
 8001c72:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001c76:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	3318      	adds	r3, #24
 8001c80:	011b      	lsls	r3, r3, #4
 8001c82:	4413      	add	r3, r2
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	6811      	ldr	r1, [r2, #0]
 8001c8a:	f043 0201 	orr.w	r2, r3, #1
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	3318      	adds	r3, #24
 8001c92:	011b      	lsls	r3, r3, #4
 8001c94:	440b      	add	r3, r1
 8001c96:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	e00e      	b.n	8001cba <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e006      	b.n	8001cba <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
  }
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3724      	adds	r7, #36	; 0x24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b085      	sub	sp, #20
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cd8:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001cda:	7afb      	ldrb	r3, [r7, #11]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d002      	beq.n	8001ce6 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001ce0:	7afb      	ldrb	r3, [r7, #11]
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d11d      	bne.n	8001d22 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d002      	beq.n	8001cfa <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d002      	beq.n	8001d0e <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d002      	beq.n	8001d22 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001d22:	68fb      	ldr	r3, [r7, #12]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3714      	adds	r7, #20
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001d30:	b480      	push	{r7}
 8001d32:	b087      	sub	sp, #28
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
 8001d3c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d44:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d46:	7dfb      	ldrb	r3, [r7, #23]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d003      	beq.n	8001d54 <HAL_CAN_GetRxMessage+0x24>
 8001d4c:	7dfb      	ldrb	r3, [r7, #23]
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	f040 80f3 	bne.w	8001f3a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d10e      	bne.n	8001d78 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	f003 0303 	and.w	r3, r3, #3
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d116      	bne.n	8001d96 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e0e7      	b.n	8001f48 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	f003 0303 	and.w	r3, r3, #3
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d107      	bne.n	8001d96 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e0d8      	b.n	8001f48 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	331b      	adds	r3, #27
 8001d9e:	011b      	lsls	r3, r3, #4
 8001da0:	4413      	add	r3, r2
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0204 	and.w	r2, r3, #4
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d10c      	bne.n	8001dce <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	331b      	adds	r3, #27
 8001dbc:	011b      	lsls	r3, r3, #4
 8001dbe:	4413      	add	r3, r2
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	0d5b      	lsrs	r3, r3, #21
 8001dc4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	e00b      	b.n	8001de6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	331b      	adds	r3, #27
 8001dd6:	011b      	lsls	r3, r3, #4
 8001dd8:	4413      	add	r3, r2
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	08db      	lsrs	r3, r3, #3
 8001dde:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	331b      	adds	r3, #27
 8001dee:	011b      	lsls	r3, r3, #4
 8001df0:	4413      	add	r3, r2
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0202 	and.w	r2, r3, #2
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	331b      	adds	r3, #27
 8001e04:	011b      	lsls	r3, r3, #4
 8001e06:	4413      	add	r3, r2
 8001e08:	3304      	adds	r3, #4
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 020f 	and.w	r2, r3, #15
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	331b      	adds	r3, #27
 8001e1c:	011b      	lsls	r3, r3, #4
 8001e1e:	4413      	add	r3, r2
 8001e20:	3304      	adds	r3, #4
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	0a1b      	lsrs	r3, r3, #8
 8001e26:	b2da      	uxtb	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	331b      	adds	r3, #27
 8001e34:	011b      	lsls	r3, r3, #4
 8001e36:	4413      	add	r3, r2
 8001e38:	3304      	adds	r3, #4
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	0c1b      	lsrs	r3, r3, #16
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	011b      	lsls	r3, r3, #4
 8001e4c:	4413      	add	r3, r2
 8001e4e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	b2da      	uxtb	r2, r3
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	011b      	lsls	r3, r3, #4
 8001e62:	4413      	add	r3, r2
 8001e64:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	0a1a      	lsrs	r2, r3, #8
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	b2d2      	uxtb	r2, r2
 8001e72:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	011b      	lsls	r3, r3, #4
 8001e7c:	4413      	add	r3, r2
 8001e7e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	0c1a      	lsrs	r2, r3, #16
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	3302      	adds	r3, #2
 8001e8a:	b2d2      	uxtb	r2, r2
 8001e8c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	011b      	lsls	r3, r3, #4
 8001e96:	4413      	add	r3, r2
 8001e98:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	0e1a      	lsrs	r2, r3, #24
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	3303      	adds	r3, #3
 8001ea4:	b2d2      	uxtb	r2, r2
 8001ea6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	011b      	lsls	r3, r3, #4
 8001eb0:	4413      	add	r3, r2
 8001eb2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	3304      	adds	r3, #4
 8001ebc:	b2d2      	uxtb	r2, r2
 8001ebe:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	011b      	lsls	r3, r3, #4
 8001ec8:	4413      	add	r3, r2
 8001eca:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	0a1a      	lsrs	r2, r3, #8
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	3305      	adds	r3, #5
 8001ed6:	b2d2      	uxtb	r2, r2
 8001ed8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	011b      	lsls	r3, r3, #4
 8001ee2:	4413      	add	r3, r2
 8001ee4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	0c1a      	lsrs	r2, r3, #16
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	3306      	adds	r3, #6
 8001ef0:	b2d2      	uxtb	r2, r2
 8001ef2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	011b      	lsls	r3, r3, #4
 8001efc:	4413      	add	r3, r2
 8001efe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	0e1a      	lsrs	r2, r3, #24
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	3307      	adds	r3, #7
 8001f0a:	b2d2      	uxtb	r2, r2
 8001f0c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d108      	bne.n	8001f26 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	68da      	ldr	r2, [r3, #12]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f042 0220 	orr.w	r2, r2, #32
 8001f22:	60da      	str	r2, [r3, #12]
 8001f24:	e007      	b.n	8001f36 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	691a      	ldr	r2, [r3, #16]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f042 0220 	orr.w	r2, r2, #32
 8001f34:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001f36:	2300      	movs	r3, #0
 8001f38:	e006      	b.n	8001f48 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
  }
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	371c      	adds	r7, #28
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f64:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f66:	7bfb      	ldrb	r3, [r7, #15]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d002      	beq.n	8001f72 <HAL_CAN_ActivateNotification+0x1e>
 8001f6c:	7bfb      	ldrb	r3, [r7, #15]
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d109      	bne.n	8001f86 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	6959      	ldr	r1, [r3, #20]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001f82:	2300      	movs	r3, #0
 8001f84:	e006      	b.n	8001f94 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
  }
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3714      	adds	r7, #20
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b08a      	sub	sp, #40	; 0x28
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001fdc:	6a3b      	ldr	r3, [r7, #32]
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d07c      	beq.n	80020e0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d023      	beq.n	8002038 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 f983 	bl	800230e <HAL_CAN_TxMailbox0CompleteCallback>
 8002008:	e016      	b.n	8002038 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	f003 0304 	and.w	r3, r3, #4
 8002010:	2b00      	cmp	r3, #0
 8002012:	d004      	beq.n	800201e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002016:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800201a:	627b      	str	r3, [r7, #36]	; 0x24
 800201c:	e00c      	b.n	8002038 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	f003 0308 	and.w	r3, r3, #8
 8002024:	2b00      	cmp	r3, #0
 8002026:	d004      	beq.n	8002032 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800202e:	627b      	str	r3, [r7, #36]	; 0x24
 8002030:	e002      	b.n	8002038 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 f989 	bl	800234a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203e:	2b00      	cmp	r3, #0
 8002040:	d024      	beq.n	800208c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f44f 7280 	mov.w	r2, #256	; 0x100
 800204a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 f963 	bl	8002322 <HAL_CAN_TxMailbox1CompleteCallback>
 800205c:	e016      	b.n	800208c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002064:	2b00      	cmp	r3, #0
 8002066:	d004      	beq.n	8002072 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800206e:	627b      	str	r3, [r7, #36]	; 0x24
 8002070:	e00c      	b.n	800208c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002078:	2b00      	cmp	r3, #0
 800207a:	d004      	beq.n	8002086 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800207c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002082:	627b      	str	r3, [r7, #36]	; 0x24
 8002084:	e002      	b.n	800208c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 f969 	bl	800235e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d024      	beq.n	80020e0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800209e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 f943 	bl	8002336 <HAL_CAN_TxMailbox2CompleteCallback>
 80020b0:	e016      	b.n	80020e0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d004      	beq.n	80020c6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80020bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020c2:	627b      	str	r3, [r7, #36]	; 0x24
 80020c4:	e00c      	b.n	80020e0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d004      	beq.n	80020da <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80020d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020d6:	627b      	str	r3, [r7, #36]	; 0x24
 80020d8:	e002      	b.n	80020e0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 f949 	bl	8002372 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80020e0:	6a3b      	ldr	r3, [r7, #32]
 80020e2:	f003 0308 	and.w	r3, r3, #8
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d00c      	beq.n	8002104 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	f003 0310 	and.w	r3, r3, #16
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d007      	beq.n	8002104 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80020f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020fa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2210      	movs	r2, #16
 8002102:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002104:	6a3b      	ldr	r3, [r7, #32]
 8002106:	f003 0304 	and.w	r3, r3, #4
 800210a:	2b00      	cmp	r3, #0
 800210c:	d00b      	beq.n	8002126 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	f003 0308 	and.w	r3, r3, #8
 8002114:	2b00      	cmp	r3, #0
 8002116:	d006      	beq.n	8002126 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2208      	movs	r2, #8
 800211e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f000 f930 	bl	8002386 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002126:	6a3b      	ldr	r3, [r7, #32]
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d009      	beq.n	8002144 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	f003 0303 	and.w	r3, r3, #3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d002      	beq.n	8002144 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f7fe f9c4 	bl	80004cc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002144:	6a3b      	ldr	r3, [r7, #32]
 8002146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00c      	beq.n	8002168 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	f003 0310 	and.w	r3, r3, #16
 8002154:	2b00      	cmp	r3, #0
 8002156:	d007      	beq.n	8002168 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800215e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2210      	movs	r2, #16
 8002166:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002168:	6a3b      	ldr	r3, [r7, #32]
 800216a:	f003 0320 	and.w	r3, r3, #32
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00b      	beq.n	800218a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	f003 0308 	and.w	r3, r3, #8
 8002178:	2b00      	cmp	r3, #0
 800217a:	d006      	beq.n	800218a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2208      	movs	r2, #8
 8002182:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f000 f912 	bl	80023ae <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800218a:	6a3b      	ldr	r3, [r7, #32]
 800218c:	f003 0310 	and.w	r3, r3, #16
 8002190:	2b00      	cmp	r3, #0
 8002192:	d009      	beq.n	80021a8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	f003 0303 	and.w	r3, r3, #3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d002      	beq.n	80021a8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 f8f9 	bl	800239a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80021a8:	6a3b      	ldr	r3, [r7, #32]
 80021aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00b      	beq.n	80021ca <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	f003 0310 	and.w	r3, r3, #16
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d006      	beq.n	80021ca <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2210      	movs	r2, #16
 80021c2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f000 f8fc 	bl	80023c2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80021ca:	6a3b      	ldr	r3, [r7, #32]
 80021cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d00b      	beq.n	80021ec <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	f003 0308 	and.w	r3, r3, #8
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d006      	beq.n	80021ec <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2208      	movs	r2, #8
 80021e4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 f8f5 	bl	80023d6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80021ec:	6a3b      	ldr	r3, [r7, #32]
 80021ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d07b      	beq.n	80022ee <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	f003 0304 	and.w	r3, r3, #4
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d072      	beq.n	80022e6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002200:	6a3b      	ldr	r3, [r7, #32]
 8002202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002206:	2b00      	cmp	r3, #0
 8002208:	d008      	beq.n	800221c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002210:	2b00      	cmp	r3, #0
 8002212:	d003      	beq.n	800221c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002216:	f043 0301 	orr.w	r3, r3, #1
 800221a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800221c:	6a3b      	ldr	r3, [r7, #32]
 800221e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002222:	2b00      	cmp	r3, #0
 8002224:	d008      	beq.n	8002238 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800222c:	2b00      	cmp	r3, #0
 800222e:	d003      	beq.n	8002238 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002232:	f043 0302 	orr.w	r3, r3, #2
 8002236:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002238:	6a3b      	ldr	r3, [r7, #32]
 800223a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800223e:	2b00      	cmp	r3, #0
 8002240:	d008      	beq.n	8002254 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002248:	2b00      	cmp	r3, #0
 800224a:	d003      	beq.n	8002254 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224e:	f043 0304 	orr.w	r3, r3, #4
 8002252:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002254:	6a3b      	ldr	r3, [r7, #32]
 8002256:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800225a:	2b00      	cmp	r3, #0
 800225c:	d043      	beq.n	80022e6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002264:	2b00      	cmp	r3, #0
 8002266:	d03e      	beq.n	80022e6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800226e:	2b60      	cmp	r3, #96	; 0x60
 8002270:	d02b      	beq.n	80022ca <HAL_CAN_IRQHandler+0x32a>
 8002272:	2b60      	cmp	r3, #96	; 0x60
 8002274:	d82e      	bhi.n	80022d4 <HAL_CAN_IRQHandler+0x334>
 8002276:	2b50      	cmp	r3, #80	; 0x50
 8002278:	d022      	beq.n	80022c0 <HAL_CAN_IRQHandler+0x320>
 800227a:	2b50      	cmp	r3, #80	; 0x50
 800227c:	d82a      	bhi.n	80022d4 <HAL_CAN_IRQHandler+0x334>
 800227e:	2b40      	cmp	r3, #64	; 0x40
 8002280:	d019      	beq.n	80022b6 <HAL_CAN_IRQHandler+0x316>
 8002282:	2b40      	cmp	r3, #64	; 0x40
 8002284:	d826      	bhi.n	80022d4 <HAL_CAN_IRQHandler+0x334>
 8002286:	2b30      	cmp	r3, #48	; 0x30
 8002288:	d010      	beq.n	80022ac <HAL_CAN_IRQHandler+0x30c>
 800228a:	2b30      	cmp	r3, #48	; 0x30
 800228c:	d822      	bhi.n	80022d4 <HAL_CAN_IRQHandler+0x334>
 800228e:	2b10      	cmp	r3, #16
 8002290:	d002      	beq.n	8002298 <HAL_CAN_IRQHandler+0x2f8>
 8002292:	2b20      	cmp	r3, #32
 8002294:	d005      	beq.n	80022a2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002296:	e01d      	b.n	80022d4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229a:	f043 0308 	orr.w	r3, r3, #8
 800229e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80022a0:	e019      	b.n	80022d6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80022a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a4:	f043 0310 	orr.w	r3, r3, #16
 80022a8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80022aa:	e014      	b.n	80022d6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80022ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ae:	f043 0320 	orr.w	r3, r3, #32
 80022b2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80022b4:	e00f      	b.n	80022d6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80022b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022bc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80022be:	e00a      	b.n	80022d6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80022c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022c6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80022c8:	e005      	b.n	80022d6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80022ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022d0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80022d2:	e000      	b.n	80022d6 <HAL_CAN_IRQHandler+0x336>
            break;
 80022d4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	699a      	ldr	r2, [r3, #24]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80022e4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2204      	movs	r2, #4
 80022ec:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80022ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d008      	beq.n	8002306 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fa:	431a      	orrs	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f000 f872 	bl	80023ea <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002306:	bf00      	nop
 8002308:	3728      	adds	r7, #40	; 0x28
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800230e:	b480      	push	{r7}
 8002310:	b083      	sub	sp, #12
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002316:	bf00      	nop
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr

08002322 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002322:	b480      	push	{r7}
 8002324:	b083      	sub	sp, #12
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr

08002336 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002336:	b480      	push	{r7}
 8002338:	b083      	sub	sp, #12
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800233e:	bf00      	nop
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr

0800234a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800234a:	b480      	push	{r7}
 800234c:	b083      	sub	sp, #12
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002352:	bf00      	nop
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr

0800235e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800235e:	b480      	push	{r7}
 8002360:	b083      	sub	sp, #12
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002366:	bf00      	nop
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr

08002372 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002372:	b480      	push	{r7}
 8002374:	b083      	sub	sp, #12
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800237a:	bf00      	nop
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002386:	b480      	push	{r7}
 8002388:	b083      	sub	sp, #12
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800238e:	bf00      	nop
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800239a:	b480      	push	{r7}
 800239c:	b083      	sub	sp, #12
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80023a2:	bf00      	nop
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr

080023ae <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80023ae:	b480      	push	{r7}
 80023b0:	b083      	sub	sp, #12
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80023b6:	bf00      	nop
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr

080023c2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80023c2:	b480      	push	{r7}
 80023c4:	b083      	sub	sp, #12
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80023ca:	bf00      	nop
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr

080023d6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr

080023ea <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80023ea:	b480      	push	{r7}
 80023ec:	b083      	sub	sp, #12
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80023f2:	bf00      	nop
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
	...

08002400 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002400:	b480      	push	{r7}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f003 0307 	and.w	r3, r3, #7
 800240e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002410:	4b0c      	ldr	r3, [pc, #48]	; (8002444 <__NVIC_SetPriorityGrouping+0x44>)
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002416:	68ba      	ldr	r2, [r7, #8]
 8002418:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800241c:	4013      	ands	r3, r2
 800241e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002428:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800242c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002430:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002432:	4a04      	ldr	r2, [pc, #16]	; (8002444 <__NVIC_SetPriorityGrouping+0x44>)
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	60d3      	str	r3, [r2, #12]
}
 8002438:	bf00      	nop
 800243a:	3714      	adds	r7, #20
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr
 8002444:	e000ed00 	.word	0xe000ed00

08002448 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800244c:	4b04      	ldr	r3, [pc, #16]	; (8002460 <__NVIC_GetPriorityGrouping+0x18>)
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	0a1b      	lsrs	r3, r3, #8
 8002452:	f003 0307 	and.w	r3, r3, #7
}
 8002456:	4618      	mov	r0, r3
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr
 8002460:	e000ed00 	.word	0xe000ed00

08002464 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	4603      	mov	r3, r0
 800246c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800246e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002472:	2b00      	cmp	r3, #0
 8002474:	db0b      	blt.n	800248e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002476:	79fb      	ldrb	r3, [r7, #7]
 8002478:	f003 021f 	and.w	r2, r3, #31
 800247c:	4907      	ldr	r1, [pc, #28]	; (800249c <__NVIC_EnableIRQ+0x38>)
 800247e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002482:	095b      	lsrs	r3, r3, #5
 8002484:	2001      	movs	r0, #1
 8002486:	fa00 f202 	lsl.w	r2, r0, r2
 800248a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	e000e100 	.word	0xe000e100

080024a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	4603      	mov	r3, r0
 80024a8:	6039      	str	r1, [r7, #0]
 80024aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	db0a      	blt.n	80024ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	b2da      	uxtb	r2, r3
 80024b8:	490c      	ldr	r1, [pc, #48]	; (80024ec <__NVIC_SetPriority+0x4c>)
 80024ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024be:	0112      	lsls	r2, r2, #4
 80024c0:	b2d2      	uxtb	r2, r2
 80024c2:	440b      	add	r3, r1
 80024c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024c8:	e00a      	b.n	80024e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	b2da      	uxtb	r2, r3
 80024ce:	4908      	ldr	r1, [pc, #32]	; (80024f0 <__NVIC_SetPriority+0x50>)
 80024d0:	79fb      	ldrb	r3, [r7, #7]
 80024d2:	f003 030f 	and.w	r3, r3, #15
 80024d6:	3b04      	subs	r3, #4
 80024d8:	0112      	lsls	r2, r2, #4
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	440b      	add	r3, r1
 80024de:	761a      	strb	r2, [r3, #24]
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr
 80024ec:	e000e100 	.word	0xe000e100
 80024f0:	e000ed00 	.word	0xe000ed00

080024f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b089      	sub	sp, #36	; 0x24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f003 0307 	and.w	r3, r3, #7
 8002506:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	f1c3 0307 	rsb	r3, r3, #7
 800250e:	2b04      	cmp	r3, #4
 8002510:	bf28      	it	cs
 8002512:	2304      	movcs	r3, #4
 8002514:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	3304      	adds	r3, #4
 800251a:	2b06      	cmp	r3, #6
 800251c:	d902      	bls.n	8002524 <NVIC_EncodePriority+0x30>
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	3b03      	subs	r3, #3
 8002522:	e000      	b.n	8002526 <NVIC_EncodePriority+0x32>
 8002524:	2300      	movs	r3, #0
 8002526:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002528:	f04f 32ff 	mov.w	r2, #4294967295
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	fa02 f303 	lsl.w	r3, r2, r3
 8002532:	43da      	mvns	r2, r3
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	401a      	ands	r2, r3
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800253c:	f04f 31ff 	mov.w	r1, #4294967295
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	fa01 f303 	lsl.w	r3, r1, r3
 8002546:	43d9      	mvns	r1, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800254c:	4313      	orrs	r3, r2
         );
}
 800254e:	4618      	mov	r0, r3
 8002550:	3724      	adds	r7, #36	; 0x24
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
	...

0800255c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	3b01      	subs	r3, #1
 8002568:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800256c:	d301      	bcc.n	8002572 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800256e:	2301      	movs	r3, #1
 8002570:	e00f      	b.n	8002592 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002572:	4a0a      	ldr	r2, [pc, #40]	; (800259c <SysTick_Config+0x40>)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	3b01      	subs	r3, #1
 8002578:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800257a:	210f      	movs	r1, #15
 800257c:	f04f 30ff 	mov.w	r0, #4294967295
 8002580:	f7ff ff8e 	bl	80024a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002584:	4b05      	ldr	r3, [pc, #20]	; (800259c <SysTick_Config+0x40>)
 8002586:	2200      	movs	r2, #0
 8002588:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800258a:	4b04      	ldr	r3, [pc, #16]	; (800259c <SysTick_Config+0x40>)
 800258c:	2207      	movs	r2, #7
 800258e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	e000e010 	.word	0xe000e010

080025a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f7ff ff29 	bl	8002400 <__NVIC_SetPriorityGrouping>
}
 80025ae:	bf00      	nop
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b086      	sub	sp, #24
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	4603      	mov	r3, r0
 80025be:	60b9      	str	r1, [r7, #8]
 80025c0:	607a      	str	r2, [r7, #4]
 80025c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025c4:	2300      	movs	r3, #0
 80025c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025c8:	f7ff ff3e 	bl	8002448 <__NVIC_GetPriorityGrouping>
 80025cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	68b9      	ldr	r1, [r7, #8]
 80025d2:	6978      	ldr	r0, [r7, #20]
 80025d4:	f7ff ff8e 	bl	80024f4 <NVIC_EncodePriority>
 80025d8:	4602      	mov	r2, r0
 80025da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025de:	4611      	mov	r1, r2
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7ff ff5d 	bl	80024a0 <__NVIC_SetPriority>
}
 80025e6:	bf00      	nop
 80025e8:	3718      	adds	r7, #24
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b082      	sub	sp, #8
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	4603      	mov	r3, r0
 80025f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7ff ff31 	bl	8002464 <__NVIC_EnableIRQ>
}
 8002602:	bf00      	nop
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b082      	sub	sp, #8
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f7ff ffa2 	bl	800255c <SysTick_Config>
 8002618:	4603      	mov	r3, r0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b084      	sub	sp, #16
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800262e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002630:	f7fe fdbc 	bl	80011ac <HAL_GetTick>
 8002634:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d008      	beq.n	8002654 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2280      	movs	r2, #128	; 0x80
 8002646:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e052      	b.n	80026fa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f022 0216 	bic.w	r2, r2, #22
 8002662:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	695a      	ldr	r2, [r3, #20]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002672:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002678:	2b00      	cmp	r3, #0
 800267a:	d103      	bne.n	8002684 <HAL_DMA_Abort+0x62>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002680:	2b00      	cmp	r3, #0
 8002682:	d007      	beq.n	8002694 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f022 0208 	bic.w	r2, r2, #8
 8002692:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f022 0201 	bic.w	r2, r2, #1
 80026a2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026a4:	e013      	b.n	80026ce <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026a6:	f7fe fd81 	bl	80011ac <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b05      	cmp	r3, #5
 80026b2:	d90c      	bls.n	80026ce <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2220      	movs	r2, #32
 80026b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2203      	movs	r2, #3
 80026be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e015      	b.n	80026fa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1e4      	bne.n	80026a6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e0:	223f      	movs	r2, #63	; 0x3f
 80026e2:	409a      	lsls	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002702:	b480      	push	{r7}
 8002704:	b083      	sub	sp, #12
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d004      	beq.n	8002720 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2280      	movs	r2, #128	; 0x80
 800271a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e00c      	b.n	800273a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2205      	movs	r2, #5
 8002724:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f022 0201 	bic.w	r2, r2, #1
 8002736:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
	...

08002748 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002748:	b480      	push	{r7}
 800274a:	b089      	sub	sp, #36	; 0x24
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002752:	2300      	movs	r3, #0
 8002754:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002756:	2300      	movs	r3, #0
 8002758:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800275a:	2300      	movs	r3, #0
 800275c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800275e:	2300      	movs	r3, #0
 8002760:	61fb      	str	r3, [r7, #28]
 8002762:	e16b      	b.n	8002a3c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002764:	2201      	movs	r2, #1
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	4013      	ands	r3, r2
 8002776:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	429a      	cmp	r2, r3
 800277e:	f040 815a 	bne.w	8002a36 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f003 0303 	and.w	r3, r3, #3
 800278a:	2b01      	cmp	r3, #1
 800278c:	d005      	beq.n	800279a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002796:	2b02      	cmp	r3, #2
 8002798:	d130      	bne.n	80027fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	2203      	movs	r2, #3
 80027a6:	fa02 f303 	lsl.w	r3, r2, r3
 80027aa:	43db      	mvns	r3, r3
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	4013      	ands	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	68da      	ldr	r2, [r3, #12]
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	fa02 f303 	lsl.w	r3, r2, r3
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027d0:	2201      	movs	r2, #1
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	43db      	mvns	r3, r3
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	4013      	ands	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	091b      	lsrs	r3, r3, #4
 80027e6:	f003 0201 	and.w	r2, r3, #1
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f003 0303 	and.w	r3, r3, #3
 8002804:	2b03      	cmp	r3, #3
 8002806:	d017      	beq.n	8002838 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	2203      	movs	r2, #3
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	43db      	mvns	r3, r3
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	4013      	ands	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	689a      	ldr	r2, [r3, #8]
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	4313      	orrs	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f003 0303 	and.w	r3, r3, #3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d123      	bne.n	800288c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	08da      	lsrs	r2, r3, #3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	3208      	adds	r2, #8
 800284c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002850:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	f003 0307 	and.w	r3, r3, #7
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	220f      	movs	r2, #15
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	43db      	mvns	r3, r3
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	4013      	ands	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	691a      	ldr	r2, [r3, #16]
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	f003 0307 	and.w	r3, r3, #7
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	4313      	orrs	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	08da      	lsrs	r2, r3, #3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	3208      	adds	r2, #8
 8002886:	69b9      	ldr	r1, [r7, #24]
 8002888:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	2203      	movs	r2, #3
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	43db      	mvns	r3, r3
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	4013      	ands	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f003 0203 	and.w	r2, r3, #3
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f000 80b4 	beq.w	8002a36 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ce:	2300      	movs	r3, #0
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	4b60      	ldr	r3, [pc, #384]	; (8002a54 <HAL_GPIO_Init+0x30c>)
 80028d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d6:	4a5f      	ldr	r2, [pc, #380]	; (8002a54 <HAL_GPIO_Init+0x30c>)
 80028d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028dc:	6453      	str	r3, [r2, #68]	; 0x44
 80028de:	4b5d      	ldr	r3, [pc, #372]	; (8002a54 <HAL_GPIO_Init+0x30c>)
 80028e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028e6:	60fb      	str	r3, [r7, #12]
 80028e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028ea:	4a5b      	ldr	r2, [pc, #364]	; (8002a58 <HAL_GPIO_Init+0x310>)
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	089b      	lsrs	r3, r3, #2
 80028f0:	3302      	adds	r3, #2
 80028f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	f003 0303 	and.w	r3, r3, #3
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	220f      	movs	r2, #15
 8002902:	fa02 f303 	lsl.w	r3, r2, r3
 8002906:	43db      	mvns	r3, r3
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	4013      	ands	r3, r2
 800290c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a52      	ldr	r2, [pc, #328]	; (8002a5c <HAL_GPIO_Init+0x314>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d02b      	beq.n	800296e <HAL_GPIO_Init+0x226>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a51      	ldr	r2, [pc, #324]	; (8002a60 <HAL_GPIO_Init+0x318>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d025      	beq.n	800296a <HAL_GPIO_Init+0x222>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a50      	ldr	r2, [pc, #320]	; (8002a64 <HAL_GPIO_Init+0x31c>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d01f      	beq.n	8002966 <HAL_GPIO_Init+0x21e>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a4f      	ldr	r2, [pc, #316]	; (8002a68 <HAL_GPIO_Init+0x320>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d019      	beq.n	8002962 <HAL_GPIO_Init+0x21a>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a4e      	ldr	r2, [pc, #312]	; (8002a6c <HAL_GPIO_Init+0x324>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d013      	beq.n	800295e <HAL_GPIO_Init+0x216>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a4d      	ldr	r2, [pc, #308]	; (8002a70 <HAL_GPIO_Init+0x328>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d00d      	beq.n	800295a <HAL_GPIO_Init+0x212>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a4c      	ldr	r2, [pc, #304]	; (8002a74 <HAL_GPIO_Init+0x32c>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d007      	beq.n	8002956 <HAL_GPIO_Init+0x20e>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a4b      	ldr	r2, [pc, #300]	; (8002a78 <HAL_GPIO_Init+0x330>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d101      	bne.n	8002952 <HAL_GPIO_Init+0x20a>
 800294e:	2307      	movs	r3, #7
 8002950:	e00e      	b.n	8002970 <HAL_GPIO_Init+0x228>
 8002952:	2308      	movs	r3, #8
 8002954:	e00c      	b.n	8002970 <HAL_GPIO_Init+0x228>
 8002956:	2306      	movs	r3, #6
 8002958:	e00a      	b.n	8002970 <HAL_GPIO_Init+0x228>
 800295a:	2305      	movs	r3, #5
 800295c:	e008      	b.n	8002970 <HAL_GPIO_Init+0x228>
 800295e:	2304      	movs	r3, #4
 8002960:	e006      	b.n	8002970 <HAL_GPIO_Init+0x228>
 8002962:	2303      	movs	r3, #3
 8002964:	e004      	b.n	8002970 <HAL_GPIO_Init+0x228>
 8002966:	2302      	movs	r3, #2
 8002968:	e002      	b.n	8002970 <HAL_GPIO_Init+0x228>
 800296a:	2301      	movs	r3, #1
 800296c:	e000      	b.n	8002970 <HAL_GPIO_Init+0x228>
 800296e:	2300      	movs	r3, #0
 8002970:	69fa      	ldr	r2, [r7, #28]
 8002972:	f002 0203 	and.w	r2, r2, #3
 8002976:	0092      	lsls	r2, r2, #2
 8002978:	4093      	lsls	r3, r2
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	4313      	orrs	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002980:	4935      	ldr	r1, [pc, #212]	; (8002a58 <HAL_GPIO_Init+0x310>)
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	089b      	lsrs	r3, r3, #2
 8002986:	3302      	adds	r3, #2
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800298e:	4b3b      	ldr	r3, [pc, #236]	; (8002a7c <HAL_GPIO_Init+0x334>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	43db      	mvns	r3, r3
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	4013      	ands	r3, r2
 800299c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d003      	beq.n	80029b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029b2:	4a32      	ldr	r2, [pc, #200]	; (8002a7c <HAL_GPIO_Init+0x334>)
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029b8:	4b30      	ldr	r3, [pc, #192]	; (8002a7c <HAL_GPIO_Init+0x334>)
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	43db      	mvns	r3, r3
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	4013      	ands	r3, r2
 80029c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d003      	beq.n	80029dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	4313      	orrs	r3, r2
 80029da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029dc:	4a27      	ldr	r2, [pc, #156]	; (8002a7c <HAL_GPIO_Init+0x334>)
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029e2:	4b26      	ldr	r3, [pc, #152]	; (8002a7c <HAL_GPIO_Init+0x334>)
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	43db      	mvns	r3, r3
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	4013      	ands	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d003      	beq.n	8002a06 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a06:	4a1d      	ldr	r2, [pc, #116]	; (8002a7c <HAL_GPIO_Init+0x334>)
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a0c:	4b1b      	ldr	r3, [pc, #108]	; (8002a7c <HAL_GPIO_Init+0x334>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	43db      	mvns	r3, r3
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d003      	beq.n	8002a30 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a30:	4a12      	ldr	r2, [pc, #72]	; (8002a7c <HAL_GPIO_Init+0x334>)
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	3301      	adds	r3, #1
 8002a3a:	61fb      	str	r3, [r7, #28]
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	2b0f      	cmp	r3, #15
 8002a40:	f67f ae90 	bls.w	8002764 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a44:	bf00      	nop
 8002a46:	bf00      	nop
 8002a48:	3724      	adds	r7, #36	; 0x24
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	40023800 	.word	0x40023800
 8002a58:	40013800 	.word	0x40013800
 8002a5c:	40020000 	.word	0x40020000
 8002a60:	40020400 	.word	0x40020400
 8002a64:	40020800 	.word	0x40020800
 8002a68:	40020c00 	.word	0x40020c00
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	40021400 	.word	0x40021400
 8002a74:	40021800 	.word	0x40021800
 8002a78:	40021c00 	.word	0x40021c00
 8002a7c:	40013c00 	.word	0x40013c00

08002a80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	460b      	mov	r3, r1
 8002a8a:	807b      	strh	r3, [r7, #2]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a90:	787b      	ldrb	r3, [r7, #1]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a96:	887a      	ldrh	r2, [r7, #2]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a9c:	e003      	b.n	8002aa6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a9e:	887b      	ldrh	r3, [r7, #2]
 8002aa0:	041a      	lsls	r2, r3, #16
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	619a      	str	r2, [r3, #24]
}
 8002aa6:	bf00      	nop
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr

08002ab2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	b085      	sub	sp, #20
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
 8002aba:	460b      	mov	r3, r1
 8002abc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ac4:	887a      	ldrh	r2, [r7, #2]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	041a      	lsls	r2, r3, #16
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	43d9      	mvns	r1, r3
 8002ad0:	887b      	ldrh	r3, [r7, #2]
 8002ad2:	400b      	ands	r3, r1
 8002ad4:	431a      	orrs	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	619a      	str	r2, [r3, #24]
}
 8002ada:	bf00      	nop
 8002adc:	3714      	adds	r7, #20
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
	...

08002ae8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	4603      	mov	r3, r0
 8002af0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002af2:	4b08      	ldr	r3, [pc, #32]	; (8002b14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002af4:	695a      	ldr	r2, [r3, #20]
 8002af6:	88fb      	ldrh	r3, [r7, #6]
 8002af8:	4013      	ands	r3, r2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d006      	beq.n	8002b0c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002afe:	4a05      	ldr	r2, [pc, #20]	; (8002b14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b00:	88fb      	ldrh	r3, [r7, #6]
 8002b02:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b04:	88fb      	ldrh	r3, [r7, #6]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f000 f806 	bl	8002b18 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b0c:	bf00      	nop
 8002b0e:	3708      	adds	r7, #8
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	40013c00 	.word	0x40013c00

08002b18 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	4603      	mov	r3, r0
 8002b20:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002b22:	bf00      	nop
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
	...

08002b30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e267      	b.n	8003012 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d075      	beq.n	8002c3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b4e:	4b88      	ldr	r3, [pc, #544]	; (8002d70 <HAL_RCC_OscConfig+0x240>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 030c 	and.w	r3, r3, #12
 8002b56:	2b04      	cmp	r3, #4
 8002b58:	d00c      	beq.n	8002b74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b5a:	4b85      	ldr	r3, [pc, #532]	; (8002d70 <HAL_RCC_OscConfig+0x240>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b62:	2b08      	cmp	r3, #8
 8002b64:	d112      	bne.n	8002b8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b66:	4b82      	ldr	r3, [pc, #520]	; (8002d70 <HAL_RCC_OscConfig+0x240>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b72:	d10b      	bne.n	8002b8c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b74:	4b7e      	ldr	r3, [pc, #504]	; (8002d70 <HAL_RCC_OscConfig+0x240>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d05b      	beq.n	8002c38 <HAL_RCC_OscConfig+0x108>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d157      	bne.n	8002c38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e242      	b.n	8003012 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b94:	d106      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x74>
 8002b96:	4b76      	ldr	r3, [pc, #472]	; (8002d70 <HAL_RCC_OscConfig+0x240>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a75      	ldr	r2, [pc, #468]	; (8002d70 <HAL_RCC_OscConfig+0x240>)
 8002b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba0:	6013      	str	r3, [r2, #0]
 8002ba2:	e01d      	b.n	8002be0 <HAL_RCC_OscConfig+0xb0>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bac:	d10c      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x98>
 8002bae:	4b70      	ldr	r3, [pc, #448]	; (8002d70 <HAL_RCC_OscConfig+0x240>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a6f      	ldr	r2, [pc, #444]	; (8002d70 <HAL_RCC_OscConfig+0x240>)
 8002bb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bb8:	6013      	str	r3, [r2, #0]
 8002bba:	4b6d      	ldr	r3, [pc, #436]	; (8002d70 <HAL_RCC_OscConfig+0x240>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a6c      	ldr	r2, [pc, #432]	; (8002d70 <HAL_RCC_OscConfig+0x240>)
 8002bc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc4:	6013      	str	r3, [r2, #0]
 8002bc6:	e00b      	b.n	8002be0 <HAL_RCC_OscConfig+0xb0>
 8002bc8:	4b69      	ldr	r3, [pc, #420]	; (8002d70 <HAL_RCC_OscConfig+0x240>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a68      	ldr	r2, [pc, #416]	; (8002d70 <HAL_RCC_OscConfig+0x240>)
 8002bce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bd2:	6013      	str	r3, [r2, #0]
 8002bd4:	4b66      	ldr	r3, [pc, #408]	; (8002d70 <HAL_RCC_OscConfig+0x240>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a65      	ldr	r2, [pc, #404]	; (8002d70 <HAL_RCC_OscConfig+0x240>)
 8002bda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d013      	beq.n	8002c10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be8:	f7fe fae0 	bl	80011ac <HAL_GetTick>
 8002bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bf0:	f7fe fadc 	bl	80011ac <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b64      	cmp	r3, #100	; 0x64
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e207      	b.n	8003012 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c02:	4b5b      	ldr	r3, [pc, #364]	; (8002d70 <HAL_RCC_OscConfig+0x240>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d0f0      	beq.n	8002bf0 <HAL_RCC_OscConfig+0xc0>
 8002c0e:	e014      	b.n	8002c3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c10:	f7fe facc 	bl	80011ac <HAL_GetTick>
 8002c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c16:	e008      	b.n	8002c2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c18:	f7fe fac8 	bl	80011ac <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b64      	cmp	r3, #100	; 0x64
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e1f3      	b.n	8003012 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c2a:	4b51      	ldr	r3, [pc, #324]	; (8002d70 <HAL_RCC_OscConfig+0x240>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1f0      	bne.n	8002c18 <HAL_RCC_OscConfig+0xe8>
 8002c36:	e000      	b.n	8002c3a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d063      	beq.n	8002d0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c46:	4b4a      	ldr	r3, [pc, #296]	; (8002d70 <HAL_RCC_OscConfig+0x240>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f003 030c 	and.w	r3, r3, #12
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00b      	beq.n	8002c6a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c52:	4b47      	ldr	r3, [pc, #284]	; (8002d70 <HAL_RCC_OscConfig+0x240>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c5a:	2b08      	cmp	r3, #8
 8002c5c:	d11c      	bne.n	8002c98 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c5e:	4b44      	ldr	r3, [pc, #272]	; (8002d70 <HAL_RCC_OscConfig+0x240>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d116      	bne.n	8002c98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c6a:	4b41      	ldr	r3, [pc, #260]	; (8002d70 <HAL_RCC_OscConfig+0x240>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d005      	beq.n	8002c82 <HAL_RCC_OscConfig+0x152>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d001      	beq.n	8002c82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e1c7      	b.n	8003012 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c82:	4b3b      	ldr	r3, [pc, #236]	; (8002d70 <HAL_RCC_OscConfig+0x240>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	4937      	ldr	r1, [pc, #220]	; (8002d70 <HAL_RCC_OscConfig+0x240>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c96:	e03a      	b.n	8002d0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d020      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ca0:	4b34      	ldr	r3, [pc, #208]	; (8002d74 <HAL_RCC_OscConfig+0x244>)
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca6:	f7fe fa81 	bl	80011ac <HAL_GetTick>
 8002caa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cac:	e008      	b.n	8002cc0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cae:	f7fe fa7d 	bl	80011ac <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e1a8      	b.n	8003012 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cc0:	4b2b      	ldr	r3, [pc, #172]	; (8002d70 <HAL_RCC_OscConfig+0x240>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0f0      	beq.n	8002cae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ccc:	4b28      	ldr	r3, [pc, #160]	; (8002d70 <HAL_RCC_OscConfig+0x240>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	691b      	ldr	r3, [r3, #16]
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	4925      	ldr	r1, [pc, #148]	; (8002d70 <HAL_RCC_OscConfig+0x240>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	600b      	str	r3, [r1, #0]
 8002ce0:	e015      	b.n	8002d0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ce2:	4b24      	ldr	r3, [pc, #144]	; (8002d74 <HAL_RCC_OscConfig+0x244>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce8:	f7fe fa60 	bl	80011ac <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cf0:	f7fe fa5c 	bl	80011ac <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e187      	b.n	8003012 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d02:	4b1b      	ldr	r3, [pc, #108]	; (8002d70 <HAL_RCC_OscConfig+0x240>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1f0      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0308 	and.w	r3, r3, #8
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d036      	beq.n	8002d88 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d016      	beq.n	8002d50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d22:	4b15      	ldr	r3, [pc, #84]	; (8002d78 <HAL_RCC_OscConfig+0x248>)
 8002d24:	2201      	movs	r2, #1
 8002d26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d28:	f7fe fa40 	bl	80011ac <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d30:	f7fe fa3c 	bl	80011ac <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e167      	b.n	8003012 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d42:	4b0b      	ldr	r3, [pc, #44]	; (8002d70 <HAL_RCC_OscConfig+0x240>)
 8002d44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d0f0      	beq.n	8002d30 <HAL_RCC_OscConfig+0x200>
 8002d4e:	e01b      	b.n	8002d88 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d50:	4b09      	ldr	r3, [pc, #36]	; (8002d78 <HAL_RCC_OscConfig+0x248>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d56:	f7fe fa29 	bl	80011ac <HAL_GetTick>
 8002d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d5c:	e00e      	b.n	8002d7c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d5e:	f7fe fa25 	bl	80011ac <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d907      	bls.n	8002d7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e150      	b.n	8003012 <HAL_RCC_OscConfig+0x4e2>
 8002d70:	40023800 	.word	0x40023800
 8002d74:	42470000 	.word	0x42470000
 8002d78:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d7c:	4b88      	ldr	r3, [pc, #544]	; (8002fa0 <HAL_RCC_OscConfig+0x470>)
 8002d7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1ea      	bne.n	8002d5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f000 8097 	beq.w	8002ec4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d96:	2300      	movs	r3, #0
 8002d98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d9a:	4b81      	ldr	r3, [pc, #516]	; (8002fa0 <HAL_RCC_OscConfig+0x470>)
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10f      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002da6:	2300      	movs	r3, #0
 8002da8:	60bb      	str	r3, [r7, #8]
 8002daa:	4b7d      	ldr	r3, [pc, #500]	; (8002fa0 <HAL_RCC_OscConfig+0x470>)
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	4a7c      	ldr	r2, [pc, #496]	; (8002fa0 <HAL_RCC_OscConfig+0x470>)
 8002db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002db4:	6413      	str	r3, [r2, #64]	; 0x40
 8002db6:	4b7a      	ldr	r3, [pc, #488]	; (8002fa0 <HAL_RCC_OscConfig+0x470>)
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dbe:	60bb      	str	r3, [r7, #8]
 8002dc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc6:	4b77      	ldr	r3, [pc, #476]	; (8002fa4 <HAL_RCC_OscConfig+0x474>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d118      	bne.n	8002e04 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dd2:	4b74      	ldr	r3, [pc, #464]	; (8002fa4 <HAL_RCC_OscConfig+0x474>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a73      	ldr	r2, [pc, #460]	; (8002fa4 <HAL_RCC_OscConfig+0x474>)
 8002dd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ddc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dde:	f7fe f9e5 	bl	80011ac <HAL_GetTick>
 8002de2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de4:	e008      	b.n	8002df8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002de6:	f7fe f9e1 	bl	80011ac <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d901      	bls.n	8002df8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e10c      	b.n	8003012 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df8:	4b6a      	ldr	r3, [pc, #424]	; (8002fa4 <HAL_RCC_OscConfig+0x474>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d0f0      	beq.n	8002de6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d106      	bne.n	8002e1a <HAL_RCC_OscConfig+0x2ea>
 8002e0c:	4b64      	ldr	r3, [pc, #400]	; (8002fa0 <HAL_RCC_OscConfig+0x470>)
 8002e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e10:	4a63      	ldr	r2, [pc, #396]	; (8002fa0 <HAL_RCC_OscConfig+0x470>)
 8002e12:	f043 0301 	orr.w	r3, r3, #1
 8002e16:	6713      	str	r3, [r2, #112]	; 0x70
 8002e18:	e01c      	b.n	8002e54 <HAL_RCC_OscConfig+0x324>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	2b05      	cmp	r3, #5
 8002e20:	d10c      	bne.n	8002e3c <HAL_RCC_OscConfig+0x30c>
 8002e22:	4b5f      	ldr	r3, [pc, #380]	; (8002fa0 <HAL_RCC_OscConfig+0x470>)
 8002e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e26:	4a5e      	ldr	r2, [pc, #376]	; (8002fa0 <HAL_RCC_OscConfig+0x470>)
 8002e28:	f043 0304 	orr.w	r3, r3, #4
 8002e2c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e2e:	4b5c      	ldr	r3, [pc, #368]	; (8002fa0 <HAL_RCC_OscConfig+0x470>)
 8002e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e32:	4a5b      	ldr	r2, [pc, #364]	; (8002fa0 <HAL_RCC_OscConfig+0x470>)
 8002e34:	f043 0301 	orr.w	r3, r3, #1
 8002e38:	6713      	str	r3, [r2, #112]	; 0x70
 8002e3a:	e00b      	b.n	8002e54 <HAL_RCC_OscConfig+0x324>
 8002e3c:	4b58      	ldr	r3, [pc, #352]	; (8002fa0 <HAL_RCC_OscConfig+0x470>)
 8002e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e40:	4a57      	ldr	r2, [pc, #348]	; (8002fa0 <HAL_RCC_OscConfig+0x470>)
 8002e42:	f023 0301 	bic.w	r3, r3, #1
 8002e46:	6713      	str	r3, [r2, #112]	; 0x70
 8002e48:	4b55      	ldr	r3, [pc, #340]	; (8002fa0 <HAL_RCC_OscConfig+0x470>)
 8002e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4c:	4a54      	ldr	r2, [pc, #336]	; (8002fa0 <HAL_RCC_OscConfig+0x470>)
 8002e4e:	f023 0304 	bic.w	r3, r3, #4
 8002e52:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d015      	beq.n	8002e88 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e5c:	f7fe f9a6 	bl	80011ac <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e62:	e00a      	b.n	8002e7a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e64:	f7fe f9a2 	bl	80011ac <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e0cb      	b.n	8003012 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e7a:	4b49      	ldr	r3, [pc, #292]	; (8002fa0 <HAL_RCC_OscConfig+0x470>)
 8002e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d0ee      	beq.n	8002e64 <HAL_RCC_OscConfig+0x334>
 8002e86:	e014      	b.n	8002eb2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e88:	f7fe f990 	bl	80011ac <HAL_GetTick>
 8002e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e8e:	e00a      	b.n	8002ea6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e90:	f7fe f98c 	bl	80011ac <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e0b5      	b.n	8003012 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ea6:	4b3e      	ldr	r3, [pc, #248]	; (8002fa0 <HAL_RCC_OscConfig+0x470>)
 8002ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1ee      	bne.n	8002e90 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002eb2:	7dfb      	ldrb	r3, [r7, #23]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d105      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eb8:	4b39      	ldr	r3, [pc, #228]	; (8002fa0 <HAL_RCC_OscConfig+0x470>)
 8002eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebc:	4a38      	ldr	r2, [pc, #224]	; (8002fa0 <HAL_RCC_OscConfig+0x470>)
 8002ebe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ec2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	f000 80a1 	beq.w	8003010 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ece:	4b34      	ldr	r3, [pc, #208]	; (8002fa0 <HAL_RCC_OscConfig+0x470>)
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f003 030c 	and.w	r3, r3, #12
 8002ed6:	2b08      	cmp	r3, #8
 8002ed8:	d05c      	beq.n	8002f94 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d141      	bne.n	8002f66 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ee2:	4b31      	ldr	r3, [pc, #196]	; (8002fa8 <HAL_RCC_OscConfig+0x478>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee8:	f7fe f960 	bl	80011ac <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ef0:	f7fe f95c 	bl	80011ac <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e087      	b.n	8003012 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f02:	4b27      	ldr	r3, [pc, #156]	; (8002fa0 <HAL_RCC_OscConfig+0x470>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1f0      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	69da      	ldr	r2, [r3, #28]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	431a      	orrs	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1c:	019b      	lsls	r3, r3, #6
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f24:	085b      	lsrs	r3, r3, #1
 8002f26:	3b01      	subs	r3, #1
 8002f28:	041b      	lsls	r3, r3, #16
 8002f2a:	431a      	orrs	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f30:	061b      	lsls	r3, r3, #24
 8002f32:	491b      	ldr	r1, [pc, #108]	; (8002fa0 <HAL_RCC_OscConfig+0x470>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f38:	4b1b      	ldr	r3, [pc, #108]	; (8002fa8 <HAL_RCC_OscConfig+0x478>)
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f3e:	f7fe f935 	bl	80011ac <HAL_GetTick>
 8002f42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f44:	e008      	b.n	8002f58 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f46:	f7fe f931 	bl	80011ac <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d901      	bls.n	8002f58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e05c      	b.n	8003012 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f58:	4b11      	ldr	r3, [pc, #68]	; (8002fa0 <HAL_RCC_OscConfig+0x470>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d0f0      	beq.n	8002f46 <HAL_RCC_OscConfig+0x416>
 8002f64:	e054      	b.n	8003010 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f66:	4b10      	ldr	r3, [pc, #64]	; (8002fa8 <HAL_RCC_OscConfig+0x478>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f6c:	f7fe f91e 	bl	80011ac <HAL_GetTick>
 8002f70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f72:	e008      	b.n	8002f86 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f74:	f7fe f91a 	bl	80011ac <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e045      	b.n	8003012 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f86:	4b06      	ldr	r3, [pc, #24]	; (8002fa0 <HAL_RCC_OscConfig+0x470>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1f0      	bne.n	8002f74 <HAL_RCC_OscConfig+0x444>
 8002f92:	e03d      	b.n	8003010 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d107      	bne.n	8002fac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e038      	b.n	8003012 <HAL_RCC_OscConfig+0x4e2>
 8002fa0:	40023800 	.word	0x40023800
 8002fa4:	40007000 	.word	0x40007000
 8002fa8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fac:	4b1b      	ldr	r3, [pc, #108]	; (800301c <HAL_RCC_OscConfig+0x4ec>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d028      	beq.n	800300c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d121      	bne.n	800300c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d11a      	bne.n	800300c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002fdc:	4013      	ands	r3, r2
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002fe2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d111      	bne.n	800300c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff2:	085b      	lsrs	r3, r3, #1
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d107      	bne.n	800300c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003006:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003008:	429a      	cmp	r2, r3
 800300a:	d001      	beq.n	8003010 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e000      	b.n	8003012 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3718      	adds	r7, #24
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	40023800 	.word	0x40023800

08003020 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d101      	bne.n	8003034 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e0cc      	b.n	80031ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003034:	4b68      	ldr	r3, [pc, #416]	; (80031d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0307 	and.w	r3, r3, #7
 800303c:	683a      	ldr	r2, [r7, #0]
 800303e:	429a      	cmp	r2, r3
 8003040:	d90c      	bls.n	800305c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003042:	4b65      	ldr	r3, [pc, #404]	; (80031d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003044:	683a      	ldr	r2, [r7, #0]
 8003046:	b2d2      	uxtb	r2, r2
 8003048:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800304a:	4b63      	ldr	r3, [pc, #396]	; (80031d8 <HAL_RCC_ClockConfig+0x1b8>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0307 	and.w	r3, r3, #7
 8003052:	683a      	ldr	r2, [r7, #0]
 8003054:	429a      	cmp	r2, r3
 8003056:	d001      	beq.n	800305c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e0b8      	b.n	80031ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d020      	beq.n	80030aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0304 	and.w	r3, r3, #4
 8003070:	2b00      	cmp	r3, #0
 8003072:	d005      	beq.n	8003080 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003074:	4b59      	ldr	r3, [pc, #356]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	4a58      	ldr	r2, [pc, #352]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 800307a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800307e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0308 	and.w	r3, r3, #8
 8003088:	2b00      	cmp	r3, #0
 800308a:	d005      	beq.n	8003098 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800308c:	4b53      	ldr	r3, [pc, #332]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	4a52      	ldr	r2, [pc, #328]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 8003092:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003096:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003098:	4b50      	ldr	r3, [pc, #320]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	494d      	ldr	r1, [pc, #308]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d044      	beq.n	8003140 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d107      	bne.n	80030ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030be:	4b47      	ldr	r3, [pc, #284]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d119      	bne.n	80030fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e07f      	b.n	80031ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d003      	beq.n	80030de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030da:	2b03      	cmp	r3, #3
 80030dc:	d107      	bne.n	80030ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030de:	4b3f      	ldr	r3, [pc, #252]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d109      	bne.n	80030fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e06f      	b.n	80031ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ee:	4b3b      	ldr	r3, [pc, #236]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e067      	b.n	80031ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030fe:	4b37      	ldr	r3, [pc, #220]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f023 0203 	bic.w	r2, r3, #3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	4934      	ldr	r1, [pc, #208]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 800310c:	4313      	orrs	r3, r2
 800310e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003110:	f7fe f84c 	bl	80011ac <HAL_GetTick>
 8003114:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003116:	e00a      	b.n	800312e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003118:	f7fe f848 	bl	80011ac <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	f241 3288 	movw	r2, #5000	; 0x1388
 8003126:	4293      	cmp	r3, r2
 8003128:	d901      	bls.n	800312e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e04f      	b.n	80031ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800312e:	4b2b      	ldr	r3, [pc, #172]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f003 020c 	and.w	r2, r3, #12
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	429a      	cmp	r2, r3
 800313e:	d1eb      	bne.n	8003118 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003140:	4b25      	ldr	r3, [pc, #148]	; (80031d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0307 	and.w	r3, r3, #7
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	429a      	cmp	r2, r3
 800314c:	d20c      	bcs.n	8003168 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800314e:	4b22      	ldr	r3, [pc, #136]	; (80031d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003150:	683a      	ldr	r2, [r7, #0]
 8003152:	b2d2      	uxtb	r2, r2
 8003154:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003156:	4b20      	ldr	r3, [pc, #128]	; (80031d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0307 	and.w	r3, r3, #7
 800315e:	683a      	ldr	r2, [r7, #0]
 8003160:	429a      	cmp	r2, r3
 8003162:	d001      	beq.n	8003168 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e032      	b.n	80031ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0304 	and.w	r3, r3, #4
 8003170:	2b00      	cmp	r3, #0
 8003172:	d008      	beq.n	8003186 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003174:	4b19      	ldr	r3, [pc, #100]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	4916      	ldr	r1, [pc, #88]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 8003182:	4313      	orrs	r3, r2
 8003184:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0308 	and.w	r3, r3, #8
 800318e:	2b00      	cmp	r3, #0
 8003190:	d009      	beq.n	80031a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003192:	4b12      	ldr	r3, [pc, #72]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	00db      	lsls	r3, r3, #3
 80031a0:	490e      	ldr	r1, [pc, #56]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031a6:	f000 f821 	bl	80031ec <HAL_RCC_GetSysClockFreq>
 80031aa:	4602      	mov	r2, r0
 80031ac:	4b0b      	ldr	r3, [pc, #44]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	091b      	lsrs	r3, r3, #4
 80031b2:	f003 030f 	and.w	r3, r3, #15
 80031b6:	490a      	ldr	r1, [pc, #40]	; (80031e0 <HAL_RCC_ClockConfig+0x1c0>)
 80031b8:	5ccb      	ldrb	r3, [r1, r3]
 80031ba:	fa22 f303 	lsr.w	r3, r2, r3
 80031be:	4a09      	ldr	r2, [pc, #36]	; (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 80031c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031c2:	4b09      	ldr	r3, [pc, #36]	; (80031e8 <HAL_RCC_ClockConfig+0x1c8>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7fd ffac 	bl	8001124 <HAL_InitTick>

  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	40023c00 	.word	0x40023c00
 80031dc:	40023800 	.word	0x40023800
 80031e0:	08004e44 	.word	0x08004e44
 80031e4:	20000000 	.word	0x20000000
 80031e8:	20000004 	.word	0x20000004

080031ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031f0:	b090      	sub	sp, #64	; 0x40
 80031f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80031f4:	2300      	movs	r3, #0
 80031f6:	637b      	str	r3, [r7, #52]	; 0x34
 80031f8:	2300      	movs	r3, #0
 80031fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031fc:	2300      	movs	r3, #0
 80031fe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003200:	2300      	movs	r3, #0
 8003202:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003204:	4b59      	ldr	r3, [pc, #356]	; (800336c <HAL_RCC_GetSysClockFreq+0x180>)
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f003 030c 	and.w	r3, r3, #12
 800320c:	2b08      	cmp	r3, #8
 800320e:	d00d      	beq.n	800322c <HAL_RCC_GetSysClockFreq+0x40>
 8003210:	2b08      	cmp	r3, #8
 8003212:	f200 80a1 	bhi.w	8003358 <HAL_RCC_GetSysClockFreq+0x16c>
 8003216:	2b00      	cmp	r3, #0
 8003218:	d002      	beq.n	8003220 <HAL_RCC_GetSysClockFreq+0x34>
 800321a:	2b04      	cmp	r3, #4
 800321c:	d003      	beq.n	8003226 <HAL_RCC_GetSysClockFreq+0x3a>
 800321e:	e09b      	b.n	8003358 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003220:	4b53      	ldr	r3, [pc, #332]	; (8003370 <HAL_RCC_GetSysClockFreq+0x184>)
 8003222:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003224:	e09b      	b.n	800335e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003226:	4b53      	ldr	r3, [pc, #332]	; (8003374 <HAL_RCC_GetSysClockFreq+0x188>)
 8003228:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800322a:	e098      	b.n	800335e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800322c:	4b4f      	ldr	r3, [pc, #316]	; (800336c <HAL_RCC_GetSysClockFreq+0x180>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003234:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003236:	4b4d      	ldr	r3, [pc, #308]	; (800336c <HAL_RCC_GetSysClockFreq+0x180>)
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d028      	beq.n	8003294 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003242:	4b4a      	ldr	r3, [pc, #296]	; (800336c <HAL_RCC_GetSysClockFreq+0x180>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	099b      	lsrs	r3, r3, #6
 8003248:	2200      	movs	r2, #0
 800324a:	623b      	str	r3, [r7, #32]
 800324c:	627a      	str	r2, [r7, #36]	; 0x24
 800324e:	6a3b      	ldr	r3, [r7, #32]
 8003250:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003254:	2100      	movs	r1, #0
 8003256:	4b47      	ldr	r3, [pc, #284]	; (8003374 <HAL_RCC_GetSysClockFreq+0x188>)
 8003258:	fb03 f201 	mul.w	r2, r3, r1
 800325c:	2300      	movs	r3, #0
 800325e:	fb00 f303 	mul.w	r3, r0, r3
 8003262:	4413      	add	r3, r2
 8003264:	4a43      	ldr	r2, [pc, #268]	; (8003374 <HAL_RCC_GetSysClockFreq+0x188>)
 8003266:	fba0 1202 	umull	r1, r2, r0, r2
 800326a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800326c:	460a      	mov	r2, r1
 800326e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003270:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003272:	4413      	add	r3, r2
 8003274:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003278:	2200      	movs	r2, #0
 800327a:	61bb      	str	r3, [r7, #24]
 800327c:	61fa      	str	r2, [r7, #28]
 800327e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003282:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003286:	f7fc ff9f 	bl	80001c8 <__aeabi_uldivmod>
 800328a:	4602      	mov	r2, r0
 800328c:	460b      	mov	r3, r1
 800328e:	4613      	mov	r3, r2
 8003290:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003292:	e053      	b.n	800333c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003294:	4b35      	ldr	r3, [pc, #212]	; (800336c <HAL_RCC_GetSysClockFreq+0x180>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	099b      	lsrs	r3, r3, #6
 800329a:	2200      	movs	r2, #0
 800329c:	613b      	str	r3, [r7, #16]
 800329e:	617a      	str	r2, [r7, #20]
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80032a6:	f04f 0b00 	mov.w	fp, #0
 80032aa:	4652      	mov	r2, sl
 80032ac:	465b      	mov	r3, fp
 80032ae:	f04f 0000 	mov.w	r0, #0
 80032b2:	f04f 0100 	mov.w	r1, #0
 80032b6:	0159      	lsls	r1, r3, #5
 80032b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032bc:	0150      	lsls	r0, r2, #5
 80032be:	4602      	mov	r2, r0
 80032c0:	460b      	mov	r3, r1
 80032c2:	ebb2 080a 	subs.w	r8, r2, sl
 80032c6:	eb63 090b 	sbc.w	r9, r3, fp
 80032ca:	f04f 0200 	mov.w	r2, #0
 80032ce:	f04f 0300 	mov.w	r3, #0
 80032d2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80032d6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80032da:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80032de:	ebb2 0408 	subs.w	r4, r2, r8
 80032e2:	eb63 0509 	sbc.w	r5, r3, r9
 80032e6:	f04f 0200 	mov.w	r2, #0
 80032ea:	f04f 0300 	mov.w	r3, #0
 80032ee:	00eb      	lsls	r3, r5, #3
 80032f0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032f4:	00e2      	lsls	r2, r4, #3
 80032f6:	4614      	mov	r4, r2
 80032f8:	461d      	mov	r5, r3
 80032fa:	eb14 030a 	adds.w	r3, r4, sl
 80032fe:	603b      	str	r3, [r7, #0]
 8003300:	eb45 030b 	adc.w	r3, r5, fp
 8003304:	607b      	str	r3, [r7, #4]
 8003306:	f04f 0200 	mov.w	r2, #0
 800330a:	f04f 0300 	mov.w	r3, #0
 800330e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003312:	4629      	mov	r1, r5
 8003314:	028b      	lsls	r3, r1, #10
 8003316:	4621      	mov	r1, r4
 8003318:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800331c:	4621      	mov	r1, r4
 800331e:	028a      	lsls	r2, r1, #10
 8003320:	4610      	mov	r0, r2
 8003322:	4619      	mov	r1, r3
 8003324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003326:	2200      	movs	r2, #0
 8003328:	60bb      	str	r3, [r7, #8]
 800332a:	60fa      	str	r2, [r7, #12]
 800332c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003330:	f7fc ff4a 	bl	80001c8 <__aeabi_uldivmod>
 8003334:	4602      	mov	r2, r0
 8003336:	460b      	mov	r3, r1
 8003338:	4613      	mov	r3, r2
 800333a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800333c:	4b0b      	ldr	r3, [pc, #44]	; (800336c <HAL_RCC_GetSysClockFreq+0x180>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	0c1b      	lsrs	r3, r3, #16
 8003342:	f003 0303 	and.w	r3, r3, #3
 8003346:	3301      	adds	r3, #1
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800334c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800334e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003350:	fbb2 f3f3 	udiv	r3, r2, r3
 8003354:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003356:	e002      	b.n	800335e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003358:	4b05      	ldr	r3, [pc, #20]	; (8003370 <HAL_RCC_GetSysClockFreq+0x184>)
 800335a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800335c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800335e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003360:	4618      	mov	r0, r3
 8003362:	3740      	adds	r7, #64	; 0x40
 8003364:	46bd      	mov	sp, r7
 8003366:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800336a:	bf00      	nop
 800336c:	40023800 	.word	0x40023800
 8003370:	00f42400 	.word	0x00f42400
 8003374:	017d7840 	.word	0x017d7840

08003378 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800337c:	4b03      	ldr	r3, [pc, #12]	; (800338c <HAL_RCC_GetHCLKFreq+0x14>)
 800337e:	681b      	ldr	r3, [r3, #0]
}
 8003380:	4618      	mov	r0, r3
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	20000000 	.word	0x20000000

08003390 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003394:	f7ff fff0 	bl	8003378 <HAL_RCC_GetHCLKFreq>
 8003398:	4602      	mov	r2, r0
 800339a:	4b05      	ldr	r3, [pc, #20]	; (80033b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	0a9b      	lsrs	r3, r3, #10
 80033a0:	f003 0307 	and.w	r3, r3, #7
 80033a4:	4903      	ldr	r1, [pc, #12]	; (80033b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033a6:	5ccb      	ldrb	r3, [r1, r3]
 80033a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	40023800 	.word	0x40023800
 80033b4:	08004e54 	.word	0x08004e54

080033b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80033bc:	f7ff ffdc 	bl	8003378 <HAL_RCC_GetHCLKFreq>
 80033c0:	4602      	mov	r2, r0
 80033c2:	4b05      	ldr	r3, [pc, #20]	; (80033d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	0b5b      	lsrs	r3, r3, #13
 80033c8:	f003 0307 	and.w	r3, r3, #7
 80033cc:	4903      	ldr	r1, [pc, #12]	; (80033dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80033ce:	5ccb      	ldrb	r3, [r1, r3]
 80033d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	40023800 	.word	0x40023800
 80033dc:	08004e54 	.word	0x08004e54

080033e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e041      	b.n	8003476 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d106      	bne.n	800340c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f7fd fcfe 	bl	8000e08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2202      	movs	r2, #2
 8003410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	3304      	adds	r3, #4
 800341c:	4619      	mov	r1, r3
 800341e:	4610      	mov	r0, r2
 8003420:	f000 fa96 	bl	8003950 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
	...

08003480 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800348e:	b2db      	uxtb	r3, r3
 8003490:	2b01      	cmp	r3, #1
 8003492:	d001      	beq.n	8003498 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e04e      	b.n	8003536 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2202      	movs	r2, #2
 800349c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68da      	ldr	r2, [r3, #12]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f042 0201 	orr.w	r2, r2, #1
 80034ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a23      	ldr	r2, [pc, #140]	; (8003544 <HAL_TIM_Base_Start_IT+0xc4>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d022      	beq.n	8003500 <HAL_TIM_Base_Start_IT+0x80>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034c2:	d01d      	beq.n	8003500 <HAL_TIM_Base_Start_IT+0x80>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a1f      	ldr	r2, [pc, #124]	; (8003548 <HAL_TIM_Base_Start_IT+0xc8>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d018      	beq.n	8003500 <HAL_TIM_Base_Start_IT+0x80>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a1e      	ldr	r2, [pc, #120]	; (800354c <HAL_TIM_Base_Start_IT+0xcc>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d013      	beq.n	8003500 <HAL_TIM_Base_Start_IT+0x80>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a1c      	ldr	r2, [pc, #112]	; (8003550 <HAL_TIM_Base_Start_IT+0xd0>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d00e      	beq.n	8003500 <HAL_TIM_Base_Start_IT+0x80>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a1b      	ldr	r2, [pc, #108]	; (8003554 <HAL_TIM_Base_Start_IT+0xd4>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d009      	beq.n	8003500 <HAL_TIM_Base_Start_IT+0x80>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a19      	ldr	r2, [pc, #100]	; (8003558 <HAL_TIM_Base_Start_IT+0xd8>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d004      	beq.n	8003500 <HAL_TIM_Base_Start_IT+0x80>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a18      	ldr	r2, [pc, #96]	; (800355c <HAL_TIM_Base_Start_IT+0xdc>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d111      	bne.n	8003524 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f003 0307 	and.w	r3, r3, #7
 800350a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2b06      	cmp	r3, #6
 8003510:	d010      	beq.n	8003534 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f042 0201 	orr.w	r2, r2, #1
 8003520:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003522:	e007      	b.n	8003534 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f042 0201 	orr.w	r2, r2, #1
 8003532:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3714      	adds	r7, #20
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	40010000 	.word	0x40010000
 8003548:	40000400 	.word	0x40000400
 800354c:	40000800 	.word	0x40000800
 8003550:	40000c00 	.word	0x40000c00
 8003554:	40010400 	.word	0x40010400
 8003558:	40014000 	.word	0x40014000
 800355c:	40001800 	.word	0x40001800

08003560 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b02      	cmp	r3, #2
 8003574:	d122      	bne.n	80035bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	f003 0302 	and.w	r3, r3, #2
 8003580:	2b02      	cmp	r3, #2
 8003582:	d11b      	bne.n	80035bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f06f 0202 	mvn.w	r2, #2
 800358c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2201      	movs	r2, #1
 8003592:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	f003 0303 	and.w	r3, r3, #3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 f9b5 	bl	8003912 <HAL_TIM_IC_CaptureCallback>
 80035a8:	e005      	b.n	80035b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 f9a7 	bl	80038fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f000 f9b8 	bl	8003926 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	f003 0304 	and.w	r3, r3, #4
 80035c6:	2b04      	cmp	r3, #4
 80035c8:	d122      	bne.n	8003610 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	f003 0304 	and.w	r3, r3, #4
 80035d4:	2b04      	cmp	r3, #4
 80035d6:	d11b      	bne.n	8003610 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f06f 0204 	mvn.w	r2, #4
 80035e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2202      	movs	r2, #2
 80035e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d003      	beq.n	80035fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 f98b 	bl	8003912 <HAL_TIM_IC_CaptureCallback>
 80035fc:	e005      	b.n	800360a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 f97d 	bl	80038fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f000 f98e 	bl	8003926 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	f003 0308 	and.w	r3, r3, #8
 800361a:	2b08      	cmp	r3, #8
 800361c:	d122      	bne.n	8003664 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	f003 0308 	and.w	r3, r3, #8
 8003628:	2b08      	cmp	r3, #8
 800362a:	d11b      	bne.n	8003664 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f06f 0208 	mvn.w	r2, #8
 8003634:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2204      	movs	r2, #4
 800363a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	69db      	ldr	r3, [r3, #28]
 8003642:	f003 0303 	and.w	r3, r3, #3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d003      	beq.n	8003652 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 f961 	bl	8003912 <HAL_TIM_IC_CaptureCallback>
 8003650:	e005      	b.n	800365e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 f953 	bl	80038fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f000 f964 	bl	8003926 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	f003 0310 	and.w	r3, r3, #16
 800366e:	2b10      	cmp	r3, #16
 8003670:	d122      	bne.n	80036b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	f003 0310 	and.w	r3, r3, #16
 800367c:	2b10      	cmp	r3, #16
 800367e:	d11b      	bne.n	80036b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f06f 0210 	mvn.w	r2, #16
 8003688:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2208      	movs	r2, #8
 800368e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	69db      	ldr	r3, [r3, #28]
 8003696:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800369a:	2b00      	cmp	r3, #0
 800369c:	d003      	beq.n	80036a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 f937 	bl	8003912 <HAL_TIM_IC_CaptureCallback>
 80036a4:	e005      	b.n	80036b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 f929 	bl	80038fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f000 f93a 	bl	8003926 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d10e      	bne.n	80036e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	f003 0301 	and.w	r3, r3, #1
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d107      	bne.n	80036e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f06f 0201 	mvn.w	r2, #1
 80036dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f7fd fa66 	bl	8000bb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ee:	2b80      	cmp	r3, #128	; 0x80
 80036f0:	d10e      	bne.n	8003710 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036fc:	2b80      	cmp	r3, #128	; 0x80
 80036fe:	d107      	bne.n	8003710 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 fae0 	bl	8003cd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800371a:	2b40      	cmp	r3, #64	; 0x40
 800371c:	d10e      	bne.n	800373c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003728:	2b40      	cmp	r3, #64	; 0x40
 800372a:	d107      	bne.n	800373c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f8ff 	bl	800393a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	f003 0320 	and.w	r3, r3, #32
 8003746:	2b20      	cmp	r3, #32
 8003748:	d10e      	bne.n	8003768 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	f003 0320 	and.w	r3, r3, #32
 8003754:	2b20      	cmp	r3, #32
 8003756:	d107      	bne.n	8003768 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f06f 0220 	mvn.w	r2, #32
 8003760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 faaa 	bl	8003cbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003768:	bf00      	nop
 800376a:	3708      	adds	r7, #8
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800377a:	2300      	movs	r3, #0
 800377c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003784:	2b01      	cmp	r3, #1
 8003786:	d101      	bne.n	800378c <HAL_TIM_ConfigClockSource+0x1c>
 8003788:	2302      	movs	r3, #2
 800378a:	e0b4      	b.n	80038f6 <HAL_TIM_ConfigClockSource+0x186>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2202      	movs	r2, #2
 8003798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80037aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68ba      	ldr	r2, [r7, #8]
 80037ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037c4:	d03e      	beq.n	8003844 <HAL_TIM_ConfigClockSource+0xd4>
 80037c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037ca:	f200 8087 	bhi.w	80038dc <HAL_TIM_ConfigClockSource+0x16c>
 80037ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037d2:	f000 8086 	beq.w	80038e2 <HAL_TIM_ConfigClockSource+0x172>
 80037d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037da:	d87f      	bhi.n	80038dc <HAL_TIM_ConfigClockSource+0x16c>
 80037dc:	2b70      	cmp	r3, #112	; 0x70
 80037de:	d01a      	beq.n	8003816 <HAL_TIM_ConfigClockSource+0xa6>
 80037e0:	2b70      	cmp	r3, #112	; 0x70
 80037e2:	d87b      	bhi.n	80038dc <HAL_TIM_ConfigClockSource+0x16c>
 80037e4:	2b60      	cmp	r3, #96	; 0x60
 80037e6:	d050      	beq.n	800388a <HAL_TIM_ConfigClockSource+0x11a>
 80037e8:	2b60      	cmp	r3, #96	; 0x60
 80037ea:	d877      	bhi.n	80038dc <HAL_TIM_ConfigClockSource+0x16c>
 80037ec:	2b50      	cmp	r3, #80	; 0x50
 80037ee:	d03c      	beq.n	800386a <HAL_TIM_ConfigClockSource+0xfa>
 80037f0:	2b50      	cmp	r3, #80	; 0x50
 80037f2:	d873      	bhi.n	80038dc <HAL_TIM_ConfigClockSource+0x16c>
 80037f4:	2b40      	cmp	r3, #64	; 0x40
 80037f6:	d058      	beq.n	80038aa <HAL_TIM_ConfigClockSource+0x13a>
 80037f8:	2b40      	cmp	r3, #64	; 0x40
 80037fa:	d86f      	bhi.n	80038dc <HAL_TIM_ConfigClockSource+0x16c>
 80037fc:	2b30      	cmp	r3, #48	; 0x30
 80037fe:	d064      	beq.n	80038ca <HAL_TIM_ConfigClockSource+0x15a>
 8003800:	2b30      	cmp	r3, #48	; 0x30
 8003802:	d86b      	bhi.n	80038dc <HAL_TIM_ConfigClockSource+0x16c>
 8003804:	2b20      	cmp	r3, #32
 8003806:	d060      	beq.n	80038ca <HAL_TIM_ConfigClockSource+0x15a>
 8003808:	2b20      	cmp	r3, #32
 800380a:	d867      	bhi.n	80038dc <HAL_TIM_ConfigClockSource+0x16c>
 800380c:	2b00      	cmp	r3, #0
 800380e:	d05c      	beq.n	80038ca <HAL_TIM_ConfigClockSource+0x15a>
 8003810:	2b10      	cmp	r3, #16
 8003812:	d05a      	beq.n	80038ca <HAL_TIM_ConfigClockSource+0x15a>
 8003814:	e062      	b.n	80038dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6818      	ldr	r0, [r3, #0]
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	6899      	ldr	r1, [r3, #8]
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	685a      	ldr	r2, [r3, #4]
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	f000 f9ad 	bl	8003b84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003838:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68ba      	ldr	r2, [r7, #8]
 8003840:	609a      	str	r2, [r3, #8]
      break;
 8003842:	e04f      	b.n	80038e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6818      	ldr	r0, [r3, #0]
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	6899      	ldr	r1, [r3, #8]
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685a      	ldr	r2, [r3, #4]
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	f000 f996 	bl	8003b84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	689a      	ldr	r2, [r3, #8]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003866:	609a      	str	r2, [r3, #8]
      break;
 8003868:	e03c      	b.n	80038e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6818      	ldr	r0, [r3, #0]
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	6859      	ldr	r1, [r3, #4]
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	461a      	mov	r2, r3
 8003878:	f000 f90a 	bl	8003a90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2150      	movs	r1, #80	; 0x50
 8003882:	4618      	mov	r0, r3
 8003884:	f000 f963 	bl	8003b4e <TIM_ITRx_SetConfig>
      break;
 8003888:	e02c      	b.n	80038e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6818      	ldr	r0, [r3, #0]
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	6859      	ldr	r1, [r3, #4]
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	461a      	mov	r2, r3
 8003898:	f000 f929 	bl	8003aee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2160      	movs	r1, #96	; 0x60
 80038a2:	4618      	mov	r0, r3
 80038a4:	f000 f953 	bl	8003b4e <TIM_ITRx_SetConfig>
      break;
 80038a8:	e01c      	b.n	80038e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6818      	ldr	r0, [r3, #0]
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	6859      	ldr	r1, [r3, #4]
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	461a      	mov	r2, r3
 80038b8:	f000 f8ea 	bl	8003a90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2140      	movs	r1, #64	; 0x40
 80038c2:	4618      	mov	r0, r3
 80038c4:	f000 f943 	bl	8003b4e <TIM_ITRx_SetConfig>
      break;
 80038c8:	e00c      	b.n	80038e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4619      	mov	r1, r3
 80038d4:	4610      	mov	r0, r2
 80038d6:	f000 f93a 	bl	8003b4e <TIM_ITRx_SetConfig>
      break;
 80038da:	e003      	b.n	80038e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	73fb      	strb	r3, [r7, #15]
      break;
 80038e0:	e000      	b.n	80038e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80038e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80038f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038fe:	b480      	push	{r7}
 8003900:	b083      	sub	sp, #12
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003906:	bf00      	nop
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr

08003912 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003912:	b480      	push	{r7}
 8003914:	b083      	sub	sp, #12
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800391a:	bf00      	nop
 800391c:	370c      	adds	r7, #12
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr

08003926 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003926:	b480      	push	{r7}
 8003928:	b083      	sub	sp, #12
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800392e:	bf00      	nop
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr

0800393a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800393a:	b480      	push	{r7}
 800393c:	b083      	sub	sp, #12
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003942:	bf00      	nop
 8003944:	370c      	adds	r7, #12
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
	...

08003950 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a40      	ldr	r2, [pc, #256]	; (8003a64 <TIM_Base_SetConfig+0x114>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d013      	beq.n	8003990 <TIM_Base_SetConfig+0x40>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800396e:	d00f      	beq.n	8003990 <TIM_Base_SetConfig+0x40>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a3d      	ldr	r2, [pc, #244]	; (8003a68 <TIM_Base_SetConfig+0x118>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d00b      	beq.n	8003990 <TIM_Base_SetConfig+0x40>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a3c      	ldr	r2, [pc, #240]	; (8003a6c <TIM_Base_SetConfig+0x11c>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d007      	beq.n	8003990 <TIM_Base_SetConfig+0x40>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a3b      	ldr	r2, [pc, #236]	; (8003a70 <TIM_Base_SetConfig+0x120>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d003      	beq.n	8003990 <TIM_Base_SetConfig+0x40>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a3a      	ldr	r2, [pc, #232]	; (8003a74 <TIM_Base_SetConfig+0x124>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d108      	bne.n	80039a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003996:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	4313      	orrs	r3, r2
 80039a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a2f      	ldr	r2, [pc, #188]	; (8003a64 <TIM_Base_SetConfig+0x114>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d02b      	beq.n	8003a02 <TIM_Base_SetConfig+0xb2>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039b0:	d027      	beq.n	8003a02 <TIM_Base_SetConfig+0xb2>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a2c      	ldr	r2, [pc, #176]	; (8003a68 <TIM_Base_SetConfig+0x118>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d023      	beq.n	8003a02 <TIM_Base_SetConfig+0xb2>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a2b      	ldr	r2, [pc, #172]	; (8003a6c <TIM_Base_SetConfig+0x11c>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d01f      	beq.n	8003a02 <TIM_Base_SetConfig+0xb2>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a2a      	ldr	r2, [pc, #168]	; (8003a70 <TIM_Base_SetConfig+0x120>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d01b      	beq.n	8003a02 <TIM_Base_SetConfig+0xb2>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a29      	ldr	r2, [pc, #164]	; (8003a74 <TIM_Base_SetConfig+0x124>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d017      	beq.n	8003a02 <TIM_Base_SetConfig+0xb2>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a28      	ldr	r2, [pc, #160]	; (8003a78 <TIM_Base_SetConfig+0x128>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d013      	beq.n	8003a02 <TIM_Base_SetConfig+0xb2>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a27      	ldr	r2, [pc, #156]	; (8003a7c <TIM_Base_SetConfig+0x12c>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d00f      	beq.n	8003a02 <TIM_Base_SetConfig+0xb2>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a26      	ldr	r2, [pc, #152]	; (8003a80 <TIM_Base_SetConfig+0x130>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d00b      	beq.n	8003a02 <TIM_Base_SetConfig+0xb2>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a25      	ldr	r2, [pc, #148]	; (8003a84 <TIM_Base_SetConfig+0x134>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d007      	beq.n	8003a02 <TIM_Base_SetConfig+0xb2>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a24      	ldr	r2, [pc, #144]	; (8003a88 <TIM_Base_SetConfig+0x138>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d003      	beq.n	8003a02 <TIM_Base_SetConfig+0xb2>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a23      	ldr	r2, [pc, #140]	; (8003a8c <TIM_Base_SetConfig+0x13c>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d108      	bne.n	8003a14 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	68fa      	ldr	r2, [r7, #12]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	689a      	ldr	r2, [r3, #8]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a0a      	ldr	r2, [pc, #40]	; (8003a64 <TIM_Base_SetConfig+0x114>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d003      	beq.n	8003a48 <TIM_Base_SetConfig+0xf8>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a0c      	ldr	r2, [pc, #48]	; (8003a74 <TIM_Base_SetConfig+0x124>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d103      	bne.n	8003a50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	691a      	ldr	r2, [r3, #16]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	615a      	str	r2, [r3, #20]
}
 8003a56:	bf00      	nop
 8003a58:	3714      	adds	r7, #20
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	40010000 	.word	0x40010000
 8003a68:	40000400 	.word	0x40000400
 8003a6c:	40000800 	.word	0x40000800
 8003a70:	40000c00 	.word	0x40000c00
 8003a74:	40010400 	.word	0x40010400
 8003a78:	40014000 	.word	0x40014000
 8003a7c:	40014400 	.word	0x40014400
 8003a80:	40014800 	.word	0x40014800
 8003a84:	40001800 	.word	0x40001800
 8003a88:	40001c00 	.word	0x40001c00
 8003a8c:	40002000 	.word	0x40002000

08003a90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b087      	sub	sp, #28
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6a1b      	ldr	r3, [r3, #32]
 8003aa0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	f023 0201 	bic.w	r2, r3, #1
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003aba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	011b      	lsls	r3, r3, #4
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	f023 030a 	bic.w	r3, r3, #10
 8003acc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ace:	697a      	ldr	r2, [r7, #20]
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	693a      	ldr	r2, [r7, #16]
 8003ada:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	621a      	str	r2, [r3, #32]
}
 8003ae2:	bf00      	nop
 8003ae4:	371c      	adds	r7, #28
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr

08003aee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003aee:	b480      	push	{r7}
 8003af0:	b087      	sub	sp, #28
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	60f8      	str	r0, [r7, #12]
 8003af6:	60b9      	str	r1, [r7, #8]
 8003af8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	f023 0210 	bic.w	r2, r3, #16
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	031b      	lsls	r3, r3, #12
 8003b1e:	697a      	ldr	r2, [r7, #20]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b2a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	011b      	lsls	r3, r3, #4
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	697a      	ldr	r2, [r7, #20]
 8003b3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	621a      	str	r2, [r3, #32]
}
 8003b42:	bf00      	nop
 8003b44:	371c      	adds	r7, #28
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr

08003b4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b085      	sub	sp, #20
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
 8003b56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b66:	683a      	ldr	r2, [r7, #0]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	f043 0307 	orr.w	r3, r3, #7
 8003b70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	609a      	str	r2, [r3, #8]
}
 8003b78:	bf00      	nop
 8003b7a:	3714      	adds	r7, #20
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b087      	sub	sp, #28
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	607a      	str	r2, [r7, #4]
 8003b90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	021a      	lsls	r2, r3, #8
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	431a      	orrs	r2, r3
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	697a      	ldr	r2, [r7, #20]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	609a      	str	r2, [r3, #8]
}
 8003bb8:	bf00      	nop
 8003bba:	371c      	adds	r7, #28
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b085      	sub	sp, #20
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d101      	bne.n	8003bdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bd8:	2302      	movs	r3, #2
 8003bda:	e05a      	b.n	8003c92 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2202      	movs	r2, #2
 8003be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68fa      	ldr	r2, [r7, #12]
 8003c14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a21      	ldr	r2, [pc, #132]	; (8003ca0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d022      	beq.n	8003c66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c28:	d01d      	beq.n	8003c66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a1d      	ldr	r2, [pc, #116]	; (8003ca4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d018      	beq.n	8003c66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a1b      	ldr	r2, [pc, #108]	; (8003ca8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d013      	beq.n	8003c66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a1a      	ldr	r2, [pc, #104]	; (8003cac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d00e      	beq.n	8003c66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a18      	ldr	r2, [pc, #96]	; (8003cb0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d009      	beq.n	8003c66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a17      	ldr	r2, [pc, #92]	; (8003cb4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d004      	beq.n	8003c66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a15      	ldr	r2, [pc, #84]	; (8003cb8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d10c      	bne.n	8003c80 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	68ba      	ldr	r2, [r7, #8]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68ba      	ldr	r2, [r7, #8]
 8003c7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3714      	adds	r7, #20
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	40010000 	.word	0x40010000
 8003ca4:	40000400 	.word	0x40000400
 8003ca8:	40000800 	.word	0x40000800
 8003cac:	40000c00 	.word	0x40000c00
 8003cb0:	40010400 	.word	0x40010400
 8003cb4:	40014000 	.word	0x40014000
 8003cb8:	40001800 	.word	0x40001800

08003cbc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cc4:	bf00      	nop
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cd8:	bf00      	nop
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d101      	bne.n	8003cf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e03f      	b.n	8003d76 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d106      	bne.n	8003d10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f7fd f8a2 	bl	8000e54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2224      	movs	r2, #36	; 0x24
 8003d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68da      	ldr	r2, [r3, #12]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 fddf 	bl	80048ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	691a      	ldr	r2, [r3, #16]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	695a      	ldr	r2, [r3, #20]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68da      	ldr	r2, [r3, #12]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2220      	movs	r2, #32
 8003d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2220      	movs	r2, #32
 8003d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3708      	adds	r7, #8
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b08a      	sub	sp, #40	; 0x28
 8003d82:	af02      	add	r7, sp, #8
 8003d84:	60f8      	str	r0, [r7, #12]
 8003d86:	60b9      	str	r1, [r7, #8]
 8003d88:	603b      	str	r3, [r7, #0]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b20      	cmp	r3, #32
 8003d9c:	d17c      	bne.n	8003e98 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d002      	beq.n	8003daa <HAL_UART_Transmit+0x2c>
 8003da4:	88fb      	ldrh	r3, [r7, #6]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d101      	bne.n	8003dae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e075      	b.n	8003e9a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d101      	bne.n	8003dbc <HAL_UART_Transmit+0x3e>
 8003db8:	2302      	movs	r3, #2
 8003dba:	e06e      	b.n	8003e9a <HAL_UART_Transmit+0x11c>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2221      	movs	r2, #33	; 0x21
 8003dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003dd2:	f7fd f9eb 	bl	80011ac <HAL_GetTick>
 8003dd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	88fa      	ldrh	r2, [r7, #6]
 8003ddc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	88fa      	ldrh	r2, [r7, #6]
 8003de2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dec:	d108      	bne.n	8003e00 <HAL_UART_Transmit+0x82>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d104      	bne.n	8003e00 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003df6:	2300      	movs	r3, #0
 8003df8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	61bb      	str	r3, [r7, #24]
 8003dfe:	e003      	b.n	8003e08 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e04:	2300      	movs	r3, #0
 8003e06:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003e10:	e02a      	b.n	8003e68 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	9300      	str	r3, [sp, #0]
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	2180      	movs	r1, #128	; 0x80
 8003e1c:	68f8      	ldr	r0, [r7, #12]
 8003e1e:	f000 fb1f 	bl	8004460 <UART_WaitOnFlagUntilTimeout>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d001      	beq.n	8003e2c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e036      	b.n	8003e9a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d10b      	bne.n	8003e4a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	881b      	ldrh	r3, [r3, #0]
 8003e36:	461a      	mov	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e40:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	3302      	adds	r3, #2
 8003e46:	61bb      	str	r3, [r7, #24]
 8003e48:	e007      	b.n	8003e5a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	781a      	ldrb	r2, [r3, #0]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	3301      	adds	r3, #1
 8003e58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	3b01      	subs	r3, #1
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1cf      	bne.n	8003e12 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	2140      	movs	r1, #64	; 0x40
 8003e7c:	68f8      	ldr	r0, [r7, #12]
 8003e7e:	f000 faef 	bl	8004460 <UART_WaitOnFlagUntilTimeout>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d001      	beq.n	8003e8c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e006      	b.n	8003e9a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2220      	movs	r2, #32
 8003e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003e94:	2300      	movs	r3, #0
 8003e96:	e000      	b.n	8003e9a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003e98:	2302      	movs	r3, #2
  }
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3720      	adds	r7, #32
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b084      	sub	sp, #16
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	60f8      	str	r0, [r7, #12]
 8003eaa:	60b9      	str	r1, [r7, #8]
 8003eac:	4613      	mov	r3, r2
 8003eae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b20      	cmp	r3, #32
 8003eba:	d11d      	bne.n	8003ef8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d002      	beq.n	8003ec8 <HAL_UART_Receive_IT+0x26>
 8003ec2:	88fb      	ldrh	r3, [r7, #6]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d101      	bne.n	8003ecc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e016      	b.n	8003efa <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d101      	bne.n	8003eda <HAL_UART_Receive_IT+0x38>
 8003ed6:	2302      	movs	r3, #2
 8003ed8:	e00f      	b.n	8003efa <HAL_UART_Receive_IT+0x58>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003ee8:	88fb      	ldrh	r3, [r7, #6]
 8003eea:	461a      	mov	r2, r3
 8003eec:	68b9      	ldr	r1, [r7, #8]
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	f000 fb24 	bl	800453c <UART_Start_Receive_IT>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	e000      	b.n	8003efa <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003ef8:	2302      	movs	r3, #2
  }
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3710      	adds	r7, #16
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
	...

08003f04 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b0ba      	sub	sp, #232	; 0xe8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003f30:	2300      	movs	r3, #0
 8003f32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f3a:	f003 030f 	and.w	r3, r3, #15
 8003f3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003f42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d10f      	bne.n	8003f6a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f4e:	f003 0320 	and.w	r3, r3, #32
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d009      	beq.n	8003f6a <HAL_UART_IRQHandler+0x66>
 8003f56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f5a:	f003 0320 	and.w	r3, r3, #32
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d003      	beq.n	8003f6a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 fc07 	bl	8004776 <UART_Receive_IT>
      return;
 8003f68:	e256      	b.n	8004418 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003f6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f000 80de 	beq.w	8004130 <HAL_UART_IRQHandler+0x22c>
 8003f74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f78:	f003 0301 	and.w	r3, r3, #1
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d106      	bne.n	8003f8e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003f80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f84:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	f000 80d1 	beq.w	8004130 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00b      	beq.n	8003fb2 <HAL_UART_IRQHandler+0xae>
 8003f9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d005      	beq.n	8003fb2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	f043 0201 	orr.w	r2, r3, #1
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003fb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fb6:	f003 0304 	and.w	r3, r3, #4
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00b      	beq.n	8003fd6 <HAL_UART_IRQHandler+0xd2>
 8003fbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d005      	beq.n	8003fd6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fce:	f043 0202 	orr.w	r2, r3, #2
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fda:	f003 0302 	and.w	r3, r3, #2
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00b      	beq.n	8003ffa <HAL_UART_IRQHandler+0xf6>
 8003fe2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d005      	beq.n	8003ffa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff2:	f043 0204 	orr.w	r2, r3, #4
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ffe:	f003 0308 	and.w	r3, r3, #8
 8004002:	2b00      	cmp	r3, #0
 8004004:	d011      	beq.n	800402a <HAL_UART_IRQHandler+0x126>
 8004006:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800400a:	f003 0320 	and.w	r3, r3, #32
 800400e:	2b00      	cmp	r3, #0
 8004010:	d105      	bne.n	800401e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004012:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b00      	cmp	r3, #0
 800401c:	d005      	beq.n	800402a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004022:	f043 0208 	orr.w	r2, r3, #8
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402e:	2b00      	cmp	r3, #0
 8004030:	f000 81ed 	beq.w	800440e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004038:	f003 0320 	and.w	r3, r3, #32
 800403c:	2b00      	cmp	r3, #0
 800403e:	d008      	beq.n	8004052 <HAL_UART_IRQHandler+0x14e>
 8004040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004044:	f003 0320 	and.w	r3, r3, #32
 8004048:	2b00      	cmp	r3, #0
 800404a:	d002      	beq.n	8004052 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f000 fb92 	bl	8004776 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	695b      	ldr	r3, [r3, #20]
 8004058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800405c:	2b40      	cmp	r3, #64	; 0x40
 800405e:	bf0c      	ite	eq
 8004060:	2301      	moveq	r3, #1
 8004062:	2300      	movne	r3, #0
 8004064:	b2db      	uxtb	r3, r3
 8004066:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406e:	f003 0308 	and.w	r3, r3, #8
 8004072:	2b00      	cmp	r3, #0
 8004074:	d103      	bne.n	800407e <HAL_UART_IRQHandler+0x17a>
 8004076:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800407a:	2b00      	cmp	r3, #0
 800407c:	d04f      	beq.n	800411e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 fa9a 	bl	80045b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800408e:	2b40      	cmp	r3, #64	; 0x40
 8004090:	d141      	bne.n	8004116 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	3314      	adds	r3, #20
 8004098:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80040a0:	e853 3f00 	ldrex	r3, [r3]
 80040a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80040a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80040ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	3314      	adds	r3, #20
 80040ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80040be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80040c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80040ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80040ce:	e841 2300 	strex	r3, r2, [r1]
 80040d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80040d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1d9      	bne.n	8004092 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d013      	beq.n	800410e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ea:	4a7d      	ldr	r2, [pc, #500]	; (80042e0 <HAL_UART_IRQHandler+0x3dc>)
 80040ec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7fe fb05 	bl	8002702 <HAL_DMA_Abort_IT>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d016      	beq.n	800412c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004108:	4610      	mov	r0, r2
 800410a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800410c:	e00e      	b.n	800412c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 f990 	bl	8004434 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004114:	e00a      	b.n	800412c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 f98c 	bl	8004434 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800411c:	e006      	b.n	800412c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 f988 	bl	8004434 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800412a:	e170      	b.n	800440e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800412c:	bf00      	nop
    return;
 800412e:	e16e      	b.n	800440e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004134:	2b01      	cmp	r3, #1
 8004136:	f040 814a 	bne.w	80043ce <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800413a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800413e:	f003 0310 	and.w	r3, r3, #16
 8004142:	2b00      	cmp	r3, #0
 8004144:	f000 8143 	beq.w	80043ce <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800414c:	f003 0310 	and.w	r3, r3, #16
 8004150:	2b00      	cmp	r3, #0
 8004152:	f000 813c 	beq.w	80043ce <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004156:	2300      	movs	r3, #0
 8004158:	60bb      	str	r3, [r7, #8]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	60bb      	str	r3, [r7, #8]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	60bb      	str	r3, [r7, #8]
 800416a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004176:	2b40      	cmp	r3, #64	; 0x40
 8004178:	f040 80b4 	bne.w	80042e4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004188:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800418c:	2b00      	cmp	r3, #0
 800418e:	f000 8140 	beq.w	8004412 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004196:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800419a:	429a      	cmp	r2, r3
 800419c:	f080 8139 	bcs.w	8004412 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80041a6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ac:	69db      	ldr	r3, [r3, #28]
 80041ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041b2:	f000 8088 	beq.w	80042c6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	330c      	adds	r3, #12
 80041bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80041c4:	e853 3f00 	ldrex	r3, [r3]
 80041c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80041cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80041d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	330c      	adds	r3, #12
 80041de:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80041e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80041e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80041ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80041f2:	e841 2300 	strex	r3, r2, [r1]
 80041f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80041fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1d9      	bne.n	80041b6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	3314      	adds	r3, #20
 8004208:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800420c:	e853 3f00 	ldrex	r3, [r3]
 8004210:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004212:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004214:	f023 0301 	bic.w	r3, r3, #1
 8004218:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	3314      	adds	r3, #20
 8004222:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004226:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800422a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800422e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004232:	e841 2300 	strex	r3, r2, [r1]
 8004236:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004238:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1e1      	bne.n	8004202 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	3314      	adds	r3, #20
 8004244:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004246:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004248:	e853 3f00 	ldrex	r3, [r3]
 800424c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800424e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004250:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004254:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	3314      	adds	r3, #20
 800425e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004262:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004264:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004266:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004268:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800426a:	e841 2300 	strex	r3, r2, [r1]
 800426e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004270:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1e3      	bne.n	800423e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2220      	movs	r2, #32
 800427a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	330c      	adds	r3, #12
 800428a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800428c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800428e:	e853 3f00 	ldrex	r3, [r3]
 8004292:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004294:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004296:	f023 0310 	bic.w	r3, r3, #16
 800429a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	330c      	adds	r3, #12
 80042a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80042a8:	65ba      	str	r2, [r7, #88]	; 0x58
 80042aa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80042ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80042b0:	e841 2300 	strex	r3, r2, [r1]
 80042b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80042b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d1e3      	bne.n	8004284 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7fe f9ae 	bl	8002622 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	4619      	mov	r1, r3
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 f8b6 	bl	8004448 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80042dc:	e099      	b.n	8004412 <HAL_UART_IRQHandler+0x50e>
 80042de:	bf00      	nop
 80042e0:	0800467f 	.word	0x0800467f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	f000 808b 	beq.w	8004416 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004300:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004304:	2b00      	cmp	r3, #0
 8004306:	f000 8086 	beq.w	8004416 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	330c      	adds	r3, #12
 8004310:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004314:	e853 3f00 	ldrex	r3, [r3]
 8004318:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800431a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800431c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004320:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	330c      	adds	r3, #12
 800432a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800432e:	647a      	str	r2, [r7, #68]	; 0x44
 8004330:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004332:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004334:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004336:	e841 2300 	strex	r3, r2, [r1]
 800433a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800433c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1e3      	bne.n	800430a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	3314      	adds	r3, #20
 8004348:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800434a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434c:	e853 3f00 	ldrex	r3, [r3]
 8004350:	623b      	str	r3, [r7, #32]
   return(result);
 8004352:	6a3b      	ldr	r3, [r7, #32]
 8004354:	f023 0301 	bic.w	r3, r3, #1
 8004358:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	3314      	adds	r3, #20
 8004362:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004366:	633a      	str	r2, [r7, #48]	; 0x30
 8004368:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800436a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800436c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800436e:	e841 2300 	strex	r3, r2, [r1]
 8004372:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1e3      	bne.n	8004342 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2220      	movs	r2, #32
 800437e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	330c      	adds	r3, #12
 800438e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	e853 3f00 	ldrex	r3, [r3]
 8004396:	60fb      	str	r3, [r7, #12]
   return(result);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f023 0310 	bic.w	r3, r3, #16
 800439e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	330c      	adds	r3, #12
 80043a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80043ac:	61fa      	str	r2, [r7, #28]
 80043ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b0:	69b9      	ldr	r1, [r7, #24]
 80043b2:	69fa      	ldr	r2, [r7, #28]
 80043b4:	e841 2300 	strex	r3, r2, [r1]
 80043b8:	617b      	str	r3, [r7, #20]
   return(result);
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d1e3      	bne.n	8004388 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80043c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80043c4:	4619      	mov	r1, r3
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 f83e 	bl	8004448 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80043cc:	e023      	b.n	8004416 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80043ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d009      	beq.n	80043ee <HAL_UART_IRQHandler+0x4ea>
 80043da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d003      	beq.n	80043ee <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 f95d 	bl	80046a6 <UART_Transmit_IT>
    return;
 80043ec:	e014      	b.n	8004418 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80043ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00e      	beq.n	8004418 <HAL_UART_IRQHandler+0x514>
 80043fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004402:	2b00      	cmp	r3, #0
 8004404:	d008      	beq.n	8004418 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 f99d 	bl	8004746 <UART_EndTransmit_IT>
    return;
 800440c:	e004      	b.n	8004418 <HAL_UART_IRQHandler+0x514>
    return;
 800440e:	bf00      	nop
 8004410:	e002      	b.n	8004418 <HAL_UART_IRQHandler+0x514>
      return;
 8004412:	bf00      	nop
 8004414:	e000      	b.n	8004418 <HAL_UART_IRQHandler+0x514>
      return;
 8004416:	bf00      	nop
  }
}
 8004418:	37e8      	adds	r7, #232	; 0xe8
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop

08004420 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004428:	bf00      	nop
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800443c:	bf00      	nop
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	460b      	mov	r3, r1
 8004452:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004454:	bf00      	nop
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b090      	sub	sp, #64	; 0x40
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	603b      	str	r3, [r7, #0]
 800446c:	4613      	mov	r3, r2
 800446e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004470:	e050      	b.n	8004514 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004472:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004478:	d04c      	beq.n	8004514 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800447a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800447c:	2b00      	cmp	r3, #0
 800447e:	d007      	beq.n	8004490 <UART_WaitOnFlagUntilTimeout+0x30>
 8004480:	f7fc fe94 	bl	80011ac <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800448c:	429a      	cmp	r2, r3
 800448e:	d241      	bcs.n	8004514 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	330c      	adds	r3, #12
 8004496:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800449a:	e853 3f00 	ldrex	r3, [r3]
 800449e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80044a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	330c      	adds	r3, #12
 80044ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80044b0:	637a      	str	r2, [r7, #52]	; 0x34
 80044b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044b8:	e841 2300 	strex	r3, r2, [r1]
 80044bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80044be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1e5      	bne.n	8004490 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	3314      	adds	r3, #20
 80044ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	e853 3f00 	ldrex	r3, [r3]
 80044d2:	613b      	str	r3, [r7, #16]
   return(result);
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	f023 0301 	bic.w	r3, r3, #1
 80044da:	63bb      	str	r3, [r7, #56]	; 0x38
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	3314      	adds	r3, #20
 80044e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044e4:	623a      	str	r2, [r7, #32]
 80044e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e8:	69f9      	ldr	r1, [r7, #28]
 80044ea:	6a3a      	ldr	r2, [r7, #32]
 80044ec:	e841 2300 	strex	r3, r2, [r1]
 80044f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d1e5      	bne.n	80044c4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2220      	movs	r2, #32
 80044fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2220      	movs	r2, #32
 8004504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e00f      	b.n	8004534 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	4013      	ands	r3, r2
 800451e:	68ba      	ldr	r2, [r7, #8]
 8004520:	429a      	cmp	r2, r3
 8004522:	bf0c      	ite	eq
 8004524:	2301      	moveq	r3, #1
 8004526:	2300      	movne	r3, #0
 8004528:	b2db      	uxtb	r3, r3
 800452a:	461a      	mov	r2, r3
 800452c:	79fb      	ldrb	r3, [r7, #7]
 800452e:	429a      	cmp	r2, r3
 8004530:	d09f      	beq.n	8004472 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	3740      	adds	r7, #64	; 0x40
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	4613      	mov	r3, r2
 8004548:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	68ba      	ldr	r2, [r7, #8]
 800454e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	88fa      	ldrh	r2, [r7, #6]
 8004554:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	88fa      	ldrh	r2, [r7, #6]
 800455a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2222      	movs	r2, #34	; 0x22
 8004566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d007      	beq.n	800458a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68da      	ldr	r2, [r3, #12]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004588:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	695a      	ldr	r2, [r3, #20]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f042 0201 	orr.w	r2, r2, #1
 8004598:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68da      	ldr	r2, [r3, #12]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f042 0220 	orr.w	r2, r2, #32
 80045a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3714      	adds	r7, #20
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b095      	sub	sp, #84	; 0x54
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	330c      	adds	r3, #12
 80045c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ca:	e853 3f00 	ldrex	r3, [r3]
 80045ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80045d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	330c      	adds	r3, #12
 80045de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045e0:	643a      	str	r2, [r7, #64]	; 0x40
 80045e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80045e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045e8:	e841 2300 	strex	r3, r2, [r1]
 80045ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80045ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d1e5      	bne.n	80045c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	3314      	adds	r3, #20
 80045fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045fc:	6a3b      	ldr	r3, [r7, #32]
 80045fe:	e853 3f00 	ldrex	r3, [r3]
 8004602:	61fb      	str	r3, [r7, #28]
   return(result);
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	f023 0301 	bic.w	r3, r3, #1
 800460a:	64bb      	str	r3, [r7, #72]	; 0x48
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	3314      	adds	r3, #20
 8004612:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004614:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004616:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004618:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800461a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800461c:	e841 2300 	strex	r3, r2, [r1]
 8004620:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004624:	2b00      	cmp	r3, #0
 8004626:	d1e5      	bne.n	80045f4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462c:	2b01      	cmp	r3, #1
 800462e:	d119      	bne.n	8004664 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	330c      	adds	r3, #12
 8004636:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	e853 3f00 	ldrex	r3, [r3]
 800463e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	f023 0310 	bic.w	r3, r3, #16
 8004646:	647b      	str	r3, [r7, #68]	; 0x44
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	330c      	adds	r3, #12
 800464e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004650:	61ba      	str	r2, [r7, #24]
 8004652:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004654:	6979      	ldr	r1, [r7, #20]
 8004656:	69ba      	ldr	r2, [r7, #24]
 8004658:	e841 2300 	strex	r3, r2, [r1]
 800465c:	613b      	str	r3, [r7, #16]
   return(result);
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1e5      	bne.n	8004630 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2220      	movs	r2, #32
 8004668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004672:	bf00      	nop
 8004674:	3754      	adds	r7, #84	; 0x54
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr

0800467e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800467e:	b580      	push	{r7, lr}
 8004680:	b084      	sub	sp, #16
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2200      	movs	r2, #0
 8004690:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2200      	movs	r2, #0
 8004696:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004698:	68f8      	ldr	r0, [r7, #12]
 800469a:	f7ff fecb 	bl	8004434 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800469e:	bf00      	nop
 80046a0:	3710      	adds	r7, #16
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80046a6:	b480      	push	{r7}
 80046a8:	b085      	sub	sp, #20
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b21      	cmp	r3, #33	; 0x21
 80046b8:	d13e      	bne.n	8004738 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046c2:	d114      	bne.n	80046ee <UART_Transmit_IT+0x48>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d110      	bne.n	80046ee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a1b      	ldr	r3, [r3, #32]
 80046d0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	881b      	ldrh	r3, [r3, #0]
 80046d6:	461a      	mov	r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046e0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a1b      	ldr	r3, [r3, #32]
 80046e6:	1c9a      	adds	r2, r3, #2
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	621a      	str	r2, [r3, #32]
 80046ec:	e008      	b.n	8004700 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a1b      	ldr	r3, [r3, #32]
 80046f2:	1c59      	adds	r1, r3, #1
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	6211      	str	r1, [r2, #32]
 80046f8:	781a      	ldrb	r2, [r3, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004704:	b29b      	uxth	r3, r3
 8004706:	3b01      	subs	r3, #1
 8004708:	b29b      	uxth	r3, r3
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	4619      	mov	r1, r3
 800470e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004710:	2b00      	cmp	r3, #0
 8004712:	d10f      	bne.n	8004734 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68da      	ldr	r2, [r3, #12]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004722:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68da      	ldr	r2, [r3, #12]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004732:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004734:	2300      	movs	r3, #0
 8004736:	e000      	b.n	800473a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004738:	2302      	movs	r3, #2
  }
}
 800473a:	4618      	mov	r0, r3
 800473c:	3714      	adds	r7, #20
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr

08004746 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b082      	sub	sp, #8
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	68da      	ldr	r2, [r3, #12]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800475c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2220      	movs	r2, #32
 8004762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f7ff fe5a 	bl	8004420 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3708      	adds	r7, #8
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004776:	b580      	push	{r7, lr}
 8004778:	b08c      	sub	sp, #48	; 0x30
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004784:	b2db      	uxtb	r3, r3
 8004786:	2b22      	cmp	r3, #34	; 0x22
 8004788:	f040 80ab 	bne.w	80048e2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004794:	d117      	bne.n	80047c6 <UART_Receive_IT+0x50>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d113      	bne.n	80047c6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800479e:	2300      	movs	r3, #0
 80047a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047b4:	b29a      	uxth	r2, r3
 80047b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047be:	1c9a      	adds	r2, r3, #2
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	629a      	str	r2, [r3, #40]	; 0x28
 80047c4:	e026      	b.n	8004814 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80047cc:	2300      	movs	r3, #0
 80047ce:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047d8:	d007      	beq.n	80047ea <UART_Receive_IT+0x74>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d10a      	bne.n	80047f8 <UART_Receive_IT+0x82>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d106      	bne.n	80047f8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	b2da      	uxtb	r2, r3
 80047f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f4:	701a      	strb	r2, [r3, #0]
 80047f6:	e008      	b.n	800480a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004804:	b2da      	uxtb	r2, r3
 8004806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004808:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800480e:	1c5a      	adds	r2, r3, #1
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004818:	b29b      	uxth	r3, r3
 800481a:	3b01      	subs	r3, #1
 800481c:	b29b      	uxth	r3, r3
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	4619      	mov	r1, r3
 8004822:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004824:	2b00      	cmp	r3, #0
 8004826:	d15a      	bne.n	80048de <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68da      	ldr	r2, [r3, #12]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f022 0220 	bic.w	r2, r2, #32
 8004836:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68da      	ldr	r2, [r3, #12]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004846:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	695a      	ldr	r2, [r3, #20]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f022 0201 	bic.w	r2, r2, #1
 8004856:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2220      	movs	r2, #32
 800485c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004864:	2b01      	cmp	r3, #1
 8004866:	d135      	bne.n	80048d4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	330c      	adds	r3, #12
 8004874:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	e853 3f00 	ldrex	r3, [r3]
 800487c:	613b      	str	r3, [r7, #16]
   return(result);
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	f023 0310 	bic.w	r3, r3, #16
 8004884:	627b      	str	r3, [r7, #36]	; 0x24
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	330c      	adds	r3, #12
 800488c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800488e:	623a      	str	r2, [r7, #32]
 8004890:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004892:	69f9      	ldr	r1, [r7, #28]
 8004894:	6a3a      	ldr	r2, [r7, #32]
 8004896:	e841 2300 	strex	r3, r2, [r1]
 800489a:	61bb      	str	r3, [r7, #24]
   return(result);
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1e5      	bne.n	800486e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0310 	and.w	r3, r3, #16
 80048ac:	2b10      	cmp	r3, #16
 80048ae:	d10a      	bne.n	80048c6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048b0:	2300      	movs	r3, #0
 80048b2:	60fb      	str	r3, [r7, #12]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	60fb      	str	r3, [r7, #12]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	60fb      	str	r3, [r7, #12]
 80048c4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048ca:	4619      	mov	r1, r3
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f7ff fdbb 	bl	8004448 <HAL_UARTEx_RxEventCallback>
 80048d2:	e002      	b.n	80048da <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f7fb fe15 	bl	8000504 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80048da:	2300      	movs	r3, #0
 80048dc:	e002      	b.n	80048e4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80048de:	2300      	movs	r3, #0
 80048e0:	e000      	b.n	80048e4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80048e2:	2302      	movs	r3, #2
  }
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3730      	adds	r7, #48	; 0x30
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048f0:	b0c0      	sub	sp, #256	; 0x100
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004908:	68d9      	ldr	r1, [r3, #12]
 800490a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	ea40 0301 	orr.w	r3, r0, r1
 8004914:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800491a:	689a      	ldr	r2, [r3, #8]
 800491c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	431a      	orrs	r2, r3
 8004924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004928:	695b      	ldr	r3, [r3, #20]
 800492a:	431a      	orrs	r2, r3
 800492c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004930:	69db      	ldr	r3, [r3, #28]
 8004932:	4313      	orrs	r3, r2
 8004934:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004944:	f021 010c 	bic.w	r1, r1, #12
 8004948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004952:	430b      	orrs	r3, r1
 8004954:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004966:	6999      	ldr	r1, [r3, #24]
 8004968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	ea40 0301 	orr.w	r3, r0, r1
 8004972:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	4b8f      	ldr	r3, [pc, #572]	; (8004bb8 <UART_SetConfig+0x2cc>)
 800497c:	429a      	cmp	r2, r3
 800497e:	d005      	beq.n	800498c <UART_SetConfig+0xa0>
 8004980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	4b8d      	ldr	r3, [pc, #564]	; (8004bbc <UART_SetConfig+0x2d0>)
 8004988:	429a      	cmp	r2, r3
 800498a:	d104      	bne.n	8004996 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800498c:	f7fe fd14 	bl	80033b8 <HAL_RCC_GetPCLK2Freq>
 8004990:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004994:	e003      	b.n	800499e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004996:	f7fe fcfb 	bl	8003390 <HAL_RCC_GetPCLK1Freq>
 800499a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800499e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049a2:	69db      	ldr	r3, [r3, #28]
 80049a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049a8:	f040 810c 	bne.w	8004bc4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80049ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049b0:	2200      	movs	r2, #0
 80049b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80049b6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80049ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80049be:	4622      	mov	r2, r4
 80049c0:	462b      	mov	r3, r5
 80049c2:	1891      	adds	r1, r2, r2
 80049c4:	65b9      	str	r1, [r7, #88]	; 0x58
 80049c6:	415b      	adcs	r3, r3
 80049c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80049ce:	4621      	mov	r1, r4
 80049d0:	eb12 0801 	adds.w	r8, r2, r1
 80049d4:	4629      	mov	r1, r5
 80049d6:	eb43 0901 	adc.w	r9, r3, r1
 80049da:	f04f 0200 	mov.w	r2, #0
 80049de:	f04f 0300 	mov.w	r3, #0
 80049e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049ee:	4690      	mov	r8, r2
 80049f0:	4699      	mov	r9, r3
 80049f2:	4623      	mov	r3, r4
 80049f4:	eb18 0303 	adds.w	r3, r8, r3
 80049f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80049fc:	462b      	mov	r3, r5
 80049fe:	eb49 0303 	adc.w	r3, r9, r3
 8004a02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004a12:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004a16:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	18db      	adds	r3, r3, r3
 8004a1e:	653b      	str	r3, [r7, #80]	; 0x50
 8004a20:	4613      	mov	r3, r2
 8004a22:	eb42 0303 	adc.w	r3, r2, r3
 8004a26:	657b      	str	r3, [r7, #84]	; 0x54
 8004a28:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004a2c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004a30:	f7fb fbca 	bl	80001c8 <__aeabi_uldivmod>
 8004a34:	4602      	mov	r2, r0
 8004a36:	460b      	mov	r3, r1
 8004a38:	4b61      	ldr	r3, [pc, #388]	; (8004bc0 <UART_SetConfig+0x2d4>)
 8004a3a:	fba3 2302 	umull	r2, r3, r3, r2
 8004a3e:	095b      	lsrs	r3, r3, #5
 8004a40:	011c      	lsls	r4, r3, #4
 8004a42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a46:	2200      	movs	r2, #0
 8004a48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a4c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004a50:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004a54:	4642      	mov	r2, r8
 8004a56:	464b      	mov	r3, r9
 8004a58:	1891      	adds	r1, r2, r2
 8004a5a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004a5c:	415b      	adcs	r3, r3
 8004a5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a60:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004a64:	4641      	mov	r1, r8
 8004a66:	eb12 0a01 	adds.w	sl, r2, r1
 8004a6a:	4649      	mov	r1, r9
 8004a6c:	eb43 0b01 	adc.w	fp, r3, r1
 8004a70:	f04f 0200 	mov.w	r2, #0
 8004a74:	f04f 0300 	mov.w	r3, #0
 8004a78:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a7c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a84:	4692      	mov	sl, r2
 8004a86:	469b      	mov	fp, r3
 8004a88:	4643      	mov	r3, r8
 8004a8a:	eb1a 0303 	adds.w	r3, sl, r3
 8004a8e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a92:	464b      	mov	r3, r9
 8004a94:	eb4b 0303 	adc.w	r3, fp, r3
 8004a98:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004aa8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004aac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	18db      	adds	r3, r3, r3
 8004ab4:	643b      	str	r3, [r7, #64]	; 0x40
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	eb42 0303 	adc.w	r3, r2, r3
 8004abc:	647b      	str	r3, [r7, #68]	; 0x44
 8004abe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004ac2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004ac6:	f7fb fb7f 	bl	80001c8 <__aeabi_uldivmod>
 8004aca:	4602      	mov	r2, r0
 8004acc:	460b      	mov	r3, r1
 8004ace:	4611      	mov	r1, r2
 8004ad0:	4b3b      	ldr	r3, [pc, #236]	; (8004bc0 <UART_SetConfig+0x2d4>)
 8004ad2:	fba3 2301 	umull	r2, r3, r3, r1
 8004ad6:	095b      	lsrs	r3, r3, #5
 8004ad8:	2264      	movs	r2, #100	; 0x64
 8004ada:	fb02 f303 	mul.w	r3, r2, r3
 8004ade:	1acb      	subs	r3, r1, r3
 8004ae0:	00db      	lsls	r3, r3, #3
 8004ae2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004ae6:	4b36      	ldr	r3, [pc, #216]	; (8004bc0 <UART_SetConfig+0x2d4>)
 8004ae8:	fba3 2302 	umull	r2, r3, r3, r2
 8004aec:	095b      	lsrs	r3, r3, #5
 8004aee:	005b      	lsls	r3, r3, #1
 8004af0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004af4:	441c      	add	r4, r3
 8004af6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004afa:	2200      	movs	r2, #0
 8004afc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b00:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004b04:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004b08:	4642      	mov	r2, r8
 8004b0a:	464b      	mov	r3, r9
 8004b0c:	1891      	adds	r1, r2, r2
 8004b0e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b10:	415b      	adcs	r3, r3
 8004b12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004b18:	4641      	mov	r1, r8
 8004b1a:	1851      	adds	r1, r2, r1
 8004b1c:	6339      	str	r1, [r7, #48]	; 0x30
 8004b1e:	4649      	mov	r1, r9
 8004b20:	414b      	adcs	r3, r1
 8004b22:	637b      	str	r3, [r7, #52]	; 0x34
 8004b24:	f04f 0200 	mov.w	r2, #0
 8004b28:	f04f 0300 	mov.w	r3, #0
 8004b2c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004b30:	4659      	mov	r1, fp
 8004b32:	00cb      	lsls	r3, r1, #3
 8004b34:	4651      	mov	r1, sl
 8004b36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b3a:	4651      	mov	r1, sl
 8004b3c:	00ca      	lsls	r2, r1, #3
 8004b3e:	4610      	mov	r0, r2
 8004b40:	4619      	mov	r1, r3
 8004b42:	4603      	mov	r3, r0
 8004b44:	4642      	mov	r2, r8
 8004b46:	189b      	adds	r3, r3, r2
 8004b48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b4c:	464b      	mov	r3, r9
 8004b4e:	460a      	mov	r2, r1
 8004b50:	eb42 0303 	adc.w	r3, r2, r3
 8004b54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b64:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004b68:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	18db      	adds	r3, r3, r3
 8004b70:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b72:	4613      	mov	r3, r2
 8004b74:	eb42 0303 	adc.w	r3, r2, r3
 8004b78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b7e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004b82:	f7fb fb21 	bl	80001c8 <__aeabi_uldivmod>
 8004b86:	4602      	mov	r2, r0
 8004b88:	460b      	mov	r3, r1
 8004b8a:	4b0d      	ldr	r3, [pc, #52]	; (8004bc0 <UART_SetConfig+0x2d4>)
 8004b8c:	fba3 1302 	umull	r1, r3, r3, r2
 8004b90:	095b      	lsrs	r3, r3, #5
 8004b92:	2164      	movs	r1, #100	; 0x64
 8004b94:	fb01 f303 	mul.w	r3, r1, r3
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	00db      	lsls	r3, r3, #3
 8004b9c:	3332      	adds	r3, #50	; 0x32
 8004b9e:	4a08      	ldr	r2, [pc, #32]	; (8004bc0 <UART_SetConfig+0x2d4>)
 8004ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba4:	095b      	lsrs	r3, r3, #5
 8004ba6:	f003 0207 	and.w	r2, r3, #7
 8004baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4422      	add	r2, r4
 8004bb2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004bb4:	e105      	b.n	8004dc2 <UART_SetConfig+0x4d6>
 8004bb6:	bf00      	nop
 8004bb8:	40011000 	.word	0x40011000
 8004bbc:	40011400 	.word	0x40011400
 8004bc0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004bce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004bd2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004bd6:	4642      	mov	r2, r8
 8004bd8:	464b      	mov	r3, r9
 8004bda:	1891      	adds	r1, r2, r2
 8004bdc:	6239      	str	r1, [r7, #32]
 8004bde:	415b      	adcs	r3, r3
 8004be0:	627b      	str	r3, [r7, #36]	; 0x24
 8004be2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004be6:	4641      	mov	r1, r8
 8004be8:	1854      	adds	r4, r2, r1
 8004bea:	4649      	mov	r1, r9
 8004bec:	eb43 0501 	adc.w	r5, r3, r1
 8004bf0:	f04f 0200 	mov.w	r2, #0
 8004bf4:	f04f 0300 	mov.w	r3, #0
 8004bf8:	00eb      	lsls	r3, r5, #3
 8004bfa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bfe:	00e2      	lsls	r2, r4, #3
 8004c00:	4614      	mov	r4, r2
 8004c02:	461d      	mov	r5, r3
 8004c04:	4643      	mov	r3, r8
 8004c06:	18e3      	adds	r3, r4, r3
 8004c08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004c0c:	464b      	mov	r3, r9
 8004c0e:	eb45 0303 	adc.w	r3, r5, r3
 8004c12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c22:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c26:	f04f 0200 	mov.w	r2, #0
 8004c2a:	f04f 0300 	mov.w	r3, #0
 8004c2e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004c32:	4629      	mov	r1, r5
 8004c34:	008b      	lsls	r3, r1, #2
 8004c36:	4621      	mov	r1, r4
 8004c38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c3c:	4621      	mov	r1, r4
 8004c3e:	008a      	lsls	r2, r1, #2
 8004c40:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004c44:	f7fb fac0 	bl	80001c8 <__aeabi_uldivmod>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	460b      	mov	r3, r1
 8004c4c:	4b60      	ldr	r3, [pc, #384]	; (8004dd0 <UART_SetConfig+0x4e4>)
 8004c4e:	fba3 2302 	umull	r2, r3, r3, r2
 8004c52:	095b      	lsrs	r3, r3, #5
 8004c54:	011c      	lsls	r4, r3, #4
 8004c56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c60:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004c64:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004c68:	4642      	mov	r2, r8
 8004c6a:	464b      	mov	r3, r9
 8004c6c:	1891      	adds	r1, r2, r2
 8004c6e:	61b9      	str	r1, [r7, #24]
 8004c70:	415b      	adcs	r3, r3
 8004c72:	61fb      	str	r3, [r7, #28]
 8004c74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c78:	4641      	mov	r1, r8
 8004c7a:	1851      	adds	r1, r2, r1
 8004c7c:	6139      	str	r1, [r7, #16]
 8004c7e:	4649      	mov	r1, r9
 8004c80:	414b      	adcs	r3, r1
 8004c82:	617b      	str	r3, [r7, #20]
 8004c84:	f04f 0200 	mov.w	r2, #0
 8004c88:	f04f 0300 	mov.w	r3, #0
 8004c8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c90:	4659      	mov	r1, fp
 8004c92:	00cb      	lsls	r3, r1, #3
 8004c94:	4651      	mov	r1, sl
 8004c96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c9a:	4651      	mov	r1, sl
 8004c9c:	00ca      	lsls	r2, r1, #3
 8004c9e:	4610      	mov	r0, r2
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	4642      	mov	r2, r8
 8004ca6:	189b      	adds	r3, r3, r2
 8004ca8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004cac:	464b      	mov	r3, r9
 8004cae:	460a      	mov	r2, r1
 8004cb0:	eb42 0303 	adc.w	r3, r2, r3
 8004cb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	67bb      	str	r3, [r7, #120]	; 0x78
 8004cc2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004cc4:	f04f 0200 	mov.w	r2, #0
 8004cc8:	f04f 0300 	mov.w	r3, #0
 8004ccc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004cd0:	4649      	mov	r1, r9
 8004cd2:	008b      	lsls	r3, r1, #2
 8004cd4:	4641      	mov	r1, r8
 8004cd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cda:	4641      	mov	r1, r8
 8004cdc:	008a      	lsls	r2, r1, #2
 8004cde:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004ce2:	f7fb fa71 	bl	80001c8 <__aeabi_uldivmod>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	460b      	mov	r3, r1
 8004cea:	4b39      	ldr	r3, [pc, #228]	; (8004dd0 <UART_SetConfig+0x4e4>)
 8004cec:	fba3 1302 	umull	r1, r3, r3, r2
 8004cf0:	095b      	lsrs	r3, r3, #5
 8004cf2:	2164      	movs	r1, #100	; 0x64
 8004cf4:	fb01 f303 	mul.w	r3, r1, r3
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	011b      	lsls	r3, r3, #4
 8004cfc:	3332      	adds	r3, #50	; 0x32
 8004cfe:	4a34      	ldr	r2, [pc, #208]	; (8004dd0 <UART_SetConfig+0x4e4>)
 8004d00:	fba2 2303 	umull	r2, r3, r2, r3
 8004d04:	095b      	lsrs	r3, r3, #5
 8004d06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d0a:	441c      	add	r4, r3
 8004d0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d10:	2200      	movs	r2, #0
 8004d12:	673b      	str	r3, [r7, #112]	; 0x70
 8004d14:	677a      	str	r2, [r7, #116]	; 0x74
 8004d16:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004d1a:	4642      	mov	r2, r8
 8004d1c:	464b      	mov	r3, r9
 8004d1e:	1891      	adds	r1, r2, r2
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	415b      	adcs	r3, r3
 8004d24:	60fb      	str	r3, [r7, #12]
 8004d26:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d2a:	4641      	mov	r1, r8
 8004d2c:	1851      	adds	r1, r2, r1
 8004d2e:	6039      	str	r1, [r7, #0]
 8004d30:	4649      	mov	r1, r9
 8004d32:	414b      	adcs	r3, r1
 8004d34:	607b      	str	r3, [r7, #4]
 8004d36:	f04f 0200 	mov.w	r2, #0
 8004d3a:	f04f 0300 	mov.w	r3, #0
 8004d3e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d42:	4659      	mov	r1, fp
 8004d44:	00cb      	lsls	r3, r1, #3
 8004d46:	4651      	mov	r1, sl
 8004d48:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d4c:	4651      	mov	r1, sl
 8004d4e:	00ca      	lsls	r2, r1, #3
 8004d50:	4610      	mov	r0, r2
 8004d52:	4619      	mov	r1, r3
 8004d54:	4603      	mov	r3, r0
 8004d56:	4642      	mov	r2, r8
 8004d58:	189b      	adds	r3, r3, r2
 8004d5a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d5c:	464b      	mov	r3, r9
 8004d5e:	460a      	mov	r2, r1
 8004d60:	eb42 0303 	adc.w	r3, r2, r3
 8004d64:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	663b      	str	r3, [r7, #96]	; 0x60
 8004d70:	667a      	str	r2, [r7, #100]	; 0x64
 8004d72:	f04f 0200 	mov.w	r2, #0
 8004d76:	f04f 0300 	mov.w	r3, #0
 8004d7a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004d7e:	4649      	mov	r1, r9
 8004d80:	008b      	lsls	r3, r1, #2
 8004d82:	4641      	mov	r1, r8
 8004d84:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d88:	4641      	mov	r1, r8
 8004d8a:	008a      	lsls	r2, r1, #2
 8004d8c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004d90:	f7fb fa1a 	bl	80001c8 <__aeabi_uldivmod>
 8004d94:	4602      	mov	r2, r0
 8004d96:	460b      	mov	r3, r1
 8004d98:	4b0d      	ldr	r3, [pc, #52]	; (8004dd0 <UART_SetConfig+0x4e4>)
 8004d9a:	fba3 1302 	umull	r1, r3, r3, r2
 8004d9e:	095b      	lsrs	r3, r3, #5
 8004da0:	2164      	movs	r1, #100	; 0x64
 8004da2:	fb01 f303 	mul.w	r3, r1, r3
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	011b      	lsls	r3, r3, #4
 8004daa:	3332      	adds	r3, #50	; 0x32
 8004dac:	4a08      	ldr	r2, [pc, #32]	; (8004dd0 <UART_SetConfig+0x4e4>)
 8004dae:	fba2 2303 	umull	r2, r3, r2, r3
 8004db2:	095b      	lsrs	r3, r3, #5
 8004db4:	f003 020f 	and.w	r2, r3, #15
 8004db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4422      	add	r2, r4
 8004dc0:	609a      	str	r2, [r3, #8]
}
 8004dc2:	bf00      	nop
 8004dc4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dce:	bf00      	nop
 8004dd0:	51eb851f 	.word	0x51eb851f

08004dd4 <__libc_init_array>:
 8004dd4:	b570      	push	{r4, r5, r6, lr}
 8004dd6:	4d0d      	ldr	r5, [pc, #52]	; (8004e0c <__libc_init_array+0x38>)
 8004dd8:	4c0d      	ldr	r4, [pc, #52]	; (8004e10 <__libc_init_array+0x3c>)
 8004dda:	1b64      	subs	r4, r4, r5
 8004ddc:	10a4      	asrs	r4, r4, #2
 8004dde:	2600      	movs	r6, #0
 8004de0:	42a6      	cmp	r6, r4
 8004de2:	d109      	bne.n	8004df8 <__libc_init_array+0x24>
 8004de4:	4d0b      	ldr	r5, [pc, #44]	; (8004e14 <__libc_init_array+0x40>)
 8004de6:	4c0c      	ldr	r4, [pc, #48]	; (8004e18 <__libc_init_array+0x44>)
 8004de8:	f000 f820 	bl	8004e2c <_init>
 8004dec:	1b64      	subs	r4, r4, r5
 8004dee:	10a4      	asrs	r4, r4, #2
 8004df0:	2600      	movs	r6, #0
 8004df2:	42a6      	cmp	r6, r4
 8004df4:	d105      	bne.n	8004e02 <__libc_init_array+0x2e>
 8004df6:	bd70      	pop	{r4, r5, r6, pc}
 8004df8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dfc:	4798      	blx	r3
 8004dfe:	3601      	adds	r6, #1
 8004e00:	e7ee      	b.n	8004de0 <__libc_init_array+0xc>
 8004e02:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e06:	4798      	blx	r3
 8004e08:	3601      	adds	r6, #1
 8004e0a:	e7f2      	b.n	8004df2 <__libc_init_array+0x1e>
 8004e0c:	08004e64 	.word	0x08004e64
 8004e10:	08004e64 	.word	0x08004e64
 8004e14:	08004e64 	.word	0x08004e64
 8004e18:	08004e68 	.word	0x08004e68

08004e1c <memset>:
 8004e1c:	4402      	add	r2, r0
 8004e1e:	4603      	mov	r3, r0
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d100      	bne.n	8004e26 <memset+0xa>
 8004e24:	4770      	bx	lr
 8004e26:	f803 1b01 	strb.w	r1, [r3], #1
 8004e2a:	e7f9      	b.n	8004e20 <memset+0x4>

08004e2c <_init>:
 8004e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e2e:	bf00      	nop
 8004e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e32:	bc08      	pop	{r3}
 8004e34:	469e      	mov	lr, r3
 8004e36:	4770      	bx	lr

08004e38 <_fini>:
 8004e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e3a:	bf00      	nop
 8004e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e3e:	bc08      	pop	{r3}
 8004e40:	469e      	mov	lr, r3
 8004e42:	4770      	bx	lr
