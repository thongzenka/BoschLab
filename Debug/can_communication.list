
can_communication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c08  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004d90  08004d90  00014d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004da8  08004da8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004da8  08004da8  00014da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004db0  08004db0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004db0  08004db0  00014db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004db4  08004db4  00014db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004db8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000001d0  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001dc  200001dc  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010eb7  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000220b  00000000  00000000  00030ef3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ed8  00000000  00000000  00033100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002108f  00000000  00000000  00033fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011568  00000000  00000000  00055067  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf3a3  00000000  00000000  000665cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00135972  2**0
                  CONTENTS, READONLY
 20 .debug_ranges 00000df8  00000000  00000000  001359c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003ec0  00000000  00000000  001367c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004d78 	.word	0x08004d78

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004d78 	.word	0x08004d78

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <HAL_CAN_RxFifo0MsgPendingCallback>:
uint8_t RxData[8];

uint32_t TxMailbox;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader,RxData);
 80004d4:	4b08      	ldr	r3, [pc, #32]	; (80004f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80004d6:	4a09      	ldr	r2, [pc, #36]	; (80004fc <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80004d8:	2100      	movs	r1, #0
 80004da:	6878      	ldr	r0, [r7, #4]
 80004dc:	f001 fbce 	bl	8001c7c <HAL_CAN_GetRxMessage>
		if (RxHeader.DLC == 8)
 80004e0:	4b06      	ldr	r3, [pc, #24]	; (80004fc <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80004e2:	691b      	ldr	r3, [r3, #16]
 80004e4:	2b08      	cmp	r3, #8
 80004e6:	d102      	bne.n	80004ee <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
		{
			data_flag2 = 1;
 80004e8:	4b05      	ldr	r3, [pc, #20]	; (8000500 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80004ea:	2201      	movs	r2, #1
 80004ec:	701a      	strb	r2, [r3, #0]
		}

}
 80004ee:	bf00      	nop
 80004f0:	3708      	adds	r7, #8
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	20000190 	.word	0x20000190
 80004fc:	2000016c 	.word	0x2000016c
 8000500:	2000002b 	.word	0x2000002b

08000504 <HAL_UART_RxCpltCallback>:


uint8_t buffer[MAX_BUFFER_SIZE];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	if( huart -> Instance == USART2 ) {
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a13      	ldr	r2, [pc, #76]	; (8000560 <HAL_UART_RxCpltCallback+0x5c>)
 8000512:	4293      	cmp	r3, r2
 8000514:	d11f      	bne.n	8000556 <HAL_UART_RxCpltCallback+0x52>
		buffer[index_buffer++] = temp;
 8000516:	4b13      	ldr	r3, [pc, #76]	; (8000564 <HAL_UART_RxCpltCallback+0x60>)
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	1c5a      	adds	r2, r3, #1
 800051c:	b2d1      	uxtb	r1, r2
 800051e:	4a11      	ldr	r2, [pc, #68]	; (8000564 <HAL_UART_RxCpltCallback+0x60>)
 8000520:	7011      	strb	r1, [r2, #0]
 8000522:	461a      	mov	r2, r3
 8000524:	4b10      	ldr	r3, [pc, #64]	; (8000568 <HAL_UART_RxCpltCallback+0x64>)
 8000526:	7819      	ldrb	r1, [r3, #0]
 8000528:	4b10      	ldr	r3, [pc, #64]	; (800056c <HAL_UART_RxCpltCallback+0x68>)
 800052a:	5499      	strb	r1, [r3, r2]
		if(index_buffer == 30) index_buffer = 0;
 800052c:	4b0d      	ldr	r3, [pc, #52]	; (8000564 <HAL_UART_RxCpltCallback+0x60>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	2b1e      	cmp	r3, #30
 8000532:	d102      	bne.n	800053a <HAL_UART_RxCpltCallback+0x36>
 8000534:	4b0b      	ldr	r3, [pc, #44]	; (8000564 <HAL_UART_RxCpltCallback+0x60>)
 8000536:	2200      	movs	r2, #0
 8000538:	701a      	strb	r2, [r3, #0]
		buffer_flag = 1;
 800053a:	4b0d      	ldr	r3, [pc, #52]	; (8000570 <HAL_UART_RxCpltCallback+0x6c>)
 800053c:	2201      	movs	r2, #1
 800053e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit (&huart2, &temp, 1, 50) ;
 8000540:	2332      	movs	r3, #50	; 0x32
 8000542:	2201      	movs	r2, #1
 8000544:	4908      	ldr	r1, [pc, #32]	; (8000568 <HAL_UART_RxCpltCallback+0x64>)
 8000546:	480b      	ldr	r0, [pc, #44]	; (8000574 <HAL_UART_RxCpltCallback+0x70>)
 8000548:	f003 fbbf 	bl	8003cca <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart2, & temp, 1);
 800054c:	2201      	movs	r2, #1
 800054e:	4906      	ldr	r1, [pc, #24]	; (8000568 <HAL_UART_RxCpltCallback+0x64>)
 8000550:	4808      	ldr	r0, [pc, #32]	; (8000574 <HAL_UART_RxCpltCallback+0x70>)
 8000552:	f003 fc4c 	bl	8003dee <HAL_UART_Receive_IT>
	}
}
 8000556:	bf00      	nop
 8000558:	3708      	adds	r7, #8
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	40004400 	.word	0x40004400
 8000564:	20000029 	.word	0x20000029
 8000568:	20000028 	.word	0x20000028
 800056c:	2000019c 	.word	0x2000019c
 8000570:	2000002a 	.word	0x2000002a
 8000574:	20000110 	.word	0x20000110

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057c:	f000 fd56 	bl	800102c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000580:	f000 f878 	bl	8000674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000584:	f000 fa44 	bl	8000a10 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000588:	f000 f924 	bl	80007d4 <MX_CAN1_Init>
  MX_CAN2_Init();
 800058c:	f000 f976 	bl	800087c <MX_CAN2_Init>
  MX_TIM2_Init();
 8000590:	f000 f9c8 	bl	8000924 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000594:	f000 fa12 	bl	80009bc <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000598:	f000 f8ca 	bl	8000730 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 800059c:	482c      	ldr	r0, [pc, #176]	; (8000650 <main+0xd8>)
 800059e:	f001 fa19 	bl	80019d4 <HAL_CAN_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 80005a2:	482c      	ldr	r0, [pc, #176]	; (8000654 <main+0xdc>)
 80005a4:	f002 ff12 	bl	80033cc <HAL_TIM_Base_Start_IT>

  // Activate the notification
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80005a8:	2102      	movs	r1, #2
 80005aa:	4829      	ldr	r0, [pc, #164]	; (8000650 <main+0xd8>)
 80005ac:	f001 fc78 	bl	8001ea0 <HAL_CAN_ActivateNotification>
  HAL_Delay(300);
 80005b0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80005b4:	f000 fdac 	bl	8001110 <HAL_Delay>
  TxHeader.DLC   = 8;  // data length
 80005b8:	4b27      	ldr	r3, [pc, #156]	; (8000658 <main+0xe0>)
 80005ba:	2208      	movs	r2, #8
 80005bc:	611a      	str	r2, [r3, #16]
  TxHeader.IDE   = CAN_ID_STD;
 80005be:	4b26      	ldr	r3, [pc, #152]	; (8000658 <main+0xe0>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	609a      	str	r2, [r3, #8]
  TxHeader.RTR   = CAN_RTR_DATA;
 80005c4:	4b24      	ldr	r3, [pc, #144]	; (8000658 <main+0xe0>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x0A2;  // ID
 80005ca:	4b23      	ldr	r3, [pc, #140]	; (8000658 <main+0xe0>)
 80005cc:	22a2      	movs	r2, #162	; 0xa2
 80005ce:	601a      	str	r2, [r3, #0]

  setTimer2(50);
 80005d0:	2032      	movs	r0, #50	; 0x32
 80005d2:	f000 fca1 	bl	8000f18 <setTimer2>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //LAB1 tester board
	  /*Node 2(verification board): recive data*/
	  if(data_flag2){
 80005d6:	4b21      	ldr	r3, [pc, #132]	; (800065c <main+0xe4>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d006      	beq.n	80005ec <main+0x74>
		  data_flag2 = 0;
 80005de:	4b1f      	ldr	r3, [pc, #124]	; (800065c <main+0xe4>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 80005e4:	2102      	movs	r1, #2
 80005e6:	481e      	ldr	r0, [pc, #120]	; (8000660 <main+0xe8>)
 80005e8:	f002 fa09 	bl	80029fe <HAL_GPIO_TogglePin>
	  }
	  /*Node 2(verification board): send data*/
	  if(timer2_flag){
 80005ec:	4b1d      	ldr	r3, [pc, #116]	; (8000664 <main+0xec>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d0f0      	beq.n	80005d6 <main+0x5e>
		  setTimer2(50);
 80005f4:	2032      	movs	r0, #50	; 0x32
 80005f6:	f000 fc8f 	bl	8000f18 <setTimer2>
		  if(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) >0 ){ // check Mailbox
 80005fa:	4815      	ldr	r0, [pc, #84]	; (8000650 <main+0xd8>)
 80005fc:	f001 fb09 	bl	8001c12 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d0e7      	beq.n	80005d6 <main+0x5e>
			  TxData[0] = 0x02;
 8000606:	4b18      	ldr	r3, [pc, #96]	; (8000668 <main+0xf0>)
 8000608:	2202      	movs	r2, #2
 800060a:	701a      	strb	r2, [r3, #0]
			  TxData[1] = 0x12;
 800060c:	4b16      	ldr	r3, [pc, #88]	; (8000668 <main+0xf0>)
 800060e:	2212      	movs	r2, #18
 8000610:	705a      	strb	r2, [r3, #1]
			  if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) == HAL_OK){
 8000612:	4b16      	ldr	r3, [pc, #88]	; (800066c <main+0xf4>)
 8000614:	4a14      	ldr	r2, [pc, #80]	; (8000668 <main+0xf0>)
 8000616:	4910      	ldr	r1, [pc, #64]	; (8000658 <main+0xe0>)
 8000618:	480d      	ldr	r0, [pc, #52]	; (8000650 <main+0xd8>)
 800061a:	f001 fa1f 	bl	8001a5c <HAL_CAN_AddTxMessage>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d112      	bne.n	800064a <main+0xd2>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, SET);
 8000624:	2201      	movs	r2, #1
 8000626:	2101      	movs	r1, #1
 8000628:	480d      	ldr	r0, [pc, #52]	; (8000660 <main+0xe8>)
 800062a:	f002 f9cf 	bl	80029cc <HAL_GPIO_WritePin>
				  dataCounter++;
 800062e:	4b10      	ldr	r3, [pc, #64]	; (8000670 <main+0xf8>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	3301      	adds	r3, #1
 8000634:	b2da      	uxtb	r2, r3
 8000636:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <main+0xf8>)
 8000638:	701a      	strb	r2, [r3, #0]
				  if(dataCounter >=100){
 800063a:	4b0d      	ldr	r3, [pc, #52]	; (8000670 <main+0xf8>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	2b63      	cmp	r3, #99	; 0x63
 8000640:	d9c9      	bls.n	80005d6 <main+0x5e>
					  dataCounter = 0;
 8000642:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <main+0xf8>)
 8000644:	2200      	movs	r2, #0
 8000646:	701a      	strb	r2, [r3, #0]
 8000648:	e7c5      	b.n	80005d6 <main+0x5e>

			  }
		  }
		  else{
			  Error_Handler();
 800064a:	f000 fa61 	bl	8000b10 <Error_Handler>
	  if(data_flag2){
 800064e:	e7c2      	b.n	80005d6 <main+0x5e>
 8000650:	20000078 	.word	0x20000078
 8000654:	200000c8 	.word	0x200000c8
 8000658:	20000154 	.word	0x20000154
 800065c:	2000002b 	.word	0x2000002b
 8000660:	40020400 	.word	0x40020400
 8000664:	200001d0 	.word	0x200001d0
 8000668:	20000188 	.word	0x20000188
 800066c:	20000198 	.word	0x20000198
 8000670:	2000002c 	.word	0x2000002c

08000674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b094      	sub	sp, #80	; 0x50
 8000678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067a:	f107 0320 	add.w	r3, r7, #32
 800067e:	2230      	movs	r2, #48	; 0x30
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f004 fb70 	bl	8004d68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000698:	2300      	movs	r3, #0
 800069a:	60bb      	str	r3, [r7, #8]
 800069c:	4b22      	ldr	r3, [pc, #136]	; (8000728 <SystemClock_Config+0xb4>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a0:	4a21      	ldr	r2, [pc, #132]	; (8000728 <SystemClock_Config+0xb4>)
 80006a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a6:	6413      	str	r3, [r2, #64]	; 0x40
 80006a8:	4b1f      	ldr	r3, [pc, #124]	; (8000728 <SystemClock_Config+0xb4>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b0:	60bb      	str	r3, [r7, #8]
 80006b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b4:	2300      	movs	r3, #0
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	4b1c      	ldr	r3, [pc, #112]	; (800072c <SystemClock_Config+0xb8>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a1b      	ldr	r2, [pc, #108]	; (800072c <SystemClock_Config+0xb8>)
 80006be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c2:	6013      	str	r3, [r2, #0]
 80006c4:	4b19      	ldr	r3, [pc, #100]	; (800072c <SystemClock_Config+0xb8>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d0:	2302      	movs	r3, #2
 80006d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d4:	2301      	movs	r3, #1
 80006d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d8:	2310      	movs	r3, #16
 80006da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006dc:	2300      	movs	r3, #0
 80006de:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e0:	f107 0320 	add.w	r3, r7, #32
 80006e4:	4618      	mov	r0, r3
 80006e6:	f002 f9c9 	bl	8002a7c <HAL_RCC_OscConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006f0:	f000 fa0e 	bl	8000b10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f4:	230f      	movs	r3, #15
 80006f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006f8:	2300      	movs	r3, #0
 80006fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000708:	f107 030c 	add.w	r3, r7, #12
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f002 fc2c 	bl	8002f6c <HAL_RCC_ClockConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800071a:	f000 f9f9 	bl	8000b10 <Error_Handler>
  }
}
 800071e:	bf00      	nop
 8000720:	3750      	adds	r7, #80	; 0x50
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800
 800072c:	40007000 	.word	0x40007000

08000730 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000736:	463b      	mov	r3, r7
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000742:	4b21      	ldr	r3, [pc, #132]	; (80007c8 <MX_ADC1_Init+0x98>)
 8000744:	4a21      	ldr	r2, [pc, #132]	; (80007cc <MX_ADC1_Init+0x9c>)
 8000746:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000748:	4b1f      	ldr	r3, [pc, #124]	; (80007c8 <MX_ADC1_Init+0x98>)
 800074a:	2200      	movs	r2, #0
 800074c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800074e:	4b1e      	ldr	r3, [pc, #120]	; (80007c8 <MX_ADC1_Init+0x98>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000754:	4b1c      	ldr	r3, [pc, #112]	; (80007c8 <MX_ADC1_Init+0x98>)
 8000756:	2200      	movs	r2, #0
 8000758:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800075a:	4b1b      	ldr	r3, [pc, #108]	; (80007c8 <MX_ADC1_Init+0x98>)
 800075c:	2201      	movs	r2, #1
 800075e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000760:	4b19      	ldr	r3, [pc, #100]	; (80007c8 <MX_ADC1_Init+0x98>)
 8000762:	2200      	movs	r2, #0
 8000764:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000768:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <MX_ADC1_Init+0x98>)
 800076a:	2200      	movs	r2, #0
 800076c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800076e:	4b16      	ldr	r3, [pc, #88]	; (80007c8 <MX_ADC1_Init+0x98>)
 8000770:	4a17      	ldr	r2, [pc, #92]	; (80007d0 <MX_ADC1_Init+0xa0>)
 8000772:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000774:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <MX_ADC1_Init+0x98>)
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800077a:	4b13      	ldr	r3, [pc, #76]	; (80007c8 <MX_ADC1_Init+0x98>)
 800077c:	2201      	movs	r2, #1
 800077e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000780:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_ADC1_Init+0x98>)
 8000782:	2200      	movs	r2, #0
 8000784:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000788:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <MX_ADC1_Init+0x98>)
 800078a:	2201      	movs	r2, #1
 800078c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800078e:	480e      	ldr	r0, [pc, #56]	; (80007c8 <MX_ADC1_Init+0x98>)
 8000790:	f000 fce2 	bl	8001158 <HAL_ADC_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800079a:	f000 f9b9 	bl	8000b10 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800079e:	2306      	movs	r3, #6
 80007a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007a2:	2301      	movs	r3, #1
 80007a4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007a6:	2300      	movs	r3, #0
 80007a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007aa:	463b      	mov	r3, r7
 80007ac:	4619      	mov	r1, r3
 80007ae:	4806      	ldr	r0, [pc, #24]	; (80007c8 <MX_ADC1_Init+0x98>)
 80007b0:	f000 fd16 	bl	80011e0 <HAL_ADC_ConfigChannel>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80007ba:	f000 f9a9 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007be:	bf00      	nop
 80007c0:	3710      	adds	r7, #16
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000030 	.word	0x20000030
 80007cc:	40012000 	.word	0x40012000
 80007d0:	0f000001 	.word	0x0f000001

080007d4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08a      	sub	sp, #40	; 0x28
 80007d8:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80007da:	4b26      	ldr	r3, [pc, #152]	; (8000874 <MX_CAN1_Init+0xa0>)
 80007dc:	4a26      	ldr	r2, [pc, #152]	; (8000878 <MX_CAN1_Init+0xa4>)
 80007de:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 8;
 80007e0:	4b24      	ldr	r3, [pc, #144]	; (8000874 <MX_CAN1_Init+0xa0>)
 80007e2:	2208      	movs	r2, #8
 80007e4:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80007e6:	4b23      	ldr	r3, [pc, #140]	; (8000874 <MX_CAN1_Init+0xa0>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007ec:	4b21      	ldr	r3, [pc, #132]	; (8000874 <MX_CAN1_Init+0xa0>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80007f2:	4b20      	ldr	r3, [pc, #128]	; (8000874 <MX_CAN1_Init+0xa0>)
 80007f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007f8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80007fa:	4b1e      	ldr	r3, [pc, #120]	; (8000874 <MX_CAN1_Init+0xa0>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000800:	4b1c      	ldr	r3, [pc, #112]	; (8000874 <MX_CAN1_Init+0xa0>)
 8000802:	2200      	movs	r2, #0
 8000804:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000806:	4b1b      	ldr	r3, [pc, #108]	; (8000874 <MX_CAN1_Init+0xa0>)
 8000808:	2200      	movs	r2, #0
 800080a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800080c:	4b19      	ldr	r3, [pc, #100]	; (8000874 <MX_CAN1_Init+0xa0>)
 800080e:	2200      	movs	r2, #0
 8000810:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000812:	4b18      	ldr	r3, [pc, #96]	; (8000874 <MX_CAN1_Init+0xa0>)
 8000814:	2200      	movs	r2, #0
 8000816:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000818:	4b16      	ldr	r3, [pc, #88]	; (8000874 <MX_CAN1_Init+0xa0>)
 800081a:	2200      	movs	r2, #0
 800081c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800081e:	4b15      	ldr	r3, [pc, #84]	; (8000874 <MX_CAN1_Init+0xa0>)
 8000820:	2200      	movs	r2, #0
 8000822:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000824:	4813      	ldr	r0, [pc, #76]	; (8000874 <MX_CAN1_Init+0xa0>)
 8000826:	f000 fef9 	bl	800161c <HAL_CAN_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000830:	f000 f96e 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

    canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000834:	2301      	movs	r3, #1
 8000836:	623b      	str	r3, [r7, #32]
    canfilterconfig.FilterBank = 4;  // which filter bank to use from the assigned ones
 8000838:	2304      	movs	r3, #4
 800083a:	617b      	str	r3, [r7, #20]
    canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800083c:	2300      	movs	r3, #0
 800083e:	613b      	str	r3, [r7, #16]
    canfilterconfig.FilterIdHigh =  0x012<<5;
 8000840:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000844:	603b      	str	r3, [r7, #0]
    canfilterconfig.FilterIdLow = 0;
 8000846:	2300      	movs	r3, #0
 8000848:	607b      	str	r3, [r7, #4]
    canfilterconfig.FilterMaskIdHigh =  0x012<<5;
 800084a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800084e:	60bb      	str	r3, [r7, #8]
    canfilterconfig.FilterMaskIdLow = 0;
 8000850:	2300      	movs	r3, #0
 8000852:	60fb      	str	r3, [r7, #12]
    canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000854:	2300      	movs	r3, #0
 8000856:	61bb      	str	r3, [r7, #24]
    canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000858:	2301      	movs	r3, #1
 800085a:	61fb      	str	r3, [r7, #28]
    canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 800085c:	2314      	movs	r3, #20
 800085e:	627b      	str	r3, [r7, #36]	; 0x24

    HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8000860:	463b      	mov	r3, r7
 8000862:	4619      	mov	r1, r3
 8000864:	4803      	ldr	r0, [pc, #12]	; (8000874 <MX_CAN1_Init+0xa0>)
 8000866:	f000 ffd5 	bl	8001814 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 800086a:	bf00      	nop
 800086c:	3728      	adds	r7, #40	; 0x28
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	20000078 	.word	0x20000078
 8000878:	40006400 	.word	0x40006400

0800087c <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08a      	sub	sp, #40	; 0x28
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000882:	4b26      	ldr	r3, [pc, #152]	; (800091c <MX_CAN2_Init+0xa0>)
 8000884:	4a26      	ldr	r2, [pc, #152]	; (8000920 <MX_CAN2_Init+0xa4>)
 8000886:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 8;
 8000888:	4b24      	ldr	r3, [pc, #144]	; (800091c <MX_CAN2_Init+0xa0>)
 800088a:	2208      	movs	r2, #8
 800088c:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 800088e:	4b23      	ldr	r3, [pc, #140]	; (800091c <MX_CAN2_Init+0xa0>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000894:	4b21      	ldr	r3, [pc, #132]	; (800091c <MX_CAN2_Init+0xa0>)
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 800089a:	4b20      	ldr	r3, [pc, #128]	; (800091c <MX_CAN2_Init+0xa0>)
 800089c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80008a0:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80008a2:	4b1e      	ldr	r3, [pc, #120]	; (800091c <MX_CAN2_Init+0xa0>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80008a8:	4b1c      	ldr	r3, [pc, #112]	; (800091c <MX_CAN2_Init+0xa0>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80008ae:	4b1b      	ldr	r3, [pc, #108]	; (800091c <MX_CAN2_Init+0xa0>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80008b4:	4b19      	ldr	r3, [pc, #100]	; (800091c <MX_CAN2_Init+0xa0>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80008ba:	4b18      	ldr	r3, [pc, #96]	; (800091c <MX_CAN2_Init+0xa0>)
 80008bc:	2200      	movs	r2, #0
 80008be:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80008c0:	4b16      	ldr	r3, [pc, #88]	; (800091c <MX_CAN2_Init+0xa0>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80008c6:	4b15      	ldr	r3, [pc, #84]	; (800091c <MX_CAN2_Init+0xa0>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80008cc:	4813      	ldr	r0, [pc, #76]	; (800091c <MX_CAN2_Init+0xa0>)
 80008ce:	f000 fea5 	bl	800161c <HAL_CAN_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 80008d8:	f000 f91a 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */
      CAN_FilterTypeDef canfilterconfig;

      canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80008dc:	2301      	movs	r3, #1
 80008de:	623b      	str	r3, [r7, #32]
      canfilterconfig.FilterBank = 25;  // which filter bank to use from the assigned ones
 80008e0:	2319      	movs	r3, #25
 80008e2:	617b      	str	r3, [r7, #20]
      canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 80008e4:	2301      	movs	r3, #1
 80008e6:	613b      	str	r3, [r7, #16]
      canfilterconfig.FilterIdHigh = 0x012<<5;
 80008e8:	f44f 7310 	mov.w	r3, #576	; 0x240
 80008ec:	603b      	str	r3, [r7, #0]
      canfilterconfig.FilterIdLow = 0;
 80008ee:	2300      	movs	r3, #0
 80008f0:	607b      	str	r3, [r7, #4]
      canfilterconfig.FilterMaskIdHigh = 0x012<<5;
 80008f2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80008f6:	60bb      	str	r3, [r7, #8]
      canfilterconfig.FilterMaskIdLow = 0;
 80008f8:	2300      	movs	r3, #0
 80008fa:	60fb      	str	r3, [r7, #12]
      canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80008fc:	2300      	movs	r3, #0
 80008fe:	61bb      	str	r3, [r7, #24]
      canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000900:	2301      	movs	r3, #1
 8000902:	61fb      	str	r3, [r7, #28]
      canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 8000904:	2314      	movs	r3, #20
 8000906:	627b      	str	r3, [r7, #36]	; 0x24

      HAL_CAN_ConfigFilter(&hcan2, &canfilterconfig);
 8000908:	463b      	mov	r3, r7
 800090a:	4619      	mov	r1, r3
 800090c:	4803      	ldr	r0, [pc, #12]	; (800091c <MX_CAN2_Init+0xa0>)
 800090e:	f000 ff81 	bl	8001814 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN2_Init 2 */

}
 8000912:	bf00      	nop
 8000914:	3728      	adds	r7, #40	; 0x28
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	200000a0 	.word	0x200000a0
 8000920:	40006800 	.word	0x40006800

08000924 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b086      	sub	sp, #24
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800092a:	f107 0308 	add.w	r3, r7, #8
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	609a      	str	r2, [r3, #8]
 8000936:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000938:	463b      	mov	r3, r7
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000940:	4b1d      	ldr	r3, [pc, #116]	; (80009b8 <MX_TIM2_Init+0x94>)
 8000942:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000946:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 8000948:	4b1b      	ldr	r3, [pc, #108]	; (80009b8 <MX_TIM2_Init+0x94>)
 800094a:	220f      	movs	r2, #15
 800094c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800094e:	4b1a      	ldr	r3, [pc, #104]	; (80009b8 <MX_TIM2_Init+0x94>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8000954:	4b18      	ldr	r3, [pc, #96]	; (80009b8 <MX_TIM2_Init+0x94>)
 8000956:	f242 720f 	movw	r2, #9999	; 0x270f
 800095a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800095c:	4b16      	ldr	r3, [pc, #88]	; (80009b8 <MX_TIM2_Init+0x94>)
 800095e:	2200      	movs	r2, #0
 8000960:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000962:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <MX_TIM2_Init+0x94>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000968:	4813      	ldr	r0, [pc, #76]	; (80009b8 <MX_TIM2_Init+0x94>)
 800096a:	f002 fcdf 	bl	800332c <HAL_TIM_Base_Init>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000974:	f000 f8cc 	bl	8000b10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000978:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800097c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800097e:	f107 0308 	add.w	r3, r7, #8
 8000982:	4619      	mov	r1, r3
 8000984:	480c      	ldr	r0, [pc, #48]	; (80009b8 <MX_TIM2_Init+0x94>)
 8000986:	f002 fe99 	bl	80036bc <HAL_TIM_ConfigClockSource>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000990:	f000 f8be 	bl	8000b10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000994:	2300      	movs	r3, #0
 8000996:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000998:	2300      	movs	r3, #0
 800099a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800099c:	463b      	mov	r3, r7
 800099e:	4619      	mov	r1, r3
 80009a0:	4805      	ldr	r0, [pc, #20]	; (80009b8 <MX_TIM2_Init+0x94>)
 80009a2:	f003 f8b5 	bl	8003b10 <HAL_TIMEx_MasterConfigSynchronization>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80009ac:	f000 f8b0 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009b0:	bf00      	nop
 80009b2:	3718      	adds	r7, #24
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	200000c8 	.word	0x200000c8

080009bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009c0:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <MX_USART2_UART_Init+0x4c>)
 80009c2:	4a12      	ldr	r2, [pc, #72]	; (8000a0c <MX_USART2_UART_Init+0x50>)
 80009c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80009c6:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <MX_USART2_UART_Init+0x4c>)
 80009c8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ce:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <MX_USART2_UART_Init+0x4c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009d4:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <MX_USART2_UART_Init+0x4c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009da:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <MX_USART2_UART_Init+0x4c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009e0:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <MX_USART2_UART_Init+0x4c>)
 80009e2:	220c      	movs	r2, #12
 80009e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e6:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <MX_USART2_UART_Init+0x4c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <MX_USART2_UART_Init+0x4c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009f2:	4805      	ldr	r0, [pc, #20]	; (8000a08 <MX_USART2_UART_Init+0x4c>)
 80009f4:	f003 f91c 	bl	8003c30 <HAL_UART_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009fe:	f000 f887 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000110 	.word	0x20000110
 8000a0c:	40004400 	.word	0x40004400

08000a10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08a      	sub	sp, #40	; 0x28
 8000a14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a16:	f107 0314 	add.w	r3, r7, #20
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	609a      	str	r2, [r3, #8]
 8000a22:	60da      	str	r2, [r3, #12]
 8000a24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	613b      	str	r3, [r7, #16]
 8000a2a:	4b31      	ldr	r3, [pc, #196]	; (8000af0 <MX_GPIO_Init+0xe0>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4a30      	ldr	r2, [pc, #192]	; (8000af0 <MX_GPIO_Init+0xe0>)
 8000a30:	f043 0304 	orr.w	r3, r3, #4
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
 8000a36:	4b2e      	ldr	r3, [pc, #184]	; (8000af0 <MX_GPIO_Init+0xe0>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	f003 0304 	and.w	r3, r3, #4
 8000a3e:	613b      	str	r3, [r7, #16]
 8000a40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	4b2a      	ldr	r3, [pc, #168]	; (8000af0 <MX_GPIO_Init+0xe0>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a29      	ldr	r2, [pc, #164]	; (8000af0 <MX_GPIO_Init+0xe0>)
 8000a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b27      	ldr	r3, [pc, #156]	; (8000af0 <MX_GPIO_Init+0xe0>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60bb      	str	r3, [r7, #8]
 8000a62:	4b23      	ldr	r3, [pc, #140]	; (8000af0 <MX_GPIO_Init+0xe0>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a22      	ldr	r2, [pc, #136]	; (8000af0 <MX_GPIO_Init+0xe0>)
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6e:	4b20      	ldr	r3, [pc, #128]	; (8000af0 <MX_GPIO_Init+0xe0>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	60bb      	str	r3, [r7, #8]
 8000a78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	607b      	str	r3, [r7, #4]
 8000a7e:	4b1c      	ldr	r3, [pc, #112]	; (8000af0 <MX_GPIO_Init+0xe0>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a1b      	ldr	r2, [pc, #108]	; (8000af0 <MX_GPIO_Init+0xe0>)
 8000a84:	f043 0302 	orr.w	r3, r3, #2
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b19      	ldr	r3, [pc, #100]	; (8000af0 <MX_GPIO_Init+0xe0>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f003 0302 	and.w	r3, r3, #2
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	210f      	movs	r1, #15
 8000a9a:	4816      	ldr	r0, [pc, #88]	; (8000af4 <MX_GPIO_Init+0xe4>)
 8000a9c:	f001 ff96 	bl	80029cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000aa0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aa6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000aaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4810      	ldr	r0, [pc, #64]	; (8000af8 <MX_GPIO_Init+0xe8>)
 8000ab8:	f001 fdec 	bl	8002694 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000abc:	230f      	movs	r3, #15
 8000abe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4808      	ldr	r0, [pc, #32]	; (8000af4 <MX_GPIO_Init+0xe4>)
 8000ad4:	f001 fdde 	bl	8002694 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2100      	movs	r1, #0
 8000adc:	2028      	movs	r0, #40	; 0x28
 8000ade:	f001 fd10 	bl	8002502 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ae2:	2028      	movs	r0, #40	; 0x28
 8000ae4:	f001 fd29 	bl	800253a <HAL_NVIC_EnableIRQ>

}
 8000ae8:	bf00      	nop
 8000aea:	3728      	adds	r7, #40	; 0x28
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40023800 	.word	0x40023800
 8000af4:	40020400 	.word	0x40020400
 8000af8:	40020800 	.word	0x40020800

08000afc <HAL_TIM_PeriodElapsedCallback>:
	    }

	    return remainder ^ 0xFF; // Invert the bits
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
//  if(htim->Instance == TIM2){
//		button_reading();
//		SCH_Update();
//	}
	timerRun();
 8000b04:	f000 fa24 	bl	8000f50 <timerRun>

}
 8000b08:	bf00      	nop
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b14:	b672      	cpsid	i
}
 8000b16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <Error_Handler+0x8>
	...

08000b1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	607b      	str	r3, [r7, #4]
 8000b26:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2a:	4a0f      	ldr	r2, [pc, #60]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b30:	6453      	str	r3, [r2, #68]	; 0x44
 8000b32:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	603b      	str	r3, [r7, #0]
 8000b42:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b46:	4a08      	ldr	r2, [pc, #32]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b4e:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b56:	603b      	str	r3, [r7, #0]
 8000b58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	40023800 	.word	0x40023800

08000b6c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08a      	sub	sp, #40	; 0x28
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a17      	ldr	r2, [pc, #92]	; (8000be8 <HAL_ADC_MspInit+0x7c>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d127      	bne.n	8000bde <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	613b      	str	r3, [r7, #16]
 8000b92:	4b16      	ldr	r3, [pc, #88]	; (8000bec <HAL_ADC_MspInit+0x80>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b96:	4a15      	ldr	r2, [pc, #84]	; (8000bec <HAL_ADC_MspInit+0x80>)
 8000b98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b9e:	4b13      	ldr	r3, [pc, #76]	; (8000bec <HAL_ADC_MspInit+0x80>)
 8000ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ba6:	613b      	str	r3, [r7, #16]
 8000ba8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	60fb      	str	r3, [r7, #12]
 8000bae:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <HAL_ADC_MspInit+0x80>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a0e      	ldr	r2, [pc, #56]	; (8000bec <HAL_ADC_MspInit+0x80>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <HAL_ADC_MspInit+0x80>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000bc6:	2340      	movs	r3, #64	; 0x40
 8000bc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bca:	2303      	movs	r3, #3
 8000bcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd2:	f107 0314 	add.w	r3, r7, #20
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4805      	ldr	r0, [pc, #20]	; (8000bf0 <HAL_ADC_MspInit+0x84>)
 8000bda:	f001 fd5b 	bl	8002694 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000bde:	bf00      	nop
 8000be0:	3728      	adds	r7, #40	; 0x28
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40012000 	.word	0x40012000
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	40020000 	.word	0x40020000

08000bf4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08c      	sub	sp, #48	; 0x30
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 031c 	add.w	r3, r7, #28
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a4a      	ldr	r2, [pc, #296]	; (8000d3c <HAL_CAN_MspInit+0x148>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d13e      	bne.n	8000c94 <HAL_CAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000c16:	4b4a      	ldr	r3, [pc, #296]	; (8000d40 <HAL_CAN_MspInit+0x14c>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	4a48      	ldr	r2, [pc, #288]	; (8000d40 <HAL_CAN_MspInit+0x14c>)
 8000c1e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000c20:	4b47      	ldr	r3, [pc, #284]	; (8000d40 <HAL_CAN_MspInit+0x14c>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d10d      	bne.n	8000c44 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000c28:	2300      	movs	r3, #0
 8000c2a:	61bb      	str	r3, [r7, #24]
 8000c2c:	4b45      	ldr	r3, [pc, #276]	; (8000d44 <HAL_CAN_MspInit+0x150>)
 8000c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c30:	4a44      	ldr	r2, [pc, #272]	; (8000d44 <HAL_CAN_MspInit+0x150>)
 8000c32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c36:	6413      	str	r3, [r2, #64]	; 0x40
 8000c38:	4b42      	ldr	r3, [pc, #264]	; (8000d44 <HAL_CAN_MspInit+0x150>)
 8000c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c40:	61bb      	str	r3, [r7, #24]
 8000c42:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]
 8000c48:	4b3e      	ldr	r3, [pc, #248]	; (8000d44 <HAL_CAN_MspInit+0x150>)
 8000c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4c:	4a3d      	ldr	r2, [pc, #244]	; (8000d44 <HAL_CAN_MspInit+0x150>)
 8000c4e:	f043 0301 	orr.w	r3, r3, #1
 8000c52:	6313      	str	r3, [r2, #48]	; 0x30
 8000c54:	4b3b      	ldr	r3, [pc, #236]	; (8000d44 <HAL_CAN_MspInit+0x150>)
 8000c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c58:	f003 0301 	and.w	r3, r3, #1
 8000c5c:	617b      	str	r3, [r7, #20]
 8000c5e:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000c60:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c66:	2302      	movs	r3, #2
 8000c68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6e:	2303      	movs	r3, #3
 8000c70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000c72:	2309      	movs	r3, #9
 8000c74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c76:	f107 031c 	add.w	r3, r7, #28
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4832      	ldr	r0, [pc, #200]	; (8000d48 <HAL_CAN_MspInit+0x154>)
 8000c7e:	f001 fd09 	bl	8002694 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2100      	movs	r1, #0
 8000c86:	2014      	movs	r0, #20
 8000c88:	f001 fc3b 	bl	8002502 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000c8c:	2014      	movs	r0, #20
 8000c8e:	f001 fc54 	bl	800253a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000c92:	e04f      	b.n	8000d34 <HAL_CAN_MspInit+0x140>
  else if(hcan->Instance==CAN2)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a2c      	ldr	r2, [pc, #176]	; (8000d4c <HAL_CAN_MspInit+0x158>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d14a      	bne.n	8000d34 <HAL_CAN_MspInit+0x140>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	613b      	str	r3, [r7, #16]
 8000ca2:	4b28      	ldr	r3, [pc, #160]	; (8000d44 <HAL_CAN_MspInit+0x150>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca6:	4a27      	ldr	r2, [pc, #156]	; (8000d44 <HAL_CAN_MspInit+0x150>)
 8000ca8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000cac:	6413      	str	r3, [r2, #64]	; 0x40
 8000cae:	4b25      	ldr	r3, [pc, #148]	; (8000d44 <HAL_CAN_MspInit+0x150>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000cba:	4b21      	ldr	r3, [pc, #132]	; (8000d40 <HAL_CAN_MspInit+0x14c>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	4a1f      	ldr	r2, [pc, #124]	; (8000d40 <HAL_CAN_MspInit+0x14c>)
 8000cc2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000cc4:	4b1e      	ldr	r3, [pc, #120]	; (8000d40 <HAL_CAN_MspInit+0x14c>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d10d      	bne.n	8000ce8 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	4b1c      	ldr	r3, [pc, #112]	; (8000d44 <HAL_CAN_MspInit+0x150>)
 8000cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd4:	4a1b      	ldr	r2, [pc, #108]	; (8000d44 <HAL_CAN_MspInit+0x150>)
 8000cd6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cda:	6413      	str	r3, [r2, #64]	; 0x40
 8000cdc:	4b19      	ldr	r3, [pc, #100]	; (8000d44 <HAL_CAN_MspInit+0x150>)
 8000cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce8:	2300      	movs	r3, #0
 8000cea:	60bb      	str	r3, [r7, #8]
 8000cec:	4b15      	ldr	r3, [pc, #84]	; (8000d44 <HAL_CAN_MspInit+0x150>)
 8000cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf0:	4a14      	ldr	r2, [pc, #80]	; (8000d44 <HAL_CAN_MspInit+0x150>)
 8000cf2:	f043 0302 	orr.w	r3, r3, #2
 8000cf6:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf8:	4b12      	ldr	r3, [pc, #72]	; (8000d44 <HAL_CAN_MspInit+0x150>)
 8000cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfc:	f003 0302 	and.w	r3, r3, #2
 8000d00:	60bb      	str	r3, [r7, #8]
 8000d02:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000d04:	2360      	movs	r3, #96	; 0x60
 8000d06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d10:	2303      	movs	r3, #3
 8000d12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000d14:	2309      	movs	r3, #9
 8000d16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d18:	f107 031c 	add.w	r3, r7, #28
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	480c      	ldr	r0, [pc, #48]	; (8000d50 <HAL_CAN_MspInit+0x15c>)
 8000d20:	f001 fcb8 	bl	8002694 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2100      	movs	r1, #0
 8000d28:	2041      	movs	r0, #65	; 0x41
 8000d2a:	f001 fbea 	bl	8002502 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8000d2e:	2041      	movs	r0, #65	; 0x41
 8000d30:	f001 fc03 	bl	800253a <HAL_NVIC_EnableIRQ>
}
 8000d34:	bf00      	nop
 8000d36:	3730      	adds	r7, #48	; 0x30
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40006400 	.word	0x40006400
 8000d40:	200001bc 	.word	0x200001bc
 8000d44:	40023800 	.word	0x40023800
 8000d48:	40020000 	.word	0x40020000
 8000d4c:	40006800 	.word	0x40006800
 8000d50:	40020400 	.word	0x40020400

08000d54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d64:	d115      	bne.n	8000d92 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <HAL_TIM_Base_MspInit+0x48>)
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6e:	4a0b      	ldr	r2, [pc, #44]	; (8000d9c <HAL_TIM_Base_MspInit+0x48>)
 8000d70:	f043 0301 	orr.w	r3, r3, #1
 8000d74:	6413      	str	r3, [r2, #64]	; 0x40
 8000d76:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <HAL_TIM_Base_MspInit+0x48>)
 8000d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d82:	2200      	movs	r2, #0
 8000d84:	2100      	movs	r1, #0
 8000d86:	201c      	movs	r0, #28
 8000d88:	f001 fbbb 	bl	8002502 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d8c:	201c      	movs	r0, #28
 8000d8e:	f001 fbd4 	bl	800253a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d92:	bf00      	nop
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40023800 	.word	0x40023800

08000da0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08a      	sub	sp, #40	; 0x28
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a1d      	ldr	r2, [pc, #116]	; (8000e34 <HAL_UART_MspInit+0x94>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d133      	bne.n	8000e2a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	613b      	str	r3, [r7, #16]
 8000dc6:	4b1c      	ldr	r3, [pc, #112]	; (8000e38 <HAL_UART_MspInit+0x98>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dca:	4a1b      	ldr	r2, [pc, #108]	; (8000e38 <HAL_UART_MspInit+0x98>)
 8000dcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd2:	4b19      	ldr	r3, [pc, #100]	; (8000e38 <HAL_UART_MspInit+0x98>)
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dda:	613b      	str	r3, [r7, #16]
 8000ddc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <HAL_UART_MspInit+0x98>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	4a14      	ldr	r2, [pc, #80]	; (8000e38 <HAL_UART_MspInit+0x98>)
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	6313      	str	r3, [r2, #48]	; 0x30
 8000dee:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <HAL_UART_MspInit+0x98>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000dfa:	230c      	movs	r3, #12
 8000dfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e06:	2303      	movs	r3, #3
 8000e08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e0a:	2307      	movs	r3, #7
 8000e0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0e:	f107 0314 	add.w	r3, r7, #20
 8000e12:	4619      	mov	r1, r3
 8000e14:	4809      	ldr	r0, [pc, #36]	; (8000e3c <HAL_UART_MspInit+0x9c>)
 8000e16:	f001 fc3d 	bl	8002694 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	2026      	movs	r0, #38	; 0x26
 8000e20:	f001 fb6f 	bl	8002502 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e24:	2026      	movs	r0, #38	; 0x26
 8000e26:	f001 fb88 	bl	800253a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e2a:	bf00      	nop
 8000e2c:	3728      	adds	r7, #40	; 0x28
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40004400 	.word	0x40004400
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40020000 	.word	0x40020000

08000e40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <NMI_Handler+0x4>

08000e46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e4a:	e7fe      	b.n	8000e4a <HardFault_Handler+0x4>

08000e4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e50:	e7fe      	b.n	8000e50 <MemManage_Handler+0x4>

08000e52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e56:	e7fe      	b.n	8000e56 <BusFault_Handler+0x4>

08000e58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e5c:	e7fe      	b.n	8000e5c <UsageFault_Handler+0x4>

08000e5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr

08000e7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e8c:	f000 f920 	bl	80010d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000e98:	4802      	ldr	r0, [pc, #8]	; (8000ea4 <CAN1_RX0_IRQHandler+0x10>)
 8000e9a:	f001 f827 	bl	8001eec <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000078 	.word	0x20000078

08000ea8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000eac:	4802      	ldr	r0, [pc, #8]	; (8000eb8 <TIM2_IRQHandler+0x10>)
 8000eae:	f002 fafd 	bl	80034ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	200000c8 	.word	0x200000c8

08000ebc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ec0:	4802      	ldr	r0, [pc, #8]	; (8000ecc <USART2_IRQHandler+0x10>)
 8000ec2:	f002 ffc5 	bl	8003e50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000110 	.word	0x20000110

08000ed0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000ed4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ed8:	f001 fdac 	bl	8002a34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000edc:	bf00      	nop
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000ee4:	4802      	ldr	r0, [pc, #8]	; (8000ef0 <CAN2_RX1_IRQHandler+0x10>)
 8000ee6:	f001 f801 	bl	8001eec <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	200000a0 	.word	0x200000a0

08000ef4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <SystemInit+0x20>)
 8000efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000efe:	4a05      	ldr	r2, [pc, #20]	; (8000f14 <SystemInit+0x20>)
 8000f00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <setTimer2>:
void setTimer1 (int duration) {
	timer1_counter = duration/Timer_Cycle;
	timer1_flag = 0;
}

void setTimer2 (int duration) {
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/Timer_Cycle;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4a08      	ldr	r2, [pc, #32]	; (8000f44 <setTimer2+0x2c>)
 8000f24:	fb82 1203 	smull	r1, r2, r2, r3
 8000f28:	1092      	asrs	r2, r2, #2
 8000f2a:	17db      	asrs	r3, r3, #31
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	4a06      	ldr	r2, [pc, #24]	; (8000f48 <setTimer2+0x30>)
 8000f30:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000f32:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <setTimer2+0x34>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
}
 8000f38:	bf00      	nop
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	66666667 	.word	0x66666667
 8000f48:	200001c4 	.word	0x200001c4
 8000f4c:	200001d0 	.word	0x200001d0

08000f50 <timerRun>:
void setTimer3 (int duration) {
	timer3_counter = duration/Timer_Cycle;
	timer3_flag = 0;
}

void timerRun(){
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
	if(timer1_counter > 0) {
 8000f54:	4b1a      	ldr	r3, [pc, #104]	; (8000fc0 <timerRun+0x70>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	dd0b      	ble.n	8000f74 <timerRun+0x24>
		timer1_counter--;
 8000f5c:	4b18      	ldr	r3, [pc, #96]	; (8000fc0 <timerRun+0x70>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	3b01      	subs	r3, #1
 8000f62:	4a17      	ldr	r2, [pc, #92]	; (8000fc0 <timerRun+0x70>)
 8000f64:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0) {
 8000f66:	4b16      	ldr	r3, [pc, #88]	; (8000fc0 <timerRun+0x70>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	dc02      	bgt.n	8000f74 <timerRun+0x24>
			timer1_flag = 1;
 8000f6e:	4b15      	ldr	r3, [pc, #84]	; (8000fc4 <timerRun+0x74>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0) {
 8000f74:	4b14      	ldr	r3, [pc, #80]	; (8000fc8 <timerRun+0x78>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	dd0b      	ble.n	8000f94 <timerRun+0x44>
		timer2_counter--;
 8000f7c:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <timerRun+0x78>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	3b01      	subs	r3, #1
 8000f82:	4a11      	ldr	r2, [pc, #68]	; (8000fc8 <timerRun+0x78>)
 8000f84:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0) {
 8000f86:	4b10      	ldr	r3, [pc, #64]	; (8000fc8 <timerRun+0x78>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	dc02      	bgt.n	8000f94 <timerRun+0x44>
			timer2_flag = 1;
 8000f8e:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <timerRun+0x7c>)
 8000f90:	2201      	movs	r2, #1
 8000f92:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0) {
 8000f94:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <timerRun+0x80>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	dd0b      	ble.n	8000fb4 <timerRun+0x64>
		timer3_counter--;
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <timerRun+0x80>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	3b01      	subs	r3, #1
 8000fa2:	4a0b      	ldr	r2, [pc, #44]	; (8000fd0 <timerRun+0x80>)
 8000fa4:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0) {
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	; (8000fd0 <timerRun+0x80>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	dc02      	bgt.n	8000fb4 <timerRun+0x64>
			timer3_flag = 1;
 8000fae:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <timerRun+0x84>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	200001c0 	.word	0x200001c0
 8000fc4:	200001cc 	.word	0x200001cc
 8000fc8:	200001c4 	.word	0x200001c4
 8000fcc:	200001d0 	.word	0x200001d0
 8000fd0:	200001c8 	.word	0x200001c8
 8000fd4:	200001d4 	.word	0x200001d4

08000fd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000fd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001010 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fdc:	480d      	ldr	r0, [pc, #52]	; (8001014 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fde:	490e      	ldr	r1, [pc, #56]	; (8001018 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fe0:	4a0e      	ldr	r2, [pc, #56]	; (800101c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fe2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fe4:	e002      	b.n	8000fec <LoopCopyDataInit>

08000fe6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fe6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fea:	3304      	adds	r3, #4

08000fec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ff0:	d3f9      	bcc.n	8000fe6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ff2:	4a0b      	ldr	r2, [pc, #44]	; (8001020 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ff4:	4c0b      	ldr	r4, [pc, #44]	; (8001024 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ff6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff8:	e001      	b.n	8000ffe <LoopFillZerobss>

08000ffa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ffa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ffc:	3204      	adds	r2, #4

08000ffe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ffe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001000:	d3fb      	bcc.n	8000ffa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001002:	f7ff ff77 	bl	8000ef4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001006:	f003 fe8b 	bl	8004d20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800100a:	f7ff fab5 	bl	8000578 <main>
  bx  lr    
 800100e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001010:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001014:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001018:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800101c:	08004db8 	.word	0x08004db8
  ldr r2, =_sbss
 8001020:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001024:	200001dc 	.word	0x200001dc

08001028 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001028:	e7fe      	b.n	8001028 <ADC_IRQHandler>
	...

0800102c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001030:	4b0e      	ldr	r3, [pc, #56]	; (800106c <HAL_Init+0x40>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a0d      	ldr	r2, [pc, #52]	; (800106c <HAL_Init+0x40>)
 8001036:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800103a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800103c:	4b0b      	ldr	r3, [pc, #44]	; (800106c <HAL_Init+0x40>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a0a      	ldr	r2, [pc, #40]	; (800106c <HAL_Init+0x40>)
 8001042:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001046:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001048:	4b08      	ldr	r3, [pc, #32]	; (800106c <HAL_Init+0x40>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a07      	ldr	r2, [pc, #28]	; (800106c <HAL_Init+0x40>)
 800104e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001052:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001054:	2003      	movs	r0, #3
 8001056:	f001 fa49 	bl	80024ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800105a:	200f      	movs	r0, #15
 800105c:	f000 f808 	bl	8001070 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001060:	f7ff fd5c 	bl	8000b1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40023c00 	.word	0x40023c00

08001070 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001078:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <HAL_InitTick+0x54>)
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <HAL_InitTick+0x58>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	4619      	mov	r1, r3
 8001082:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001086:	fbb3 f3f1 	udiv	r3, r3, r1
 800108a:	fbb2 f3f3 	udiv	r3, r2, r3
 800108e:	4618      	mov	r0, r3
 8001090:	f001 fa61 	bl	8002556 <HAL_SYSTICK_Config>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e00e      	b.n	80010bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2b0f      	cmp	r3, #15
 80010a2:	d80a      	bhi.n	80010ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010a4:	2200      	movs	r2, #0
 80010a6:	6879      	ldr	r1, [r7, #4]
 80010a8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ac:	f001 fa29 	bl	8002502 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010b0:	4a06      	ldr	r2, [pc, #24]	; (80010cc <HAL_InitTick+0x5c>)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010b6:	2300      	movs	r3, #0
 80010b8:	e000      	b.n	80010bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20000000 	.word	0x20000000
 80010c8:	20000008 	.word	0x20000008
 80010cc:	20000004 	.word	0x20000004

080010d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <HAL_IncTick+0x20>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	461a      	mov	r2, r3
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <HAL_IncTick+0x24>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4413      	add	r3, r2
 80010e0:	4a04      	ldr	r2, [pc, #16]	; (80010f4 <HAL_IncTick+0x24>)
 80010e2:	6013      	str	r3, [r2, #0]
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	20000008 	.word	0x20000008
 80010f4:	200001d8 	.word	0x200001d8

080010f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return uwTick;
 80010fc:	4b03      	ldr	r3, [pc, #12]	; (800110c <HAL_GetTick+0x14>)
 80010fe:	681b      	ldr	r3, [r3, #0]
}
 8001100:	4618      	mov	r0, r3
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	200001d8 	.word	0x200001d8

08001110 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001118:	f7ff ffee 	bl	80010f8 <HAL_GetTick>
 800111c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001128:	d005      	beq.n	8001136 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800112a:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <HAL_Delay+0x44>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	461a      	mov	r2, r3
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	4413      	add	r3, r2
 8001134:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001136:	bf00      	nop
 8001138:	f7ff ffde 	bl	80010f8 <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	68fa      	ldr	r2, [r7, #12]
 8001144:	429a      	cmp	r2, r3
 8001146:	d8f7      	bhi.n	8001138 <HAL_Delay+0x28>
  {
  }
}
 8001148:	bf00      	nop
 800114a:	bf00      	nop
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000008 	.word	0x20000008

08001158 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001160:	2300      	movs	r3, #0
 8001162:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d101      	bne.n	800116e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e033      	b.n	80011d6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	2b00      	cmp	r3, #0
 8001174:	d109      	bne.n	800118a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f7ff fcf8 	bl	8000b6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2200      	movs	r2, #0
 8001180:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	f003 0310 	and.w	r3, r3, #16
 8001192:	2b00      	cmp	r3, #0
 8001194:	d118      	bne.n	80011c8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800119e:	f023 0302 	bic.w	r3, r3, #2
 80011a2:	f043 0202 	orr.w	r2, r3, #2
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f000 f93a 	bl	8001424 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2200      	movs	r2, #0
 80011b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	f023 0303 	bic.w	r3, r3, #3
 80011be:	f043 0201 	orr.w	r2, r3, #1
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	641a      	str	r2, [r3, #64]	; 0x40
 80011c6:	e001      	b.n	80011cc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2200      	movs	r2, #0
 80011d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
	...

080011e0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80011ea:	2300      	movs	r3, #0
 80011ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d101      	bne.n	80011fc <HAL_ADC_ConfigChannel+0x1c>
 80011f8:	2302      	movs	r3, #2
 80011fa:	e105      	b.n	8001408 <HAL_ADC_ConfigChannel+0x228>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2201      	movs	r2, #1
 8001200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2b09      	cmp	r3, #9
 800120a:	d925      	bls.n	8001258 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	68d9      	ldr	r1, [r3, #12]
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	b29b      	uxth	r3, r3
 8001218:	461a      	mov	r2, r3
 800121a:	4613      	mov	r3, r2
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	4413      	add	r3, r2
 8001220:	3b1e      	subs	r3, #30
 8001222:	2207      	movs	r2, #7
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43da      	mvns	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	400a      	ands	r2, r1
 8001230:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	68d9      	ldr	r1, [r3, #12]
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	689a      	ldr	r2, [r3, #8]
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	b29b      	uxth	r3, r3
 8001242:	4618      	mov	r0, r3
 8001244:	4603      	mov	r3, r0
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	4403      	add	r3, r0
 800124a:	3b1e      	subs	r3, #30
 800124c:	409a      	lsls	r2, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	430a      	orrs	r2, r1
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	e022      	b.n	800129e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	6919      	ldr	r1, [r3, #16]
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	b29b      	uxth	r3, r3
 8001264:	461a      	mov	r2, r3
 8001266:	4613      	mov	r3, r2
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	4413      	add	r3, r2
 800126c:	2207      	movs	r2, #7
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43da      	mvns	r2, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	400a      	ands	r2, r1
 800127a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	6919      	ldr	r1, [r3, #16]
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	689a      	ldr	r2, [r3, #8]
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	b29b      	uxth	r3, r3
 800128c:	4618      	mov	r0, r3
 800128e:	4603      	mov	r3, r0
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	4403      	add	r3, r0
 8001294:	409a      	lsls	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	430a      	orrs	r2, r1
 800129c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	2b06      	cmp	r3, #6
 80012a4:	d824      	bhi.n	80012f0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685a      	ldr	r2, [r3, #4]
 80012b0:	4613      	mov	r3, r2
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	4413      	add	r3, r2
 80012b6:	3b05      	subs	r3, #5
 80012b8:	221f      	movs	r2, #31
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43da      	mvns	r2, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	400a      	ands	r2, r1
 80012c6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	4618      	mov	r0, r3
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685a      	ldr	r2, [r3, #4]
 80012da:	4613      	mov	r3, r2
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	4413      	add	r3, r2
 80012e0:	3b05      	subs	r3, #5
 80012e2:	fa00 f203 	lsl.w	r2, r0, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	430a      	orrs	r2, r1
 80012ec:	635a      	str	r2, [r3, #52]	; 0x34
 80012ee:	e04c      	b.n	800138a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	2b0c      	cmp	r3, #12
 80012f6:	d824      	bhi.n	8001342 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685a      	ldr	r2, [r3, #4]
 8001302:	4613      	mov	r3, r2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	4413      	add	r3, r2
 8001308:	3b23      	subs	r3, #35	; 0x23
 800130a:	221f      	movs	r2, #31
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	43da      	mvns	r2, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	400a      	ands	r2, r1
 8001318:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	b29b      	uxth	r3, r3
 8001326:	4618      	mov	r0, r3
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685a      	ldr	r2, [r3, #4]
 800132c:	4613      	mov	r3, r2
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	4413      	add	r3, r2
 8001332:	3b23      	subs	r3, #35	; 0x23
 8001334:	fa00 f203 	lsl.w	r2, r0, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	430a      	orrs	r2, r1
 800133e:	631a      	str	r2, [r3, #48]	; 0x30
 8001340:	e023      	b.n	800138a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685a      	ldr	r2, [r3, #4]
 800134c:	4613      	mov	r3, r2
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	4413      	add	r3, r2
 8001352:	3b41      	subs	r3, #65	; 0x41
 8001354:	221f      	movs	r2, #31
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	43da      	mvns	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	400a      	ands	r2, r1
 8001362:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	b29b      	uxth	r3, r3
 8001370:	4618      	mov	r0, r3
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685a      	ldr	r2, [r3, #4]
 8001376:	4613      	mov	r3, r2
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	4413      	add	r3, r2
 800137c:	3b41      	subs	r3, #65	; 0x41
 800137e:	fa00 f203 	lsl.w	r2, r0, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	430a      	orrs	r2, r1
 8001388:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800138a:	4b22      	ldr	r3, [pc, #136]	; (8001414 <HAL_ADC_ConfigChannel+0x234>)
 800138c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a21      	ldr	r2, [pc, #132]	; (8001418 <HAL_ADC_ConfigChannel+0x238>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d109      	bne.n	80013ac <HAL_ADC_ConfigChannel+0x1cc>
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2b12      	cmp	r3, #18
 800139e:	d105      	bne.n	80013ac <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a19      	ldr	r2, [pc, #100]	; (8001418 <HAL_ADC_ConfigChannel+0x238>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d123      	bne.n	80013fe <HAL_ADC_ConfigChannel+0x21e>
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2b10      	cmp	r3, #16
 80013bc:	d003      	beq.n	80013c6 <HAL_ADC_ConfigChannel+0x1e6>
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2b11      	cmp	r3, #17
 80013c4:	d11b      	bne.n	80013fe <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2b10      	cmp	r3, #16
 80013d8:	d111      	bne.n	80013fe <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013da:	4b10      	ldr	r3, [pc, #64]	; (800141c <HAL_ADC_ConfigChannel+0x23c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a10      	ldr	r2, [pc, #64]	; (8001420 <HAL_ADC_ConfigChannel+0x240>)
 80013e0:	fba2 2303 	umull	r2, r3, r2, r3
 80013e4:	0c9a      	lsrs	r2, r3, #18
 80013e6:	4613      	mov	r3, r2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	4413      	add	r3, r2
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80013f0:	e002      	b.n	80013f8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	3b01      	subs	r3, #1
 80013f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1f9      	bne.n	80013f2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001406:	2300      	movs	r3, #0
}
 8001408:	4618      	mov	r0, r3
 800140a:	3714      	adds	r7, #20
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	40012300 	.word	0x40012300
 8001418:	40012000 	.word	0x40012000
 800141c:	20000000 	.word	0x20000000
 8001420:	431bde83 	.word	0x431bde83

08001424 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800142c:	4b79      	ldr	r3, [pc, #484]	; (8001614 <ADC_Init+0x1f0>)
 800142e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	685a      	ldr	r2, [r3, #4]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	431a      	orrs	r2, r3
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	685a      	ldr	r2, [r3, #4]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001458:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	6859      	ldr	r1, [r3, #4]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	691b      	ldr	r3, [r3, #16]
 8001464:	021a      	lsls	r2, r3, #8
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	430a      	orrs	r2, r1
 800146c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	685a      	ldr	r2, [r3, #4]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800147c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	6859      	ldr	r1, [r3, #4]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689a      	ldr	r2, [r3, #8]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	430a      	orrs	r2, r1
 800148e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	689a      	ldr	r2, [r3, #8]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800149e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	6899      	ldr	r1, [r3, #8]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	68da      	ldr	r2, [r3, #12]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	430a      	orrs	r2, r1
 80014b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b6:	4a58      	ldr	r2, [pc, #352]	; (8001618 <ADC_Init+0x1f4>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d022      	beq.n	8001502 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	689a      	ldr	r2, [r3, #8]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	6899      	ldr	r1, [r3, #8]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	430a      	orrs	r2, r1
 80014dc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	689a      	ldr	r2, [r3, #8]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80014ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	6899      	ldr	r1, [r3, #8]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	430a      	orrs	r2, r1
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	e00f      	b.n	8001522 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	689a      	ldr	r2, [r3, #8]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001510:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	689a      	ldr	r2, [r3, #8]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001520:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	689a      	ldr	r2, [r3, #8]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f022 0202 	bic.w	r2, r2, #2
 8001530:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	6899      	ldr	r1, [r3, #8]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	7e1b      	ldrb	r3, [r3, #24]
 800153c:	005a      	lsls	r2, r3, #1
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	430a      	orrs	r2, r1
 8001544:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f893 3020 	ldrb.w	r3, [r3, #32]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d01b      	beq.n	8001588 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	685a      	ldr	r2, [r3, #4]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800155e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	685a      	ldr	r2, [r3, #4]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800156e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	6859      	ldr	r1, [r3, #4]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157a:	3b01      	subs	r3, #1
 800157c:	035a      	lsls	r2, r3, #13
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	430a      	orrs	r2, r1
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	e007      	b.n	8001598 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	685a      	ldr	r2, [r3, #4]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001596:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80015a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	69db      	ldr	r3, [r3, #28]
 80015b2:	3b01      	subs	r3, #1
 80015b4:	051a      	lsls	r2, r3, #20
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	430a      	orrs	r2, r1
 80015bc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	689a      	ldr	r2, [r3, #8]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80015cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	6899      	ldr	r1, [r3, #8]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80015da:	025a      	lsls	r2, r3, #9
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	430a      	orrs	r2, r1
 80015e2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	689a      	ldr	r2, [r3, #8]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	6899      	ldr	r1, [r3, #8]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	695b      	ldr	r3, [r3, #20]
 80015fe:	029a      	lsls	r2, r3, #10
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	430a      	orrs	r2, r1
 8001606:	609a      	str	r2, [r3, #8]
}
 8001608:	bf00      	nop
 800160a:	3714      	adds	r7, #20
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	40012300 	.word	0x40012300
 8001618:	0f000001 	.word	0x0f000001

0800161c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d101      	bne.n	800162e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e0ed      	b.n	800180a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001634:	b2db      	uxtb	r3, r3
 8001636:	2b00      	cmp	r3, #0
 8001638:	d102      	bne.n	8001640 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f7ff fada 	bl	8000bf4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f042 0201 	orr.w	r2, r2, #1
 800164e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001650:	f7ff fd52 	bl	80010f8 <HAL_GetTick>
 8001654:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001656:	e012      	b.n	800167e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001658:	f7ff fd4e 	bl	80010f8 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b0a      	cmp	r3, #10
 8001664:	d90b      	bls.n	800167e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2205      	movs	r2, #5
 8001676:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e0c5      	b.n	800180a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	2b00      	cmp	r3, #0
 800168a:	d0e5      	beq.n	8001658 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f022 0202 	bic.w	r2, r2, #2
 800169a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800169c:	f7ff fd2c 	bl	80010f8 <HAL_GetTick>
 80016a0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016a2:	e012      	b.n	80016ca <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016a4:	f7ff fd28 	bl	80010f8 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b0a      	cmp	r3, #10
 80016b0:	d90b      	bls.n	80016ca <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2205      	movs	r2, #5
 80016c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e09f      	b.n	800180a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d1e5      	bne.n	80016a4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	7e1b      	ldrb	r3, [r3, #24]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d108      	bne.n	80016f2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	e007      	b.n	8001702 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001700:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	7e5b      	ldrb	r3, [r3, #25]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d108      	bne.n	800171c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	e007      	b.n	800172c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800172a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	7e9b      	ldrb	r3, [r3, #26]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d108      	bne.n	8001746 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f042 0220 	orr.w	r2, r2, #32
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	e007      	b.n	8001756 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f022 0220 	bic.w	r2, r2, #32
 8001754:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	7edb      	ldrb	r3, [r3, #27]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d108      	bne.n	8001770 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f022 0210 	bic.w	r2, r2, #16
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	e007      	b.n	8001780 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f042 0210 	orr.w	r2, r2, #16
 800177e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	7f1b      	ldrb	r3, [r3, #28]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d108      	bne.n	800179a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f042 0208 	orr.w	r2, r2, #8
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	e007      	b.n	80017aa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f022 0208 	bic.w	r2, r2, #8
 80017a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	7f5b      	ldrb	r3, [r3, #29]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d108      	bne.n	80017c4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f042 0204 	orr.w	r2, r2, #4
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	e007      	b.n	80017d4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f022 0204 	bic.w	r2, r2, #4
 80017d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689a      	ldr	r2, [r3, #8]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	431a      	orrs	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	691b      	ldr	r3, [r3, #16]
 80017e2:	431a      	orrs	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	695b      	ldr	r3, [r3, #20]
 80017e8:	ea42 0103 	orr.w	r1, r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	1e5a      	subs	r2, r3, #1
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	430a      	orrs	r2, r1
 80017f8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2201      	movs	r2, #1
 8001804:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3710      	adds	r7, #16
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
	...

08001814 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001814:	b480      	push	{r7}
 8001816:	b087      	sub	sp, #28
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f893 3020 	ldrb.w	r3, [r3, #32]
 800182a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800182c:	7cfb      	ldrb	r3, [r7, #19]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d003      	beq.n	800183a <HAL_CAN_ConfigFilter+0x26>
 8001832:	7cfb      	ldrb	r3, [r7, #19]
 8001834:	2b02      	cmp	r3, #2
 8001836:	f040 80be 	bne.w	80019b6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800183a:	4b65      	ldr	r3, [pc, #404]	; (80019d0 <HAL_CAN_ConfigFilter+0x1bc>)
 800183c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001844:	f043 0201 	orr.w	r2, r3, #1
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001854:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001868:	021b      	lsls	r3, r3, #8
 800186a:	431a      	orrs	r2, r3
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	695b      	ldr	r3, [r3, #20]
 8001876:	f003 031f 	and.w	r3, r3, #31
 800187a:	2201      	movs	r2, #1
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	43db      	mvns	r3, r3
 800188c:	401a      	ands	r2, r3
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	69db      	ldr	r3, [r3, #28]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d123      	bne.n	80018e4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	43db      	mvns	r3, r3
 80018a6:	401a      	ands	r2, r3
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018ba:	683a      	ldr	r2, [r7, #0]
 80018bc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80018be:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	3248      	adds	r2, #72	; 0x48
 80018c4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018d8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018da:	6979      	ldr	r1, [r7, #20]
 80018dc:	3348      	adds	r3, #72	; 0x48
 80018de:	00db      	lsls	r3, r3, #3
 80018e0:	440b      	add	r3, r1
 80018e2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	69db      	ldr	r3, [r3, #28]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d122      	bne.n	8001932 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	431a      	orrs	r2, r3
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001908:	683a      	ldr	r2, [r7, #0]
 800190a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800190c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	3248      	adds	r2, #72	; 0x48
 8001912:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001926:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001928:	6979      	ldr	r1, [r7, #20]
 800192a:	3348      	adds	r3, #72	; 0x48
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	440b      	add	r3, r1
 8001930:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	699b      	ldr	r3, [r3, #24]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d109      	bne.n	800194e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	43db      	mvns	r3, r3
 8001944:	401a      	ands	r2, r3
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800194c:	e007      	b.n	800195e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	431a      	orrs	r2, r3
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d109      	bne.n	800197a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	43db      	mvns	r3, r3
 8001970:	401a      	ands	r2, r3
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001978:	e007      	b.n	800198a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	431a      	orrs	r2, r3
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	6a1b      	ldr	r3, [r3, #32]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d107      	bne.n	80019a2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	431a      	orrs	r2, r3
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80019a8:	f023 0201 	bic.w	r2, r3, #1
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80019b2:	2300      	movs	r3, #0
 80019b4:	e006      	b.n	80019c4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
  }
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	371c      	adds	r7, #28
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	40006400 	.word	0x40006400

080019d4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d12e      	bne.n	8001a46 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2202      	movs	r2, #2
 80019ec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f022 0201 	bic.w	r2, r2, #1
 80019fe:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001a00:	f7ff fb7a 	bl	80010f8 <HAL_GetTick>
 8001a04:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a06:	e012      	b.n	8001a2e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a08:	f7ff fb76 	bl	80010f8 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b0a      	cmp	r3, #10
 8001a14:	d90b      	bls.n	8001a2e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2205      	movs	r2, #5
 8001a26:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e012      	b.n	8001a54 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f003 0301 	and.w	r3, r3, #1
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d1e5      	bne.n	8001a08 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001a42:	2300      	movs	r3, #0
 8001a44:	e006      	b.n	8001a54 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
  }
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b089      	sub	sp, #36	; 0x24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
 8001a68:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a70:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a7a:	7ffb      	ldrb	r3, [r7, #31]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d003      	beq.n	8001a88 <HAL_CAN_AddTxMessage+0x2c>
 8001a80:	7ffb      	ldrb	r3, [r7, #31]
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	f040 80b8 	bne.w	8001bf8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d10a      	bne.n	8001aa8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d105      	bne.n	8001aa8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f000 80a0 	beq.w	8001be8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	0e1b      	lsrs	r3, r3, #24
 8001aac:	f003 0303 	and.w	r3, r3, #3
 8001ab0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d907      	bls.n	8001ac8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001abc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e09e      	b.n	8001c06 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001ac8:	2201      	movs	r2, #1
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	409a      	lsls	r2, r3
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d10d      	bne.n	8001af6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001ae4:	68f9      	ldr	r1, [r7, #12]
 8001ae6:	6809      	ldr	r1, [r1, #0]
 8001ae8:	431a      	orrs	r2, r3
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	3318      	adds	r3, #24
 8001aee:	011b      	lsls	r3, r3, #4
 8001af0:	440b      	add	r3, r1
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	e00f      	b.n	8001b16 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b00:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b06:	68f9      	ldr	r1, [r7, #12]
 8001b08:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001b0a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	3318      	adds	r3, #24
 8001b10:	011b      	lsls	r3, r3, #4
 8001b12:	440b      	add	r3, r1
 8001b14:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	6819      	ldr	r1, [r3, #0]
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	691a      	ldr	r2, [r3, #16]
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	3318      	adds	r3, #24
 8001b22:	011b      	lsls	r3, r3, #4
 8001b24:	440b      	add	r3, r1
 8001b26:	3304      	adds	r3, #4
 8001b28:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	7d1b      	ldrb	r3, [r3, #20]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d111      	bne.n	8001b56 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	3318      	adds	r3, #24
 8001b3a:	011b      	lsls	r3, r3, #4
 8001b3c:	4413      	add	r3, r2
 8001b3e:	3304      	adds	r3, #4
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	68fa      	ldr	r2, [r7, #12]
 8001b44:	6811      	ldr	r1, [r2, #0]
 8001b46:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	3318      	adds	r3, #24
 8001b4e:	011b      	lsls	r3, r3, #4
 8001b50:	440b      	add	r3, r1
 8001b52:	3304      	adds	r3, #4
 8001b54:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	3307      	adds	r3, #7
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	061a      	lsls	r2, r3, #24
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	3306      	adds	r3, #6
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	041b      	lsls	r3, r3, #16
 8001b66:	431a      	orrs	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3305      	adds	r3, #5
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	021b      	lsls	r3, r3, #8
 8001b70:	4313      	orrs	r3, r2
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	3204      	adds	r2, #4
 8001b76:	7812      	ldrb	r2, [r2, #0]
 8001b78:	4610      	mov	r0, r2
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	6811      	ldr	r1, [r2, #0]
 8001b7e:	ea43 0200 	orr.w	r2, r3, r0
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	011b      	lsls	r3, r3, #4
 8001b86:	440b      	add	r3, r1
 8001b88:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001b8c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	3303      	adds	r3, #3
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	061a      	lsls	r2, r3, #24
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	3302      	adds	r3, #2
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	041b      	lsls	r3, r3, #16
 8001b9e:	431a      	orrs	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	021b      	lsls	r3, r3, #8
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	7812      	ldrb	r2, [r2, #0]
 8001bae:	4610      	mov	r0, r2
 8001bb0:	68fa      	ldr	r2, [r7, #12]
 8001bb2:	6811      	ldr	r1, [r2, #0]
 8001bb4:	ea43 0200 	orr.w	r2, r3, r0
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	011b      	lsls	r3, r3, #4
 8001bbc:	440b      	add	r3, r1
 8001bbe:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001bc2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	3318      	adds	r3, #24
 8001bcc:	011b      	lsls	r3, r3, #4
 8001bce:	4413      	add	r3, r2
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	68fa      	ldr	r2, [r7, #12]
 8001bd4:	6811      	ldr	r1, [r2, #0]
 8001bd6:	f043 0201 	orr.w	r2, r3, #1
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	3318      	adds	r3, #24
 8001bde:	011b      	lsls	r3, r3, #4
 8001be0:	440b      	add	r3, r1
 8001be2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001be4:	2300      	movs	r3, #0
 8001be6:	e00e      	b.n	8001c06 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e006      	b.n	8001c06 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
  }
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3724      	adds	r7, #36	; 0x24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8001c12:	b480      	push	{r7}
 8001c14:	b085      	sub	sp, #20
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c24:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001c26:	7afb      	ldrb	r3, [r7, #11]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d002      	beq.n	8001c32 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001c2c:	7afb      	ldrb	r3, [r7, #11]
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d11d      	bne.n	8001c6e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d002      	beq.n	8001c46 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	3301      	adds	r3, #1
 8001c44:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d002      	beq.n	8001c5a <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	3301      	adds	r3, #1
 8001c58:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d002      	beq.n	8001c6e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3714      	adds	r7, #20
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b087      	sub	sp, #28
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
 8001c88:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c90:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c92:	7dfb      	ldrb	r3, [r7, #23]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d003      	beq.n	8001ca0 <HAL_CAN_GetRxMessage+0x24>
 8001c98:	7dfb      	ldrb	r3, [r7, #23]
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	f040 80f3 	bne.w	8001e86 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d10e      	bne.n	8001cc4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	f003 0303 	and.w	r3, r3, #3
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d116      	bne.n	8001ce2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e0e7      	b.n	8001e94 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	f003 0303 	and.w	r3, r3, #3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d107      	bne.n	8001ce2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e0d8      	b.n	8001e94 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	331b      	adds	r3, #27
 8001cea:	011b      	lsls	r3, r3, #4
 8001cec:	4413      	add	r3, r2
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0204 	and.w	r2, r3, #4
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d10c      	bne.n	8001d1a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	331b      	adds	r3, #27
 8001d08:	011b      	lsls	r3, r3, #4
 8001d0a:	4413      	add	r3, r2
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	0d5b      	lsrs	r3, r3, #21
 8001d10:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	e00b      	b.n	8001d32 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	331b      	adds	r3, #27
 8001d22:	011b      	lsls	r3, r3, #4
 8001d24:	4413      	add	r3, r2
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	08db      	lsrs	r3, r3, #3
 8001d2a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	331b      	adds	r3, #27
 8001d3a:	011b      	lsls	r3, r3, #4
 8001d3c:	4413      	add	r3, r2
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0202 	and.w	r2, r3, #2
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	331b      	adds	r3, #27
 8001d50:	011b      	lsls	r3, r3, #4
 8001d52:	4413      	add	r3, r2
 8001d54:	3304      	adds	r3, #4
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 020f 	and.w	r2, r3, #15
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	331b      	adds	r3, #27
 8001d68:	011b      	lsls	r3, r3, #4
 8001d6a:	4413      	add	r3, r2
 8001d6c:	3304      	adds	r3, #4
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	0a1b      	lsrs	r3, r3, #8
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	331b      	adds	r3, #27
 8001d80:	011b      	lsls	r3, r3, #4
 8001d82:	4413      	add	r3, r2
 8001d84:	3304      	adds	r3, #4
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	0c1b      	lsrs	r3, r3, #16
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	011b      	lsls	r3, r3, #4
 8001d98:	4413      	add	r3, r2
 8001d9a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	b2da      	uxtb	r2, r3
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	011b      	lsls	r3, r3, #4
 8001dae:	4413      	add	r3, r2
 8001db0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	0a1a      	lsrs	r2, r3, #8
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	b2d2      	uxtb	r2, r2
 8001dbe:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	011b      	lsls	r3, r3, #4
 8001dc8:	4413      	add	r3, r2
 8001dca:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	0c1a      	lsrs	r2, r3, #16
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	3302      	adds	r3, #2
 8001dd6:	b2d2      	uxtb	r2, r2
 8001dd8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	011b      	lsls	r3, r3, #4
 8001de2:	4413      	add	r3, r2
 8001de4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	0e1a      	lsrs	r2, r3, #24
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	3303      	adds	r3, #3
 8001df0:	b2d2      	uxtb	r2, r2
 8001df2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	011b      	lsls	r3, r3, #4
 8001dfc:	4413      	add	r3, r2
 8001dfe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	3304      	adds	r3, #4
 8001e08:	b2d2      	uxtb	r2, r2
 8001e0a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	011b      	lsls	r3, r3, #4
 8001e14:	4413      	add	r3, r2
 8001e16:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	0a1a      	lsrs	r2, r3, #8
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	3305      	adds	r3, #5
 8001e22:	b2d2      	uxtb	r2, r2
 8001e24:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	011b      	lsls	r3, r3, #4
 8001e2e:	4413      	add	r3, r2
 8001e30:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	0c1a      	lsrs	r2, r3, #16
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	3306      	adds	r3, #6
 8001e3c:	b2d2      	uxtb	r2, r2
 8001e3e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	011b      	lsls	r3, r3, #4
 8001e48:	4413      	add	r3, r2
 8001e4a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	0e1a      	lsrs	r2, r3, #24
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	3307      	adds	r3, #7
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d108      	bne.n	8001e72 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	68da      	ldr	r2, [r3, #12]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f042 0220 	orr.w	r2, r2, #32
 8001e6e:	60da      	str	r2, [r3, #12]
 8001e70:	e007      	b.n	8001e82 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	691a      	ldr	r2, [r3, #16]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f042 0220 	orr.w	r2, r2, #32
 8001e80:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001e82:	2300      	movs	r3, #0
 8001e84:	e006      	b.n	8001e94 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
  }
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	371c      	adds	r7, #28
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eb0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001eb2:	7bfb      	ldrb	r3, [r7, #15]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d002      	beq.n	8001ebe <HAL_CAN_ActivateNotification+0x1e>
 8001eb8:	7bfb      	ldrb	r3, [r7, #15]
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d109      	bne.n	8001ed2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	6959      	ldr	r1, [r3, #20]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	e006      	b.n	8001ee0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
  }
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3714      	adds	r7, #20
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b08a      	sub	sp, #40	; 0x28
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	699b      	ldr	r3, [r3, #24]
 8001f26:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001f28:	6a3b      	ldr	r3, [r7, #32]
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d07c      	beq.n	800202c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d023      	beq.n	8001f84 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2201      	movs	r2, #1
 8001f42:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d003      	beq.n	8001f56 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 f983 	bl	800225a <HAL_CAN_TxMailbox0CompleteCallback>
 8001f54:	e016      	b.n	8001f84 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	f003 0304 	and.w	r3, r3, #4
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d004      	beq.n	8001f6a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f62:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f66:	627b      	str	r3, [r7, #36]	; 0x24
 8001f68:	e00c      	b.n	8001f84 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	f003 0308 	and.w	r3, r3, #8
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d004      	beq.n	8001f7e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f76:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f7a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f7c:	e002      	b.n	8001f84 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 f989 	bl	8002296 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d024      	beq.n	8001fd8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f96:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d003      	beq.n	8001faa <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f963 	bl	800226e <HAL_CAN_TxMailbox1CompleteCallback>
 8001fa8:	e016      	b.n	8001fd8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d004      	beq.n	8001fbe <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001fba:	627b      	str	r3, [r7, #36]	; 0x24
 8001fbc:	e00c      	b.n	8001fd8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d004      	beq.n	8001fd2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fce:	627b      	str	r3, [r7, #36]	; 0x24
 8001fd0:	e002      	b.n	8001fd8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 f969 	bl	80022aa <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d024      	beq.n	800202c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001fea:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 f943 	bl	8002282 <HAL_CAN_TxMailbox2CompleteCallback>
 8001ffc:	e016      	b.n	800202c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d004      	beq.n	8002012 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800200e:	627b      	str	r3, [r7, #36]	; 0x24
 8002010:	e00c      	b.n	800202c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d004      	beq.n	8002026 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800201c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002022:	627b      	str	r3, [r7, #36]	; 0x24
 8002024:	e002      	b.n	800202c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 f949 	bl	80022be <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800202c:	6a3b      	ldr	r3, [r7, #32]
 800202e:	f003 0308 	and.w	r3, r3, #8
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00c      	beq.n	8002050 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	f003 0310 	and.w	r3, r3, #16
 800203c:	2b00      	cmp	r3, #0
 800203e:	d007      	beq.n	8002050 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002042:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002046:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2210      	movs	r2, #16
 800204e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002050:	6a3b      	ldr	r3, [r7, #32]
 8002052:	f003 0304 	and.w	r3, r3, #4
 8002056:	2b00      	cmp	r3, #0
 8002058:	d00b      	beq.n	8002072 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	f003 0308 	and.w	r3, r3, #8
 8002060:	2b00      	cmp	r3, #0
 8002062:	d006      	beq.n	8002072 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2208      	movs	r2, #8
 800206a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f000 f930 	bl	80022d2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002072:	6a3b      	ldr	r3, [r7, #32]
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d009      	beq.n	8002090 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	f003 0303 	and.w	r3, r3, #3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d002      	beq.n	8002090 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f7fe fa1e 	bl	80004cc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002090:	6a3b      	ldr	r3, [r7, #32]
 8002092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00c      	beq.n	80020b4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	f003 0310 	and.w	r3, r3, #16
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d007      	beq.n	80020b4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80020a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020aa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2210      	movs	r2, #16
 80020b2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80020b4:	6a3b      	ldr	r3, [r7, #32]
 80020b6:	f003 0320 	and.w	r3, r3, #32
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00b      	beq.n	80020d6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	f003 0308 	and.w	r3, r3, #8
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d006      	beq.n	80020d6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2208      	movs	r2, #8
 80020ce:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f000 f912 	bl	80022fa <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80020d6:	6a3b      	ldr	r3, [r7, #32]
 80020d8:	f003 0310 	and.w	r3, r3, #16
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d009      	beq.n	80020f4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	f003 0303 	and.w	r3, r3, #3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d002      	beq.n	80020f4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 f8f9 	bl	80022e6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80020f4:	6a3b      	ldr	r3, [r7, #32]
 80020f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00b      	beq.n	8002116 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	f003 0310 	and.w	r3, r3, #16
 8002104:	2b00      	cmp	r3, #0
 8002106:	d006      	beq.n	8002116 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2210      	movs	r2, #16
 800210e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f000 f8fc 	bl	800230e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002116:	6a3b      	ldr	r3, [r7, #32]
 8002118:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d00b      	beq.n	8002138 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	f003 0308 	and.w	r3, r3, #8
 8002126:	2b00      	cmp	r3, #0
 8002128:	d006      	beq.n	8002138 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2208      	movs	r2, #8
 8002130:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 f8f5 	bl	8002322 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002138:	6a3b      	ldr	r3, [r7, #32]
 800213a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d07b      	beq.n	800223a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	f003 0304 	and.w	r3, r3, #4
 8002148:	2b00      	cmp	r3, #0
 800214a:	d072      	beq.n	8002232 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800214c:	6a3b      	ldr	r3, [r7, #32]
 800214e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002152:	2b00      	cmp	r3, #0
 8002154:	d008      	beq.n	8002168 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800215c:	2b00      	cmp	r3, #0
 800215e:	d003      	beq.n	8002168 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002162:	f043 0301 	orr.w	r3, r3, #1
 8002166:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002168:	6a3b      	ldr	r3, [r7, #32]
 800216a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800216e:	2b00      	cmp	r3, #0
 8002170:	d008      	beq.n	8002184 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002178:	2b00      	cmp	r3, #0
 800217a:	d003      	beq.n	8002184 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800217c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217e:	f043 0302 	orr.w	r3, r3, #2
 8002182:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002184:	6a3b      	ldr	r3, [r7, #32]
 8002186:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800218a:	2b00      	cmp	r3, #0
 800218c:	d008      	beq.n	80021a0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002194:	2b00      	cmp	r3, #0
 8002196:	d003      	beq.n	80021a0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219a:	f043 0304 	orr.w	r3, r3, #4
 800219e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80021a0:	6a3b      	ldr	r3, [r7, #32]
 80021a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d043      	beq.n	8002232 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d03e      	beq.n	8002232 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021ba:	2b60      	cmp	r3, #96	; 0x60
 80021bc:	d02b      	beq.n	8002216 <HAL_CAN_IRQHandler+0x32a>
 80021be:	2b60      	cmp	r3, #96	; 0x60
 80021c0:	d82e      	bhi.n	8002220 <HAL_CAN_IRQHandler+0x334>
 80021c2:	2b50      	cmp	r3, #80	; 0x50
 80021c4:	d022      	beq.n	800220c <HAL_CAN_IRQHandler+0x320>
 80021c6:	2b50      	cmp	r3, #80	; 0x50
 80021c8:	d82a      	bhi.n	8002220 <HAL_CAN_IRQHandler+0x334>
 80021ca:	2b40      	cmp	r3, #64	; 0x40
 80021cc:	d019      	beq.n	8002202 <HAL_CAN_IRQHandler+0x316>
 80021ce:	2b40      	cmp	r3, #64	; 0x40
 80021d0:	d826      	bhi.n	8002220 <HAL_CAN_IRQHandler+0x334>
 80021d2:	2b30      	cmp	r3, #48	; 0x30
 80021d4:	d010      	beq.n	80021f8 <HAL_CAN_IRQHandler+0x30c>
 80021d6:	2b30      	cmp	r3, #48	; 0x30
 80021d8:	d822      	bhi.n	8002220 <HAL_CAN_IRQHandler+0x334>
 80021da:	2b10      	cmp	r3, #16
 80021dc:	d002      	beq.n	80021e4 <HAL_CAN_IRQHandler+0x2f8>
 80021de:	2b20      	cmp	r3, #32
 80021e0:	d005      	beq.n	80021ee <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80021e2:	e01d      	b.n	8002220 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80021e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e6:	f043 0308 	orr.w	r3, r3, #8
 80021ea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80021ec:	e019      	b.n	8002222 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80021ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f0:	f043 0310 	orr.w	r3, r3, #16
 80021f4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80021f6:	e014      	b.n	8002222 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80021f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fa:	f043 0320 	orr.w	r3, r3, #32
 80021fe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002200:	e00f      	b.n	8002222 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002204:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002208:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800220a:	e00a      	b.n	8002222 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800220c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002212:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002214:	e005      	b.n	8002222 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800221c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800221e:	e000      	b.n	8002222 <HAL_CAN_IRQHandler+0x336>
            break;
 8002220:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	699a      	ldr	r2, [r3, #24]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002230:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2204      	movs	r2, #4
 8002238:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800223a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223c:	2b00      	cmp	r3, #0
 800223e:	d008      	beq.n	8002252 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002246:	431a      	orrs	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f000 f872 	bl	8002336 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002252:	bf00      	nop
 8002254:	3728      	adds	r7, #40	; 0x28
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800225a:	b480      	push	{r7}
 800225c:	b083      	sub	sp, #12
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr

0800226e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800226e:	b480      	push	{r7}
 8002270:	b083      	sub	sp, #12
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002276:	bf00      	nop
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr

08002282 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002282:	b480      	push	{r7}
 8002284:	b083      	sub	sp, #12
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800228a:	bf00      	nop
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr

08002296 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002296:	b480      	push	{r7}
 8002298:	b083      	sub	sp, #12
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800229e:	bf00      	nop
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr

080022aa <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80022aa:	b480      	push	{r7}
 80022ac:	b083      	sub	sp, #12
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80022b2:	bf00      	nop
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr

080022be <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80022be:	b480      	push	{r7}
 80022c0:	b083      	sub	sp, #12
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80022c6:	bf00      	nop
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr

080022d2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80022d2:	b480      	push	{r7}
 80022d4:	b083      	sub	sp, #12
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80022da:	bf00      	nop
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80022e6:	b480      	push	{r7}
 80022e8:	b083      	sub	sp, #12
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80022ee:	bf00      	nop
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr

080022fa <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80022fa:	b480      	push	{r7}
 80022fc:	b083      	sub	sp, #12
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002302:	bf00      	nop
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800230e:	b480      	push	{r7}
 8002310:	b083      	sub	sp, #12
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002316:	bf00      	nop
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr

08002322 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002322:	b480      	push	{r7}
 8002324:	b083      	sub	sp, #12
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr

08002336 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002336:	b480      	push	{r7}
 8002338:	b083      	sub	sp, #12
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800233e:	bf00      	nop
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
	...

0800234c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f003 0307 	and.w	r3, r3, #7
 800235a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800235c:	4b0c      	ldr	r3, [pc, #48]	; (8002390 <__NVIC_SetPriorityGrouping+0x44>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002362:	68ba      	ldr	r2, [r7, #8]
 8002364:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002368:	4013      	ands	r3, r2
 800236a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002374:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002378:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800237c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800237e:	4a04      	ldr	r2, [pc, #16]	; (8002390 <__NVIC_SetPriorityGrouping+0x44>)
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	60d3      	str	r3, [r2, #12]
}
 8002384:	bf00      	nop
 8002386:	3714      	adds	r7, #20
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	e000ed00 	.word	0xe000ed00

08002394 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002398:	4b04      	ldr	r3, [pc, #16]	; (80023ac <__NVIC_GetPriorityGrouping+0x18>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	0a1b      	lsrs	r3, r3, #8
 800239e:	f003 0307 	and.w	r3, r3, #7
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr
 80023ac:	e000ed00 	.word	0xe000ed00

080023b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	4603      	mov	r3, r0
 80023b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	db0b      	blt.n	80023da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023c2:	79fb      	ldrb	r3, [r7, #7]
 80023c4:	f003 021f 	and.w	r2, r3, #31
 80023c8:	4907      	ldr	r1, [pc, #28]	; (80023e8 <__NVIC_EnableIRQ+0x38>)
 80023ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ce:	095b      	lsrs	r3, r3, #5
 80023d0:	2001      	movs	r0, #1
 80023d2:	fa00 f202 	lsl.w	r2, r0, r2
 80023d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023da:	bf00      	nop
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	e000e100 	.word	0xe000e100

080023ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4603      	mov	r3, r0
 80023f4:	6039      	str	r1, [r7, #0]
 80023f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	db0a      	blt.n	8002416 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	b2da      	uxtb	r2, r3
 8002404:	490c      	ldr	r1, [pc, #48]	; (8002438 <__NVIC_SetPriority+0x4c>)
 8002406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240a:	0112      	lsls	r2, r2, #4
 800240c:	b2d2      	uxtb	r2, r2
 800240e:	440b      	add	r3, r1
 8002410:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002414:	e00a      	b.n	800242c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	b2da      	uxtb	r2, r3
 800241a:	4908      	ldr	r1, [pc, #32]	; (800243c <__NVIC_SetPriority+0x50>)
 800241c:	79fb      	ldrb	r3, [r7, #7]
 800241e:	f003 030f 	and.w	r3, r3, #15
 8002422:	3b04      	subs	r3, #4
 8002424:	0112      	lsls	r2, r2, #4
 8002426:	b2d2      	uxtb	r2, r2
 8002428:	440b      	add	r3, r1
 800242a:	761a      	strb	r2, [r3, #24]
}
 800242c:	bf00      	nop
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	e000e100 	.word	0xe000e100
 800243c:	e000ed00 	.word	0xe000ed00

08002440 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002440:	b480      	push	{r7}
 8002442:	b089      	sub	sp, #36	; 0x24
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f003 0307 	and.w	r3, r3, #7
 8002452:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	f1c3 0307 	rsb	r3, r3, #7
 800245a:	2b04      	cmp	r3, #4
 800245c:	bf28      	it	cs
 800245e:	2304      	movcs	r3, #4
 8002460:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	3304      	adds	r3, #4
 8002466:	2b06      	cmp	r3, #6
 8002468:	d902      	bls.n	8002470 <NVIC_EncodePriority+0x30>
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	3b03      	subs	r3, #3
 800246e:	e000      	b.n	8002472 <NVIC_EncodePriority+0x32>
 8002470:	2300      	movs	r3, #0
 8002472:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002474:	f04f 32ff 	mov.w	r2, #4294967295
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	43da      	mvns	r2, r3
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	401a      	ands	r2, r3
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002488:	f04f 31ff 	mov.w	r1, #4294967295
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	fa01 f303 	lsl.w	r3, r1, r3
 8002492:	43d9      	mvns	r1, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002498:	4313      	orrs	r3, r2
         );
}
 800249a:	4618      	mov	r0, r3
 800249c:	3724      	adds	r7, #36	; 0x24
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
	...

080024a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	3b01      	subs	r3, #1
 80024b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024b8:	d301      	bcc.n	80024be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024ba:	2301      	movs	r3, #1
 80024bc:	e00f      	b.n	80024de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024be:	4a0a      	ldr	r2, [pc, #40]	; (80024e8 <SysTick_Config+0x40>)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	3b01      	subs	r3, #1
 80024c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024c6:	210f      	movs	r1, #15
 80024c8:	f04f 30ff 	mov.w	r0, #4294967295
 80024cc:	f7ff ff8e 	bl	80023ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024d0:	4b05      	ldr	r3, [pc, #20]	; (80024e8 <SysTick_Config+0x40>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024d6:	4b04      	ldr	r3, [pc, #16]	; (80024e8 <SysTick_Config+0x40>)
 80024d8:	2207      	movs	r2, #7
 80024da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	e000e010 	.word	0xe000e010

080024ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f7ff ff29 	bl	800234c <__NVIC_SetPriorityGrouping>
}
 80024fa:	bf00      	nop
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002502:	b580      	push	{r7, lr}
 8002504:	b086      	sub	sp, #24
 8002506:	af00      	add	r7, sp, #0
 8002508:	4603      	mov	r3, r0
 800250a:	60b9      	str	r1, [r7, #8]
 800250c:	607a      	str	r2, [r7, #4]
 800250e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002510:	2300      	movs	r3, #0
 8002512:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002514:	f7ff ff3e 	bl	8002394 <__NVIC_GetPriorityGrouping>
 8002518:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	68b9      	ldr	r1, [r7, #8]
 800251e:	6978      	ldr	r0, [r7, #20]
 8002520:	f7ff ff8e 	bl	8002440 <NVIC_EncodePriority>
 8002524:	4602      	mov	r2, r0
 8002526:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800252a:	4611      	mov	r1, r2
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff ff5d 	bl	80023ec <__NVIC_SetPriority>
}
 8002532:	bf00      	nop
 8002534:	3718      	adds	r7, #24
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b082      	sub	sp, #8
 800253e:	af00      	add	r7, sp, #0
 8002540:	4603      	mov	r3, r0
 8002542:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002548:	4618      	mov	r0, r3
 800254a:	f7ff ff31 	bl	80023b0 <__NVIC_EnableIRQ>
}
 800254e:	bf00      	nop
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b082      	sub	sp, #8
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f7ff ffa2 	bl	80024a8 <SysTick_Config>
 8002564:	4603      	mov	r3, r0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b084      	sub	sp, #16
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800257a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800257c:	f7fe fdbc 	bl	80010f8 <HAL_GetTick>
 8002580:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d008      	beq.n	80025a0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2280      	movs	r2, #128	; 0x80
 8002592:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e052      	b.n	8002646 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f022 0216 	bic.w	r2, r2, #22
 80025ae:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	695a      	ldr	r2, [r3, #20]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025be:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d103      	bne.n	80025d0 <HAL_DMA_Abort+0x62>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d007      	beq.n	80025e0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f022 0208 	bic.w	r2, r2, #8
 80025de:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f022 0201 	bic.w	r2, r2, #1
 80025ee:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025f0:	e013      	b.n	800261a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025f2:	f7fe fd81 	bl	80010f8 <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	2b05      	cmp	r3, #5
 80025fe:	d90c      	bls.n	800261a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2220      	movs	r2, #32
 8002604:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2203      	movs	r2, #3
 800260a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e015      	b.n	8002646 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0301 	and.w	r3, r3, #1
 8002624:	2b00      	cmp	r3, #0
 8002626:	d1e4      	bne.n	80025f2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800262c:	223f      	movs	r2, #63	; 0x3f
 800262e:	409a      	lsls	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002644:	2300      	movs	r3, #0
}
 8002646:	4618      	mov	r0, r3
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800264e:	b480      	push	{r7}
 8002650:	b083      	sub	sp, #12
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d004      	beq.n	800266c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2280      	movs	r2, #128	; 0x80
 8002666:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e00c      	b.n	8002686 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2205      	movs	r2, #5
 8002670:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f022 0201 	bic.w	r2, r2, #1
 8002682:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
	...

08002694 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002694:	b480      	push	{r7}
 8002696:	b089      	sub	sp, #36	; 0x24
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800269e:	2300      	movs	r3, #0
 80026a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026a2:	2300      	movs	r3, #0
 80026a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026a6:	2300      	movs	r3, #0
 80026a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026aa:	2300      	movs	r3, #0
 80026ac:	61fb      	str	r3, [r7, #28]
 80026ae:	e16b      	b.n	8002988 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026b0:	2201      	movs	r2, #1
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	697a      	ldr	r2, [r7, #20]
 80026c0:	4013      	ands	r3, r2
 80026c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	f040 815a 	bne.w	8002982 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f003 0303 	and.w	r3, r3, #3
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d005      	beq.n	80026e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d130      	bne.n	8002748 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	2203      	movs	r2, #3
 80026f2:	fa02 f303 	lsl.w	r3, r2, r3
 80026f6:	43db      	mvns	r3, r3
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	4013      	ands	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	68da      	ldr	r2, [r3, #12]
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	4313      	orrs	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800271c:	2201      	movs	r2, #1
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	43db      	mvns	r3, r3
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	4013      	ands	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	091b      	lsrs	r3, r3, #4
 8002732:	f003 0201 	and.w	r2, r3, #1
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	4313      	orrs	r3, r2
 8002740:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f003 0303 	and.w	r3, r3, #3
 8002750:	2b03      	cmp	r3, #3
 8002752:	d017      	beq.n	8002784 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	2203      	movs	r2, #3
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	43db      	mvns	r3, r3
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	4013      	ands	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	689a      	ldr	r2, [r3, #8]
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	4313      	orrs	r3, r2
 800277c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f003 0303 	and.w	r3, r3, #3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d123      	bne.n	80027d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	08da      	lsrs	r2, r3, #3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	3208      	adds	r2, #8
 8002798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800279c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	f003 0307 	and.w	r3, r3, #7
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	220f      	movs	r2, #15
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	43db      	mvns	r3, r3
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	4013      	ands	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	691a      	ldr	r2, [r3, #16]
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	08da      	lsrs	r2, r3, #3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	3208      	adds	r2, #8
 80027d2:	69b9      	ldr	r1, [r7, #24]
 80027d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	2203      	movs	r2, #3
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	43db      	mvns	r3, r3
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	4013      	ands	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f003 0203 	and.w	r2, r3, #3
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	4313      	orrs	r3, r2
 8002804:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002814:	2b00      	cmp	r3, #0
 8002816:	f000 80b4 	beq.w	8002982 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800281a:	2300      	movs	r3, #0
 800281c:	60fb      	str	r3, [r7, #12]
 800281e:	4b60      	ldr	r3, [pc, #384]	; (80029a0 <HAL_GPIO_Init+0x30c>)
 8002820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002822:	4a5f      	ldr	r2, [pc, #380]	; (80029a0 <HAL_GPIO_Init+0x30c>)
 8002824:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002828:	6453      	str	r3, [r2, #68]	; 0x44
 800282a:	4b5d      	ldr	r3, [pc, #372]	; (80029a0 <HAL_GPIO_Init+0x30c>)
 800282c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002832:	60fb      	str	r3, [r7, #12]
 8002834:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002836:	4a5b      	ldr	r2, [pc, #364]	; (80029a4 <HAL_GPIO_Init+0x310>)
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	089b      	lsrs	r3, r3, #2
 800283c:	3302      	adds	r3, #2
 800283e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002842:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	f003 0303 	and.w	r3, r3, #3
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	220f      	movs	r2, #15
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	43db      	mvns	r3, r3
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	4013      	ands	r3, r2
 8002858:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a52      	ldr	r2, [pc, #328]	; (80029a8 <HAL_GPIO_Init+0x314>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d02b      	beq.n	80028ba <HAL_GPIO_Init+0x226>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a51      	ldr	r2, [pc, #324]	; (80029ac <HAL_GPIO_Init+0x318>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d025      	beq.n	80028b6 <HAL_GPIO_Init+0x222>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a50      	ldr	r2, [pc, #320]	; (80029b0 <HAL_GPIO_Init+0x31c>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d01f      	beq.n	80028b2 <HAL_GPIO_Init+0x21e>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a4f      	ldr	r2, [pc, #316]	; (80029b4 <HAL_GPIO_Init+0x320>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d019      	beq.n	80028ae <HAL_GPIO_Init+0x21a>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a4e      	ldr	r2, [pc, #312]	; (80029b8 <HAL_GPIO_Init+0x324>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d013      	beq.n	80028aa <HAL_GPIO_Init+0x216>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a4d      	ldr	r2, [pc, #308]	; (80029bc <HAL_GPIO_Init+0x328>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d00d      	beq.n	80028a6 <HAL_GPIO_Init+0x212>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a4c      	ldr	r2, [pc, #304]	; (80029c0 <HAL_GPIO_Init+0x32c>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d007      	beq.n	80028a2 <HAL_GPIO_Init+0x20e>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a4b      	ldr	r2, [pc, #300]	; (80029c4 <HAL_GPIO_Init+0x330>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d101      	bne.n	800289e <HAL_GPIO_Init+0x20a>
 800289a:	2307      	movs	r3, #7
 800289c:	e00e      	b.n	80028bc <HAL_GPIO_Init+0x228>
 800289e:	2308      	movs	r3, #8
 80028a0:	e00c      	b.n	80028bc <HAL_GPIO_Init+0x228>
 80028a2:	2306      	movs	r3, #6
 80028a4:	e00a      	b.n	80028bc <HAL_GPIO_Init+0x228>
 80028a6:	2305      	movs	r3, #5
 80028a8:	e008      	b.n	80028bc <HAL_GPIO_Init+0x228>
 80028aa:	2304      	movs	r3, #4
 80028ac:	e006      	b.n	80028bc <HAL_GPIO_Init+0x228>
 80028ae:	2303      	movs	r3, #3
 80028b0:	e004      	b.n	80028bc <HAL_GPIO_Init+0x228>
 80028b2:	2302      	movs	r3, #2
 80028b4:	e002      	b.n	80028bc <HAL_GPIO_Init+0x228>
 80028b6:	2301      	movs	r3, #1
 80028b8:	e000      	b.n	80028bc <HAL_GPIO_Init+0x228>
 80028ba:	2300      	movs	r3, #0
 80028bc:	69fa      	ldr	r2, [r7, #28]
 80028be:	f002 0203 	and.w	r2, r2, #3
 80028c2:	0092      	lsls	r2, r2, #2
 80028c4:	4093      	lsls	r3, r2
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028cc:	4935      	ldr	r1, [pc, #212]	; (80029a4 <HAL_GPIO_Init+0x310>)
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	089b      	lsrs	r3, r3, #2
 80028d2:	3302      	adds	r3, #2
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028da:	4b3b      	ldr	r3, [pc, #236]	; (80029c8 <HAL_GPIO_Init+0x334>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	43db      	mvns	r3, r3
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	4013      	ands	r3, r2
 80028e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d003      	beq.n	80028fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028fe:	4a32      	ldr	r2, [pc, #200]	; (80029c8 <HAL_GPIO_Init+0x334>)
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002904:	4b30      	ldr	r3, [pc, #192]	; (80029c8 <HAL_GPIO_Init+0x334>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	43db      	mvns	r3, r3
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	4013      	ands	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d003      	beq.n	8002928 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	4313      	orrs	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002928:	4a27      	ldr	r2, [pc, #156]	; (80029c8 <HAL_GPIO_Init+0x334>)
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800292e:	4b26      	ldr	r3, [pc, #152]	; (80029c8 <HAL_GPIO_Init+0x334>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	43db      	mvns	r3, r3
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	4013      	ands	r3, r2
 800293c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d003      	beq.n	8002952 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	4313      	orrs	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002952:	4a1d      	ldr	r2, [pc, #116]	; (80029c8 <HAL_GPIO_Init+0x334>)
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002958:	4b1b      	ldr	r3, [pc, #108]	; (80029c8 <HAL_GPIO_Init+0x334>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	43db      	mvns	r3, r3
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	4013      	ands	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d003      	beq.n	800297c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	4313      	orrs	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800297c:	4a12      	ldr	r2, [pc, #72]	; (80029c8 <HAL_GPIO_Init+0x334>)
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	3301      	adds	r3, #1
 8002986:	61fb      	str	r3, [r7, #28]
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	2b0f      	cmp	r3, #15
 800298c:	f67f ae90 	bls.w	80026b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002990:	bf00      	nop
 8002992:	bf00      	nop
 8002994:	3724      	adds	r7, #36	; 0x24
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	40023800 	.word	0x40023800
 80029a4:	40013800 	.word	0x40013800
 80029a8:	40020000 	.word	0x40020000
 80029ac:	40020400 	.word	0x40020400
 80029b0:	40020800 	.word	0x40020800
 80029b4:	40020c00 	.word	0x40020c00
 80029b8:	40021000 	.word	0x40021000
 80029bc:	40021400 	.word	0x40021400
 80029c0:	40021800 	.word	0x40021800
 80029c4:	40021c00 	.word	0x40021c00
 80029c8:	40013c00 	.word	0x40013c00

080029cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	460b      	mov	r3, r1
 80029d6:	807b      	strh	r3, [r7, #2]
 80029d8:	4613      	mov	r3, r2
 80029da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029dc:	787b      	ldrb	r3, [r7, #1]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d003      	beq.n	80029ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029e2:	887a      	ldrh	r2, [r7, #2]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029e8:	e003      	b.n	80029f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029ea:	887b      	ldrh	r3, [r7, #2]
 80029ec:	041a      	lsls	r2, r3, #16
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	619a      	str	r2, [r3, #24]
}
 80029f2:	bf00      	nop
 80029f4:	370c      	adds	r7, #12
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr

080029fe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029fe:	b480      	push	{r7}
 8002a00:	b085      	sub	sp, #20
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
 8002a06:	460b      	mov	r3, r1
 8002a08:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a10:	887a      	ldrh	r2, [r7, #2]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	4013      	ands	r3, r2
 8002a16:	041a      	lsls	r2, r3, #16
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	43d9      	mvns	r1, r3
 8002a1c:	887b      	ldrh	r3, [r7, #2]
 8002a1e:	400b      	ands	r3, r1
 8002a20:	431a      	orrs	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	619a      	str	r2, [r3, #24]
}
 8002a26:	bf00      	nop
 8002a28:	3714      	adds	r7, #20
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
	...

08002a34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002a3e:	4b08      	ldr	r3, [pc, #32]	; (8002a60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a40:	695a      	ldr	r2, [r3, #20]
 8002a42:	88fb      	ldrh	r3, [r7, #6]
 8002a44:	4013      	ands	r3, r2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d006      	beq.n	8002a58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a4a:	4a05      	ldr	r2, [pc, #20]	; (8002a60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a4c:	88fb      	ldrh	r3, [r7, #6]
 8002a4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a50:	88fb      	ldrh	r3, [r7, #6]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f000 f806 	bl	8002a64 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a58:	bf00      	nop
 8002a5a:	3708      	adds	r7, #8
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	40013c00 	.word	0x40013c00

08002a64 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002a6e:	bf00      	nop
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
	...

08002a7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d101      	bne.n	8002a8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e267      	b.n	8002f5e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d075      	beq.n	8002b86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a9a:	4b88      	ldr	r3, [pc, #544]	; (8002cbc <HAL_RCC_OscConfig+0x240>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f003 030c 	and.w	r3, r3, #12
 8002aa2:	2b04      	cmp	r3, #4
 8002aa4:	d00c      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002aa6:	4b85      	ldr	r3, [pc, #532]	; (8002cbc <HAL_RCC_OscConfig+0x240>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002aae:	2b08      	cmp	r3, #8
 8002ab0:	d112      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ab2:	4b82      	ldr	r3, [pc, #520]	; (8002cbc <HAL_RCC_OscConfig+0x240>)
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002abe:	d10b      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac0:	4b7e      	ldr	r3, [pc, #504]	; (8002cbc <HAL_RCC_OscConfig+0x240>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d05b      	beq.n	8002b84 <HAL_RCC_OscConfig+0x108>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d157      	bne.n	8002b84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e242      	b.n	8002f5e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ae0:	d106      	bne.n	8002af0 <HAL_RCC_OscConfig+0x74>
 8002ae2:	4b76      	ldr	r3, [pc, #472]	; (8002cbc <HAL_RCC_OscConfig+0x240>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a75      	ldr	r2, [pc, #468]	; (8002cbc <HAL_RCC_OscConfig+0x240>)
 8002ae8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aec:	6013      	str	r3, [r2, #0]
 8002aee:	e01d      	b.n	8002b2c <HAL_RCC_OscConfig+0xb0>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002af8:	d10c      	bne.n	8002b14 <HAL_RCC_OscConfig+0x98>
 8002afa:	4b70      	ldr	r3, [pc, #448]	; (8002cbc <HAL_RCC_OscConfig+0x240>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a6f      	ldr	r2, [pc, #444]	; (8002cbc <HAL_RCC_OscConfig+0x240>)
 8002b00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b04:	6013      	str	r3, [r2, #0]
 8002b06:	4b6d      	ldr	r3, [pc, #436]	; (8002cbc <HAL_RCC_OscConfig+0x240>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a6c      	ldr	r2, [pc, #432]	; (8002cbc <HAL_RCC_OscConfig+0x240>)
 8002b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b10:	6013      	str	r3, [r2, #0]
 8002b12:	e00b      	b.n	8002b2c <HAL_RCC_OscConfig+0xb0>
 8002b14:	4b69      	ldr	r3, [pc, #420]	; (8002cbc <HAL_RCC_OscConfig+0x240>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a68      	ldr	r2, [pc, #416]	; (8002cbc <HAL_RCC_OscConfig+0x240>)
 8002b1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b1e:	6013      	str	r3, [r2, #0]
 8002b20:	4b66      	ldr	r3, [pc, #408]	; (8002cbc <HAL_RCC_OscConfig+0x240>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a65      	ldr	r2, [pc, #404]	; (8002cbc <HAL_RCC_OscConfig+0x240>)
 8002b26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d013      	beq.n	8002b5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b34:	f7fe fae0 	bl	80010f8 <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b3a:	e008      	b.n	8002b4e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b3c:	f7fe fadc 	bl	80010f8 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b64      	cmp	r3, #100	; 0x64
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e207      	b.n	8002f5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b4e:	4b5b      	ldr	r3, [pc, #364]	; (8002cbc <HAL_RCC_OscConfig+0x240>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d0f0      	beq.n	8002b3c <HAL_RCC_OscConfig+0xc0>
 8002b5a:	e014      	b.n	8002b86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b5c:	f7fe facc 	bl	80010f8 <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b64:	f7fe fac8 	bl	80010f8 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b64      	cmp	r3, #100	; 0x64
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e1f3      	b.n	8002f5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b76:	4b51      	ldr	r3, [pc, #324]	; (8002cbc <HAL_RCC_OscConfig+0x240>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1f0      	bne.n	8002b64 <HAL_RCC_OscConfig+0xe8>
 8002b82:	e000      	b.n	8002b86 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d063      	beq.n	8002c5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b92:	4b4a      	ldr	r3, [pc, #296]	; (8002cbc <HAL_RCC_OscConfig+0x240>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f003 030c 	and.w	r3, r3, #12
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00b      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b9e:	4b47      	ldr	r3, [pc, #284]	; (8002cbc <HAL_RCC_OscConfig+0x240>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ba6:	2b08      	cmp	r3, #8
 8002ba8:	d11c      	bne.n	8002be4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002baa:	4b44      	ldr	r3, [pc, #272]	; (8002cbc <HAL_RCC_OscConfig+0x240>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d116      	bne.n	8002be4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bb6:	4b41      	ldr	r3, [pc, #260]	; (8002cbc <HAL_RCC_OscConfig+0x240>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d005      	beq.n	8002bce <HAL_RCC_OscConfig+0x152>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d001      	beq.n	8002bce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e1c7      	b.n	8002f5e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bce:	4b3b      	ldr	r3, [pc, #236]	; (8002cbc <HAL_RCC_OscConfig+0x240>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	4937      	ldr	r1, [pc, #220]	; (8002cbc <HAL_RCC_OscConfig+0x240>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002be2:	e03a      	b.n	8002c5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d020      	beq.n	8002c2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bec:	4b34      	ldr	r3, [pc, #208]	; (8002cc0 <HAL_RCC_OscConfig+0x244>)
 8002bee:	2201      	movs	r2, #1
 8002bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf2:	f7fe fa81 	bl	80010f8 <HAL_GetTick>
 8002bf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bf8:	e008      	b.n	8002c0c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bfa:	f7fe fa7d 	bl	80010f8 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d901      	bls.n	8002c0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e1a8      	b.n	8002f5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c0c:	4b2b      	ldr	r3, [pc, #172]	; (8002cbc <HAL_RCC_OscConfig+0x240>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d0f0      	beq.n	8002bfa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c18:	4b28      	ldr	r3, [pc, #160]	; (8002cbc <HAL_RCC_OscConfig+0x240>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	00db      	lsls	r3, r3, #3
 8002c26:	4925      	ldr	r1, [pc, #148]	; (8002cbc <HAL_RCC_OscConfig+0x240>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	600b      	str	r3, [r1, #0]
 8002c2c:	e015      	b.n	8002c5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c2e:	4b24      	ldr	r3, [pc, #144]	; (8002cc0 <HAL_RCC_OscConfig+0x244>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c34:	f7fe fa60 	bl	80010f8 <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c3c:	f7fe fa5c 	bl	80010f8 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e187      	b.n	8002f5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c4e:	4b1b      	ldr	r3, [pc, #108]	; (8002cbc <HAL_RCC_OscConfig+0x240>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1f0      	bne.n	8002c3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0308 	and.w	r3, r3, #8
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d036      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d016      	beq.n	8002c9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c6e:	4b15      	ldr	r3, [pc, #84]	; (8002cc4 <HAL_RCC_OscConfig+0x248>)
 8002c70:	2201      	movs	r2, #1
 8002c72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c74:	f7fe fa40 	bl	80010f8 <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c7c:	f7fe fa3c 	bl	80010f8 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e167      	b.n	8002f5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c8e:	4b0b      	ldr	r3, [pc, #44]	; (8002cbc <HAL_RCC_OscConfig+0x240>)
 8002c90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d0f0      	beq.n	8002c7c <HAL_RCC_OscConfig+0x200>
 8002c9a:	e01b      	b.n	8002cd4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c9c:	4b09      	ldr	r3, [pc, #36]	; (8002cc4 <HAL_RCC_OscConfig+0x248>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ca2:	f7fe fa29 	bl	80010f8 <HAL_GetTick>
 8002ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ca8:	e00e      	b.n	8002cc8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002caa:	f7fe fa25 	bl	80010f8 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d907      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e150      	b.n	8002f5e <HAL_RCC_OscConfig+0x4e2>
 8002cbc:	40023800 	.word	0x40023800
 8002cc0:	42470000 	.word	0x42470000
 8002cc4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cc8:	4b88      	ldr	r3, [pc, #544]	; (8002eec <HAL_RCC_OscConfig+0x470>)
 8002cca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1ea      	bne.n	8002caa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0304 	and.w	r3, r3, #4
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f000 8097 	beq.w	8002e10 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ce6:	4b81      	ldr	r3, [pc, #516]	; (8002eec <HAL_RCC_OscConfig+0x470>)
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10f      	bne.n	8002d12 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	60bb      	str	r3, [r7, #8]
 8002cf6:	4b7d      	ldr	r3, [pc, #500]	; (8002eec <HAL_RCC_OscConfig+0x470>)
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfa:	4a7c      	ldr	r2, [pc, #496]	; (8002eec <HAL_RCC_OscConfig+0x470>)
 8002cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d00:	6413      	str	r3, [r2, #64]	; 0x40
 8002d02:	4b7a      	ldr	r3, [pc, #488]	; (8002eec <HAL_RCC_OscConfig+0x470>)
 8002d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d0a:	60bb      	str	r3, [r7, #8]
 8002d0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d12:	4b77      	ldr	r3, [pc, #476]	; (8002ef0 <HAL_RCC_OscConfig+0x474>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d118      	bne.n	8002d50 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d1e:	4b74      	ldr	r3, [pc, #464]	; (8002ef0 <HAL_RCC_OscConfig+0x474>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a73      	ldr	r2, [pc, #460]	; (8002ef0 <HAL_RCC_OscConfig+0x474>)
 8002d24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d2a:	f7fe f9e5 	bl	80010f8 <HAL_GetTick>
 8002d2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d30:	e008      	b.n	8002d44 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d32:	f7fe f9e1 	bl	80010f8 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e10c      	b.n	8002f5e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d44:	4b6a      	ldr	r3, [pc, #424]	; (8002ef0 <HAL_RCC_OscConfig+0x474>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d0f0      	beq.n	8002d32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d106      	bne.n	8002d66 <HAL_RCC_OscConfig+0x2ea>
 8002d58:	4b64      	ldr	r3, [pc, #400]	; (8002eec <HAL_RCC_OscConfig+0x470>)
 8002d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d5c:	4a63      	ldr	r2, [pc, #396]	; (8002eec <HAL_RCC_OscConfig+0x470>)
 8002d5e:	f043 0301 	orr.w	r3, r3, #1
 8002d62:	6713      	str	r3, [r2, #112]	; 0x70
 8002d64:	e01c      	b.n	8002da0 <HAL_RCC_OscConfig+0x324>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	2b05      	cmp	r3, #5
 8002d6c:	d10c      	bne.n	8002d88 <HAL_RCC_OscConfig+0x30c>
 8002d6e:	4b5f      	ldr	r3, [pc, #380]	; (8002eec <HAL_RCC_OscConfig+0x470>)
 8002d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d72:	4a5e      	ldr	r2, [pc, #376]	; (8002eec <HAL_RCC_OscConfig+0x470>)
 8002d74:	f043 0304 	orr.w	r3, r3, #4
 8002d78:	6713      	str	r3, [r2, #112]	; 0x70
 8002d7a:	4b5c      	ldr	r3, [pc, #368]	; (8002eec <HAL_RCC_OscConfig+0x470>)
 8002d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d7e:	4a5b      	ldr	r2, [pc, #364]	; (8002eec <HAL_RCC_OscConfig+0x470>)
 8002d80:	f043 0301 	orr.w	r3, r3, #1
 8002d84:	6713      	str	r3, [r2, #112]	; 0x70
 8002d86:	e00b      	b.n	8002da0 <HAL_RCC_OscConfig+0x324>
 8002d88:	4b58      	ldr	r3, [pc, #352]	; (8002eec <HAL_RCC_OscConfig+0x470>)
 8002d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d8c:	4a57      	ldr	r2, [pc, #348]	; (8002eec <HAL_RCC_OscConfig+0x470>)
 8002d8e:	f023 0301 	bic.w	r3, r3, #1
 8002d92:	6713      	str	r3, [r2, #112]	; 0x70
 8002d94:	4b55      	ldr	r3, [pc, #340]	; (8002eec <HAL_RCC_OscConfig+0x470>)
 8002d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d98:	4a54      	ldr	r2, [pc, #336]	; (8002eec <HAL_RCC_OscConfig+0x470>)
 8002d9a:	f023 0304 	bic.w	r3, r3, #4
 8002d9e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d015      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da8:	f7fe f9a6 	bl	80010f8 <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dae:	e00a      	b.n	8002dc6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002db0:	f7fe f9a2 	bl	80010f8 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e0cb      	b.n	8002f5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dc6:	4b49      	ldr	r3, [pc, #292]	; (8002eec <HAL_RCC_OscConfig+0x470>)
 8002dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d0ee      	beq.n	8002db0 <HAL_RCC_OscConfig+0x334>
 8002dd2:	e014      	b.n	8002dfe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dd4:	f7fe f990 	bl	80010f8 <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dda:	e00a      	b.n	8002df2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ddc:	f7fe f98c 	bl	80010f8 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e0b5      	b.n	8002f5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002df2:	4b3e      	ldr	r3, [pc, #248]	; (8002eec <HAL_RCC_OscConfig+0x470>)
 8002df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1ee      	bne.n	8002ddc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dfe:	7dfb      	ldrb	r3, [r7, #23]
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d105      	bne.n	8002e10 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e04:	4b39      	ldr	r3, [pc, #228]	; (8002eec <HAL_RCC_OscConfig+0x470>)
 8002e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e08:	4a38      	ldr	r2, [pc, #224]	; (8002eec <HAL_RCC_OscConfig+0x470>)
 8002e0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e0e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f000 80a1 	beq.w	8002f5c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e1a:	4b34      	ldr	r3, [pc, #208]	; (8002eec <HAL_RCC_OscConfig+0x470>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f003 030c 	and.w	r3, r3, #12
 8002e22:	2b08      	cmp	r3, #8
 8002e24:	d05c      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d141      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e2e:	4b31      	ldr	r3, [pc, #196]	; (8002ef4 <HAL_RCC_OscConfig+0x478>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e34:	f7fe f960 	bl	80010f8 <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e3a:	e008      	b.n	8002e4e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e3c:	f7fe f95c 	bl	80010f8 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e087      	b.n	8002f5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e4e:	4b27      	ldr	r3, [pc, #156]	; (8002eec <HAL_RCC_OscConfig+0x470>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1f0      	bne.n	8002e3c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	69da      	ldr	r2, [r3, #28]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a1b      	ldr	r3, [r3, #32]
 8002e62:	431a      	orrs	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e68:	019b      	lsls	r3, r3, #6
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e70:	085b      	lsrs	r3, r3, #1
 8002e72:	3b01      	subs	r3, #1
 8002e74:	041b      	lsls	r3, r3, #16
 8002e76:	431a      	orrs	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e7c:	061b      	lsls	r3, r3, #24
 8002e7e:	491b      	ldr	r1, [pc, #108]	; (8002eec <HAL_RCC_OscConfig+0x470>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e84:	4b1b      	ldr	r3, [pc, #108]	; (8002ef4 <HAL_RCC_OscConfig+0x478>)
 8002e86:	2201      	movs	r2, #1
 8002e88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8a:	f7fe f935 	bl	80010f8 <HAL_GetTick>
 8002e8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e90:	e008      	b.n	8002ea4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e92:	f7fe f931 	bl	80010f8 <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d901      	bls.n	8002ea4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e05c      	b.n	8002f5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ea4:	4b11      	ldr	r3, [pc, #68]	; (8002eec <HAL_RCC_OscConfig+0x470>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d0f0      	beq.n	8002e92 <HAL_RCC_OscConfig+0x416>
 8002eb0:	e054      	b.n	8002f5c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eb2:	4b10      	ldr	r3, [pc, #64]	; (8002ef4 <HAL_RCC_OscConfig+0x478>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb8:	f7fe f91e 	bl	80010f8 <HAL_GetTick>
 8002ebc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ebe:	e008      	b.n	8002ed2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ec0:	f7fe f91a 	bl	80010f8 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e045      	b.n	8002f5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ed2:	4b06      	ldr	r3, [pc, #24]	; (8002eec <HAL_RCC_OscConfig+0x470>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1f0      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x444>
 8002ede:	e03d      	b.n	8002f5c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d107      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e038      	b.n	8002f5e <HAL_RCC_OscConfig+0x4e2>
 8002eec:	40023800 	.word	0x40023800
 8002ef0:	40007000 	.word	0x40007000
 8002ef4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ef8:	4b1b      	ldr	r3, [pc, #108]	; (8002f68 <HAL_RCC_OscConfig+0x4ec>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d028      	beq.n	8002f58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d121      	bne.n	8002f58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d11a      	bne.n	8002f58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f28:	4013      	ands	r3, r2
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d111      	bne.n	8002f58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3e:	085b      	lsrs	r3, r3, #1
 8002f40:	3b01      	subs	r3, #1
 8002f42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d107      	bne.n	8002f58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d001      	beq.n	8002f5c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e000      	b.n	8002f5e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3718      	adds	r7, #24
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	40023800 	.word	0x40023800

08002f6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d101      	bne.n	8002f80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e0cc      	b.n	800311a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f80:	4b68      	ldr	r3, [pc, #416]	; (8003124 <HAL_RCC_ClockConfig+0x1b8>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0307 	and.w	r3, r3, #7
 8002f88:	683a      	ldr	r2, [r7, #0]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d90c      	bls.n	8002fa8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f8e:	4b65      	ldr	r3, [pc, #404]	; (8003124 <HAL_RCC_ClockConfig+0x1b8>)
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	b2d2      	uxtb	r2, r2
 8002f94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f96:	4b63      	ldr	r3, [pc, #396]	; (8003124 <HAL_RCC_ClockConfig+0x1b8>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0307 	and.w	r3, r3, #7
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d001      	beq.n	8002fa8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e0b8      	b.n	800311a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d020      	beq.n	8002ff6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0304 	and.w	r3, r3, #4
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d005      	beq.n	8002fcc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fc0:	4b59      	ldr	r3, [pc, #356]	; (8003128 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	4a58      	ldr	r2, [pc, #352]	; (8003128 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002fca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0308 	and.w	r3, r3, #8
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d005      	beq.n	8002fe4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fd8:	4b53      	ldr	r3, [pc, #332]	; (8003128 <HAL_RCC_ClockConfig+0x1bc>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	4a52      	ldr	r2, [pc, #328]	; (8003128 <HAL_RCC_ClockConfig+0x1bc>)
 8002fde:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fe2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fe4:	4b50      	ldr	r3, [pc, #320]	; (8003128 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	494d      	ldr	r1, [pc, #308]	; (8003128 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d044      	beq.n	800308c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d107      	bne.n	800301a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800300a:	4b47      	ldr	r3, [pc, #284]	; (8003128 <HAL_RCC_ClockConfig+0x1bc>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d119      	bne.n	800304a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e07f      	b.n	800311a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	2b02      	cmp	r3, #2
 8003020:	d003      	beq.n	800302a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003026:	2b03      	cmp	r3, #3
 8003028:	d107      	bne.n	800303a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800302a:	4b3f      	ldr	r3, [pc, #252]	; (8003128 <HAL_RCC_ClockConfig+0x1bc>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d109      	bne.n	800304a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e06f      	b.n	800311a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800303a:	4b3b      	ldr	r3, [pc, #236]	; (8003128 <HAL_RCC_ClockConfig+0x1bc>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e067      	b.n	800311a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800304a:	4b37      	ldr	r3, [pc, #220]	; (8003128 <HAL_RCC_ClockConfig+0x1bc>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f023 0203 	bic.w	r2, r3, #3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	4934      	ldr	r1, [pc, #208]	; (8003128 <HAL_RCC_ClockConfig+0x1bc>)
 8003058:	4313      	orrs	r3, r2
 800305a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800305c:	f7fe f84c 	bl	80010f8 <HAL_GetTick>
 8003060:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003062:	e00a      	b.n	800307a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003064:	f7fe f848 	bl	80010f8 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003072:	4293      	cmp	r3, r2
 8003074:	d901      	bls.n	800307a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e04f      	b.n	800311a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800307a:	4b2b      	ldr	r3, [pc, #172]	; (8003128 <HAL_RCC_ClockConfig+0x1bc>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f003 020c 	and.w	r2, r3, #12
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	429a      	cmp	r2, r3
 800308a:	d1eb      	bne.n	8003064 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800308c:	4b25      	ldr	r3, [pc, #148]	; (8003124 <HAL_RCC_ClockConfig+0x1b8>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0307 	and.w	r3, r3, #7
 8003094:	683a      	ldr	r2, [r7, #0]
 8003096:	429a      	cmp	r2, r3
 8003098:	d20c      	bcs.n	80030b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800309a:	4b22      	ldr	r3, [pc, #136]	; (8003124 <HAL_RCC_ClockConfig+0x1b8>)
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	b2d2      	uxtb	r2, r2
 80030a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030a2:	4b20      	ldr	r3, [pc, #128]	; (8003124 <HAL_RCC_ClockConfig+0x1b8>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0307 	and.w	r3, r3, #7
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d001      	beq.n	80030b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e032      	b.n	800311a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0304 	and.w	r3, r3, #4
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d008      	beq.n	80030d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030c0:	4b19      	ldr	r3, [pc, #100]	; (8003128 <HAL_RCC_ClockConfig+0x1bc>)
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	4916      	ldr	r1, [pc, #88]	; (8003128 <HAL_RCC_ClockConfig+0x1bc>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0308 	and.w	r3, r3, #8
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d009      	beq.n	80030f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030de:	4b12      	ldr	r3, [pc, #72]	; (8003128 <HAL_RCC_ClockConfig+0x1bc>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	490e      	ldr	r1, [pc, #56]	; (8003128 <HAL_RCC_ClockConfig+0x1bc>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030f2:	f000 f821 	bl	8003138 <HAL_RCC_GetSysClockFreq>
 80030f6:	4602      	mov	r2, r0
 80030f8:	4b0b      	ldr	r3, [pc, #44]	; (8003128 <HAL_RCC_ClockConfig+0x1bc>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	091b      	lsrs	r3, r3, #4
 80030fe:	f003 030f 	and.w	r3, r3, #15
 8003102:	490a      	ldr	r1, [pc, #40]	; (800312c <HAL_RCC_ClockConfig+0x1c0>)
 8003104:	5ccb      	ldrb	r3, [r1, r3]
 8003106:	fa22 f303 	lsr.w	r3, r2, r3
 800310a:	4a09      	ldr	r2, [pc, #36]	; (8003130 <HAL_RCC_ClockConfig+0x1c4>)
 800310c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800310e:	4b09      	ldr	r3, [pc, #36]	; (8003134 <HAL_RCC_ClockConfig+0x1c8>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4618      	mov	r0, r3
 8003114:	f7fd ffac 	bl	8001070 <HAL_InitTick>

  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	40023c00 	.word	0x40023c00
 8003128:	40023800 	.word	0x40023800
 800312c:	08004d90 	.word	0x08004d90
 8003130:	20000000 	.word	0x20000000
 8003134:	20000004 	.word	0x20000004

08003138 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003138:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800313c:	b090      	sub	sp, #64	; 0x40
 800313e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003140:	2300      	movs	r3, #0
 8003142:	637b      	str	r3, [r7, #52]	; 0x34
 8003144:	2300      	movs	r3, #0
 8003146:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003148:	2300      	movs	r3, #0
 800314a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800314c:	2300      	movs	r3, #0
 800314e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003150:	4b59      	ldr	r3, [pc, #356]	; (80032b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f003 030c 	and.w	r3, r3, #12
 8003158:	2b08      	cmp	r3, #8
 800315a:	d00d      	beq.n	8003178 <HAL_RCC_GetSysClockFreq+0x40>
 800315c:	2b08      	cmp	r3, #8
 800315e:	f200 80a1 	bhi.w	80032a4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003162:	2b00      	cmp	r3, #0
 8003164:	d002      	beq.n	800316c <HAL_RCC_GetSysClockFreq+0x34>
 8003166:	2b04      	cmp	r3, #4
 8003168:	d003      	beq.n	8003172 <HAL_RCC_GetSysClockFreq+0x3a>
 800316a:	e09b      	b.n	80032a4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800316c:	4b53      	ldr	r3, [pc, #332]	; (80032bc <HAL_RCC_GetSysClockFreq+0x184>)
 800316e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003170:	e09b      	b.n	80032aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003172:	4b53      	ldr	r3, [pc, #332]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003174:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003176:	e098      	b.n	80032aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003178:	4b4f      	ldr	r3, [pc, #316]	; (80032b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003180:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003182:	4b4d      	ldr	r3, [pc, #308]	; (80032b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d028      	beq.n	80031e0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800318e:	4b4a      	ldr	r3, [pc, #296]	; (80032b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	099b      	lsrs	r3, r3, #6
 8003194:	2200      	movs	r2, #0
 8003196:	623b      	str	r3, [r7, #32]
 8003198:	627a      	str	r2, [r7, #36]	; 0x24
 800319a:	6a3b      	ldr	r3, [r7, #32]
 800319c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80031a0:	2100      	movs	r1, #0
 80031a2:	4b47      	ldr	r3, [pc, #284]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80031a4:	fb03 f201 	mul.w	r2, r3, r1
 80031a8:	2300      	movs	r3, #0
 80031aa:	fb00 f303 	mul.w	r3, r0, r3
 80031ae:	4413      	add	r3, r2
 80031b0:	4a43      	ldr	r2, [pc, #268]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80031b2:	fba0 1202 	umull	r1, r2, r0, r2
 80031b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80031b8:	460a      	mov	r2, r1
 80031ba:	62ba      	str	r2, [r7, #40]	; 0x28
 80031bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031be:	4413      	add	r3, r2
 80031c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031c4:	2200      	movs	r2, #0
 80031c6:	61bb      	str	r3, [r7, #24]
 80031c8:	61fa      	str	r2, [r7, #28]
 80031ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80031d2:	f7fc fff9 	bl	80001c8 <__aeabi_uldivmod>
 80031d6:	4602      	mov	r2, r0
 80031d8:	460b      	mov	r3, r1
 80031da:	4613      	mov	r3, r2
 80031dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031de:	e053      	b.n	8003288 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031e0:	4b35      	ldr	r3, [pc, #212]	; (80032b8 <HAL_RCC_GetSysClockFreq+0x180>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	099b      	lsrs	r3, r3, #6
 80031e6:	2200      	movs	r2, #0
 80031e8:	613b      	str	r3, [r7, #16]
 80031ea:	617a      	str	r2, [r7, #20]
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80031f2:	f04f 0b00 	mov.w	fp, #0
 80031f6:	4652      	mov	r2, sl
 80031f8:	465b      	mov	r3, fp
 80031fa:	f04f 0000 	mov.w	r0, #0
 80031fe:	f04f 0100 	mov.w	r1, #0
 8003202:	0159      	lsls	r1, r3, #5
 8003204:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003208:	0150      	lsls	r0, r2, #5
 800320a:	4602      	mov	r2, r0
 800320c:	460b      	mov	r3, r1
 800320e:	ebb2 080a 	subs.w	r8, r2, sl
 8003212:	eb63 090b 	sbc.w	r9, r3, fp
 8003216:	f04f 0200 	mov.w	r2, #0
 800321a:	f04f 0300 	mov.w	r3, #0
 800321e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003222:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003226:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800322a:	ebb2 0408 	subs.w	r4, r2, r8
 800322e:	eb63 0509 	sbc.w	r5, r3, r9
 8003232:	f04f 0200 	mov.w	r2, #0
 8003236:	f04f 0300 	mov.w	r3, #0
 800323a:	00eb      	lsls	r3, r5, #3
 800323c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003240:	00e2      	lsls	r2, r4, #3
 8003242:	4614      	mov	r4, r2
 8003244:	461d      	mov	r5, r3
 8003246:	eb14 030a 	adds.w	r3, r4, sl
 800324a:	603b      	str	r3, [r7, #0]
 800324c:	eb45 030b 	adc.w	r3, r5, fp
 8003250:	607b      	str	r3, [r7, #4]
 8003252:	f04f 0200 	mov.w	r2, #0
 8003256:	f04f 0300 	mov.w	r3, #0
 800325a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800325e:	4629      	mov	r1, r5
 8003260:	028b      	lsls	r3, r1, #10
 8003262:	4621      	mov	r1, r4
 8003264:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003268:	4621      	mov	r1, r4
 800326a:	028a      	lsls	r2, r1, #10
 800326c:	4610      	mov	r0, r2
 800326e:	4619      	mov	r1, r3
 8003270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003272:	2200      	movs	r2, #0
 8003274:	60bb      	str	r3, [r7, #8]
 8003276:	60fa      	str	r2, [r7, #12]
 8003278:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800327c:	f7fc ffa4 	bl	80001c8 <__aeabi_uldivmod>
 8003280:	4602      	mov	r2, r0
 8003282:	460b      	mov	r3, r1
 8003284:	4613      	mov	r3, r2
 8003286:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003288:	4b0b      	ldr	r3, [pc, #44]	; (80032b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	0c1b      	lsrs	r3, r3, #16
 800328e:	f003 0303 	and.w	r3, r3, #3
 8003292:	3301      	adds	r3, #1
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003298:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800329a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800329c:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80032a2:	e002      	b.n	80032aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032a4:	4b05      	ldr	r3, [pc, #20]	; (80032bc <HAL_RCC_GetSysClockFreq+0x184>)
 80032a6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80032a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3740      	adds	r7, #64	; 0x40
 80032b0:	46bd      	mov	sp, r7
 80032b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032b6:	bf00      	nop
 80032b8:	40023800 	.word	0x40023800
 80032bc:	00f42400 	.word	0x00f42400
 80032c0:	017d7840 	.word	0x017d7840

080032c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032c8:	4b03      	ldr	r3, [pc, #12]	; (80032d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80032ca:	681b      	ldr	r3, [r3, #0]
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	20000000 	.word	0x20000000

080032dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032e0:	f7ff fff0 	bl	80032c4 <HAL_RCC_GetHCLKFreq>
 80032e4:	4602      	mov	r2, r0
 80032e6:	4b05      	ldr	r3, [pc, #20]	; (80032fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	0a9b      	lsrs	r3, r3, #10
 80032ec:	f003 0307 	and.w	r3, r3, #7
 80032f0:	4903      	ldr	r1, [pc, #12]	; (8003300 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032f2:	5ccb      	ldrb	r3, [r1, r3]
 80032f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	40023800 	.word	0x40023800
 8003300:	08004da0 	.word	0x08004da0

08003304 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003308:	f7ff ffdc 	bl	80032c4 <HAL_RCC_GetHCLKFreq>
 800330c:	4602      	mov	r2, r0
 800330e:	4b05      	ldr	r3, [pc, #20]	; (8003324 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	0b5b      	lsrs	r3, r3, #13
 8003314:	f003 0307 	and.w	r3, r3, #7
 8003318:	4903      	ldr	r1, [pc, #12]	; (8003328 <HAL_RCC_GetPCLK2Freq+0x24>)
 800331a:	5ccb      	ldrb	r3, [r1, r3]
 800331c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003320:	4618      	mov	r0, r3
 8003322:	bd80      	pop	{r7, pc}
 8003324:	40023800 	.word	0x40023800
 8003328:	08004da0 	.word	0x08004da0

0800332c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e041      	b.n	80033c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d106      	bne.n	8003358 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f7fd fcfe 	bl	8000d54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2202      	movs	r2, #2
 800335c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	3304      	adds	r3, #4
 8003368:	4619      	mov	r1, r3
 800336a:	4610      	mov	r0, r2
 800336c:	f000 fa96 	bl	800389c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
	...

080033cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b085      	sub	sp, #20
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d001      	beq.n	80033e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e04e      	b.n	8003482 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2202      	movs	r2, #2
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68da      	ldr	r2, [r3, #12]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f042 0201 	orr.w	r2, r2, #1
 80033fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a23      	ldr	r2, [pc, #140]	; (8003490 <HAL_TIM_Base_Start_IT+0xc4>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d022      	beq.n	800344c <HAL_TIM_Base_Start_IT+0x80>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800340e:	d01d      	beq.n	800344c <HAL_TIM_Base_Start_IT+0x80>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a1f      	ldr	r2, [pc, #124]	; (8003494 <HAL_TIM_Base_Start_IT+0xc8>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d018      	beq.n	800344c <HAL_TIM_Base_Start_IT+0x80>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a1e      	ldr	r2, [pc, #120]	; (8003498 <HAL_TIM_Base_Start_IT+0xcc>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d013      	beq.n	800344c <HAL_TIM_Base_Start_IT+0x80>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a1c      	ldr	r2, [pc, #112]	; (800349c <HAL_TIM_Base_Start_IT+0xd0>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d00e      	beq.n	800344c <HAL_TIM_Base_Start_IT+0x80>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a1b      	ldr	r2, [pc, #108]	; (80034a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d009      	beq.n	800344c <HAL_TIM_Base_Start_IT+0x80>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a19      	ldr	r2, [pc, #100]	; (80034a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d004      	beq.n	800344c <HAL_TIM_Base_Start_IT+0x80>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a18      	ldr	r2, [pc, #96]	; (80034a8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d111      	bne.n	8003470 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f003 0307 	and.w	r3, r3, #7
 8003456:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2b06      	cmp	r3, #6
 800345c:	d010      	beq.n	8003480 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f042 0201 	orr.w	r2, r2, #1
 800346c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800346e:	e007      	b.n	8003480 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f042 0201 	orr.w	r2, r2, #1
 800347e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3714      	adds	r7, #20
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	40010000 	.word	0x40010000
 8003494:	40000400 	.word	0x40000400
 8003498:	40000800 	.word	0x40000800
 800349c:	40000c00 	.word	0x40000c00
 80034a0:	40010400 	.word	0x40010400
 80034a4:	40014000 	.word	0x40014000
 80034a8:	40001800 	.word	0x40001800

080034ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d122      	bne.n	8003508 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	f003 0302 	and.w	r3, r3, #2
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d11b      	bne.n	8003508 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f06f 0202 	mvn.w	r2, #2
 80034d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2201      	movs	r2, #1
 80034de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	f003 0303 	and.w	r3, r3, #3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d003      	beq.n	80034f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f9b5 	bl	800385e <HAL_TIM_IC_CaptureCallback>
 80034f4:	e005      	b.n	8003502 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f9a7 	bl	800384a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 f9b8 	bl	8003872 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	f003 0304 	and.w	r3, r3, #4
 8003512:	2b04      	cmp	r3, #4
 8003514:	d122      	bne.n	800355c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	f003 0304 	and.w	r3, r3, #4
 8003520:	2b04      	cmp	r3, #4
 8003522:	d11b      	bne.n	800355c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f06f 0204 	mvn.w	r2, #4
 800352c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2202      	movs	r2, #2
 8003532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f98b 	bl	800385e <HAL_TIM_IC_CaptureCallback>
 8003548:	e005      	b.n	8003556 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f97d 	bl	800384a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 f98e 	bl	8003872 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	f003 0308 	and.w	r3, r3, #8
 8003566:	2b08      	cmp	r3, #8
 8003568:	d122      	bne.n	80035b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	f003 0308 	and.w	r3, r3, #8
 8003574:	2b08      	cmp	r3, #8
 8003576:	d11b      	bne.n	80035b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f06f 0208 	mvn.w	r2, #8
 8003580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2204      	movs	r2, #4
 8003586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	69db      	ldr	r3, [r3, #28]
 800358e:	f003 0303 	and.w	r3, r3, #3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 f961 	bl	800385e <HAL_TIM_IC_CaptureCallback>
 800359c:	e005      	b.n	80035aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 f953 	bl	800384a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 f964 	bl	8003872 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	f003 0310 	and.w	r3, r3, #16
 80035ba:	2b10      	cmp	r3, #16
 80035bc:	d122      	bne.n	8003604 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	f003 0310 	and.w	r3, r3, #16
 80035c8:	2b10      	cmp	r3, #16
 80035ca:	d11b      	bne.n	8003604 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f06f 0210 	mvn.w	r2, #16
 80035d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2208      	movs	r2, #8
 80035da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	69db      	ldr	r3, [r3, #28]
 80035e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d003      	beq.n	80035f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 f937 	bl	800385e <HAL_TIM_IC_CaptureCallback>
 80035f0:	e005      	b.n	80035fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 f929 	bl	800384a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 f93a 	bl	8003872 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b01      	cmp	r3, #1
 8003610:	d10e      	bne.n	8003630 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	f003 0301 	and.w	r3, r3, #1
 800361c:	2b01      	cmp	r3, #1
 800361e:	d107      	bne.n	8003630 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f06f 0201 	mvn.w	r2, #1
 8003628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f7fd fa66 	bl	8000afc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800363a:	2b80      	cmp	r3, #128	; 0x80
 800363c:	d10e      	bne.n	800365c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003648:	2b80      	cmp	r3, #128	; 0x80
 800364a:	d107      	bne.n	800365c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 fae0 	bl	8003c1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003666:	2b40      	cmp	r3, #64	; 0x40
 8003668:	d10e      	bne.n	8003688 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003674:	2b40      	cmp	r3, #64	; 0x40
 8003676:	d107      	bne.n	8003688 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f8ff 	bl	8003886 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	f003 0320 	and.w	r3, r3, #32
 8003692:	2b20      	cmp	r3, #32
 8003694:	d10e      	bne.n	80036b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	f003 0320 	and.w	r3, r3, #32
 80036a0:	2b20      	cmp	r3, #32
 80036a2:	d107      	bne.n	80036b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f06f 0220 	mvn.w	r2, #32
 80036ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 faaa 	bl	8003c08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036b4:	bf00      	nop
 80036b6:	3708      	adds	r7, #8
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036c6:	2300      	movs	r3, #0
 80036c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d101      	bne.n	80036d8 <HAL_TIM_ConfigClockSource+0x1c>
 80036d4:	2302      	movs	r3, #2
 80036d6:	e0b4      	b.n	8003842 <HAL_TIM_ConfigClockSource+0x186>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2202      	movs	r2, #2
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80036f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68ba      	ldr	r2, [r7, #8]
 8003706:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003710:	d03e      	beq.n	8003790 <HAL_TIM_ConfigClockSource+0xd4>
 8003712:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003716:	f200 8087 	bhi.w	8003828 <HAL_TIM_ConfigClockSource+0x16c>
 800371a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800371e:	f000 8086 	beq.w	800382e <HAL_TIM_ConfigClockSource+0x172>
 8003722:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003726:	d87f      	bhi.n	8003828 <HAL_TIM_ConfigClockSource+0x16c>
 8003728:	2b70      	cmp	r3, #112	; 0x70
 800372a:	d01a      	beq.n	8003762 <HAL_TIM_ConfigClockSource+0xa6>
 800372c:	2b70      	cmp	r3, #112	; 0x70
 800372e:	d87b      	bhi.n	8003828 <HAL_TIM_ConfigClockSource+0x16c>
 8003730:	2b60      	cmp	r3, #96	; 0x60
 8003732:	d050      	beq.n	80037d6 <HAL_TIM_ConfigClockSource+0x11a>
 8003734:	2b60      	cmp	r3, #96	; 0x60
 8003736:	d877      	bhi.n	8003828 <HAL_TIM_ConfigClockSource+0x16c>
 8003738:	2b50      	cmp	r3, #80	; 0x50
 800373a:	d03c      	beq.n	80037b6 <HAL_TIM_ConfigClockSource+0xfa>
 800373c:	2b50      	cmp	r3, #80	; 0x50
 800373e:	d873      	bhi.n	8003828 <HAL_TIM_ConfigClockSource+0x16c>
 8003740:	2b40      	cmp	r3, #64	; 0x40
 8003742:	d058      	beq.n	80037f6 <HAL_TIM_ConfigClockSource+0x13a>
 8003744:	2b40      	cmp	r3, #64	; 0x40
 8003746:	d86f      	bhi.n	8003828 <HAL_TIM_ConfigClockSource+0x16c>
 8003748:	2b30      	cmp	r3, #48	; 0x30
 800374a:	d064      	beq.n	8003816 <HAL_TIM_ConfigClockSource+0x15a>
 800374c:	2b30      	cmp	r3, #48	; 0x30
 800374e:	d86b      	bhi.n	8003828 <HAL_TIM_ConfigClockSource+0x16c>
 8003750:	2b20      	cmp	r3, #32
 8003752:	d060      	beq.n	8003816 <HAL_TIM_ConfigClockSource+0x15a>
 8003754:	2b20      	cmp	r3, #32
 8003756:	d867      	bhi.n	8003828 <HAL_TIM_ConfigClockSource+0x16c>
 8003758:	2b00      	cmp	r3, #0
 800375a:	d05c      	beq.n	8003816 <HAL_TIM_ConfigClockSource+0x15a>
 800375c:	2b10      	cmp	r3, #16
 800375e:	d05a      	beq.n	8003816 <HAL_TIM_ConfigClockSource+0x15a>
 8003760:	e062      	b.n	8003828 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6818      	ldr	r0, [r3, #0]
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	6899      	ldr	r1, [r3, #8]
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	685a      	ldr	r2, [r3, #4]
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	f000 f9ad 	bl	8003ad0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003784:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68ba      	ldr	r2, [r7, #8]
 800378c:	609a      	str	r2, [r3, #8]
      break;
 800378e:	e04f      	b.n	8003830 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6818      	ldr	r0, [r3, #0]
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	6899      	ldr	r1, [r3, #8]
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685a      	ldr	r2, [r3, #4]
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	f000 f996 	bl	8003ad0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689a      	ldr	r2, [r3, #8]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037b2:	609a      	str	r2, [r3, #8]
      break;
 80037b4:	e03c      	b.n	8003830 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6818      	ldr	r0, [r3, #0]
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	6859      	ldr	r1, [r3, #4]
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	461a      	mov	r2, r3
 80037c4:	f000 f90a 	bl	80039dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2150      	movs	r1, #80	; 0x50
 80037ce:	4618      	mov	r0, r3
 80037d0:	f000 f963 	bl	8003a9a <TIM_ITRx_SetConfig>
      break;
 80037d4:	e02c      	b.n	8003830 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6818      	ldr	r0, [r3, #0]
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	6859      	ldr	r1, [r3, #4]
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	461a      	mov	r2, r3
 80037e4:	f000 f929 	bl	8003a3a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2160      	movs	r1, #96	; 0x60
 80037ee:	4618      	mov	r0, r3
 80037f0:	f000 f953 	bl	8003a9a <TIM_ITRx_SetConfig>
      break;
 80037f4:	e01c      	b.n	8003830 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6818      	ldr	r0, [r3, #0]
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	6859      	ldr	r1, [r3, #4]
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	461a      	mov	r2, r3
 8003804:	f000 f8ea 	bl	80039dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2140      	movs	r1, #64	; 0x40
 800380e:	4618      	mov	r0, r3
 8003810:	f000 f943 	bl	8003a9a <TIM_ITRx_SetConfig>
      break;
 8003814:	e00c      	b.n	8003830 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4619      	mov	r1, r3
 8003820:	4610      	mov	r0, r2
 8003822:	f000 f93a 	bl	8003a9a <TIM_ITRx_SetConfig>
      break;
 8003826:	e003      	b.n	8003830 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	73fb      	strb	r3, [r7, #15]
      break;
 800382c:	e000      	b.n	8003830 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800382e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003840:	7bfb      	ldrb	r3, [r7, #15]
}
 8003842:	4618      	mov	r0, r3
 8003844:	3710      	adds	r7, #16
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}

0800384a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800384a:	b480      	push	{r7}
 800384c:	b083      	sub	sp, #12
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003852:	bf00      	nop
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr

0800385e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800385e:	b480      	push	{r7}
 8003860:	b083      	sub	sp, #12
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003866:	bf00      	nop
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr

08003872 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003872:	b480      	push	{r7}
 8003874:	b083      	sub	sp, #12
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800387a:	bf00      	nop
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr

08003886 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003886:	b480      	push	{r7}
 8003888:	b083      	sub	sp, #12
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800388e:	bf00      	nop
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
	...

0800389c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800389c:	b480      	push	{r7}
 800389e:	b085      	sub	sp, #20
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a40      	ldr	r2, [pc, #256]	; (80039b0 <TIM_Base_SetConfig+0x114>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d013      	beq.n	80038dc <TIM_Base_SetConfig+0x40>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ba:	d00f      	beq.n	80038dc <TIM_Base_SetConfig+0x40>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a3d      	ldr	r2, [pc, #244]	; (80039b4 <TIM_Base_SetConfig+0x118>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d00b      	beq.n	80038dc <TIM_Base_SetConfig+0x40>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a3c      	ldr	r2, [pc, #240]	; (80039b8 <TIM_Base_SetConfig+0x11c>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d007      	beq.n	80038dc <TIM_Base_SetConfig+0x40>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a3b      	ldr	r2, [pc, #236]	; (80039bc <TIM_Base_SetConfig+0x120>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d003      	beq.n	80038dc <TIM_Base_SetConfig+0x40>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a3a      	ldr	r2, [pc, #232]	; (80039c0 <TIM_Base_SetConfig+0x124>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d108      	bne.n	80038ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a2f      	ldr	r2, [pc, #188]	; (80039b0 <TIM_Base_SetConfig+0x114>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d02b      	beq.n	800394e <TIM_Base_SetConfig+0xb2>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038fc:	d027      	beq.n	800394e <TIM_Base_SetConfig+0xb2>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a2c      	ldr	r2, [pc, #176]	; (80039b4 <TIM_Base_SetConfig+0x118>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d023      	beq.n	800394e <TIM_Base_SetConfig+0xb2>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a2b      	ldr	r2, [pc, #172]	; (80039b8 <TIM_Base_SetConfig+0x11c>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d01f      	beq.n	800394e <TIM_Base_SetConfig+0xb2>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a2a      	ldr	r2, [pc, #168]	; (80039bc <TIM_Base_SetConfig+0x120>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d01b      	beq.n	800394e <TIM_Base_SetConfig+0xb2>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a29      	ldr	r2, [pc, #164]	; (80039c0 <TIM_Base_SetConfig+0x124>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d017      	beq.n	800394e <TIM_Base_SetConfig+0xb2>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a28      	ldr	r2, [pc, #160]	; (80039c4 <TIM_Base_SetConfig+0x128>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d013      	beq.n	800394e <TIM_Base_SetConfig+0xb2>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a27      	ldr	r2, [pc, #156]	; (80039c8 <TIM_Base_SetConfig+0x12c>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d00f      	beq.n	800394e <TIM_Base_SetConfig+0xb2>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a26      	ldr	r2, [pc, #152]	; (80039cc <TIM_Base_SetConfig+0x130>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d00b      	beq.n	800394e <TIM_Base_SetConfig+0xb2>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a25      	ldr	r2, [pc, #148]	; (80039d0 <TIM_Base_SetConfig+0x134>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d007      	beq.n	800394e <TIM_Base_SetConfig+0xb2>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a24      	ldr	r2, [pc, #144]	; (80039d4 <TIM_Base_SetConfig+0x138>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d003      	beq.n	800394e <TIM_Base_SetConfig+0xb2>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a23      	ldr	r2, [pc, #140]	; (80039d8 <TIM_Base_SetConfig+0x13c>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d108      	bne.n	8003960 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003954:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	4313      	orrs	r3, r2
 800395e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	4313      	orrs	r3, r2
 800396c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	689a      	ldr	r2, [r3, #8]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a0a      	ldr	r2, [pc, #40]	; (80039b0 <TIM_Base_SetConfig+0x114>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d003      	beq.n	8003994 <TIM_Base_SetConfig+0xf8>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a0c      	ldr	r2, [pc, #48]	; (80039c0 <TIM_Base_SetConfig+0x124>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d103      	bne.n	800399c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	691a      	ldr	r2, [r3, #16]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	615a      	str	r2, [r3, #20]
}
 80039a2:	bf00      	nop
 80039a4:	3714      	adds	r7, #20
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	40010000 	.word	0x40010000
 80039b4:	40000400 	.word	0x40000400
 80039b8:	40000800 	.word	0x40000800
 80039bc:	40000c00 	.word	0x40000c00
 80039c0:	40010400 	.word	0x40010400
 80039c4:	40014000 	.word	0x40014000
 80039c8:	40014400 	.word	0x40014400
 80039cc:	40014800 	.word	0x40014800
 80039d0:	40001800 	.word	0x40001800
 80039d4:	40001c00 	.word	0x40001c00
 80039d8:	40002000 	.word	0x40002000

080039dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039dc:	b480      	push	{r7}
 80039de:	b087      	sub	sp, #28
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6a1b      	ldr	r3, [r3, #32]
 80039ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6a1b      	ldr	r3, [r3, #32]
 80039f2:	f023 0201 	bic.w	r2, r3, #1
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	011b      	lsls	r3, r3, #4
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	f023 030a 	bic.w	r3, r3, #10
 8003a18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a1a:	697a      	ldr	r2, [r7, #20]
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	621a      	str	r2, [r3, #32]
}
 8003a2e:	bf00      	nop
 8003a30:	371c      	adds	r7, #28
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr

08003a3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	b087      	sub	sp, #28
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	60f8      	str	r0, [r7, #12]
 8003a42:	60b9      	str	r1, [r7, #8]
 8003a44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6a1b      	ldr	r3, [r3, #32]
 8003a4a:	f023 0210 	bic.w	r2, r3, #16
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6a1b      	ldr	r3, [r3, #32]
 8003a5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	031b      	lsls	r3, r3, #12
 8003a6a:	697a      	ldr	r2, [r7, #20]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a76:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	011b      	lsls	r3, r3, #4
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	621a      	str	r2, [r3, #32]
}
 8003a8e:	bf00      	nop
 8003a90:	371c      	adds	r7, #28
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr

08003a9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	b085      	sub	sp, #20
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
 8003aa2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ab0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ab2:	683a      	ldr	r2, [r7, #0]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	f043 0307 	orr.w	r3, r3, #7
 8003abc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	68fa      	ldr	r2, [r7, #12]
 8003ac2:	609a      	str	r2, [r3, #8]
}
 8003ac4:	bf00      	nop
 8003ac6:	3714      	adds	r7, #20
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b087      	sub	sp, #28
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
 8003adc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003aea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	021a      	lsls	r2, r3, #8
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	431a      	orrs	r2, r3
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	609a      	str	r2, [r3, #8]
}
 8003b04:	bf00      	nop
 8003b06:	371c      	adds	r7, #28
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d101      	bne.n	8003b28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b24:	2302      	movs	r3, #2
 8003b26:	e05a      	b.n	8003bde <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2202      	movs	r2, #2
 8003b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a21      	ldr	r2, [pc, #132]	; (8003bec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d022      	beq.n	8003bb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b74:	d01d      	beq.n	8003bb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a1d      	ldr	r2, [pc, #116]	; (8003bf0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d018      	beq.n	8003bb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a1b      	ldr	r2, [pc, #108]	; (8003bf4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d013      	beq.n	8003bb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a1a      	ldr	r2, [pc, #104]	; (8003bf8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d00e      	beq.n	8003bb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a18      	ldr	r2, [pc, #96]	; (8003bfc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d009      	beq.n	8003bb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a17      	ldr	r2, [pc, #92]	; (8003c00 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d004      	beq.n	8003bb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a15      	ldr	r2, [pc, #84]	; (8003c04 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d10c      	bne.n	8003bcc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	68ba      	ldr	r2, [r7, #8]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68ba      	ldr	r2, [r7, #8]
 8003bca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3714      	adds	r7, #20
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	40010000 	.word	0x40010000
 8003bf0:	40000400 	.word	0x40000400
 8003bf4:	40000800 	.word	0x40000800
 8003bf8:	40000c00 	.word	0x40000c00
 8003bfc:	40010400 	.word	0x40010400
 8003c00:	40014000 	.word	0x40014000
 8003c04:	40001800 	.word	0x40001800

08003c08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c24:	bf00      	nop
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e03f      	b.n	8003cc2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d106      	bne.n	8003c5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f7fd f8a2 	bl	8000da0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2224      	movs	r2, #36	; 0x24
 8003c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68da      	ldr	r2, [r3, #12]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f000 fddf 	bl	8004838 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	691a      	ldr	r2, [r3, #16]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	695a      	ldr	r2, [r3, #20]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68da      	ldr	r2, [r3, #12]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ca8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2220      	movs	r2, #32
 8003cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3708      	adds	r7, #8
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b08a      	sub	sp, #40	; 0x28
 8003cce:	af02      	add	r7, sp, #8
 8003cd0:	60f8      	str	r0, [r7, #12]
 8003cd2:	60b9      	str	r1, [r7, #8]
 8003cd4:	603b      	str	r3, [r7, #0]
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	2b20      	cmp	r3, #32
 8003ce8:	d17c      	bne.n	8003de4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d002      	beq.n	8003cf6 <HAL_UART_Transmit+0x2c>
 8003cf0:	88fb      	ldrh	r3, [r7, #6]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e075      	b.n	8003de6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d101      	bne.n	8003d08 <HAL_UART_Transmit+0x3e>
 8003d04:	2302      	movs	r3, #2
 8003d06:	e06e      	b.n	8003de6 <HAL_UART_Transmit+0x11c>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2221      	movs	r2, #33	; 0x21
 8003d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d1e:	f7fd f9eb 	bl	80010f8 <HAL_GetTick>
 8003d22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	88fa      	ldrh	r2, [r7, #6]
 8003d28:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	88fa      	ldrh	r2, [r7, #6]
 8003d2e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d38:	d108      	bne.n	8003d4c <HAL_UART_Transmit+0x82>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d104      	bne.n	8003d4c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003d42:	2300      	movs	r3, #0
 8003d44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	61bb      	str	r3, [r7, #24]
 8003d4a:	e003      	b.n	8003d54 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d50:	2300      	movs	r3, #0
 8003d52:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003d5c:	e02a      	b.n	8003db4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	9300      	str	r3, [sp, #0]
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	2200      	movs	r2, #0
 8003d66:	2180      	movs	r1, #128	; 0x80
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f000 fb1f 	bl	80043ac <UART_WaitOnFlagUntilTimeout>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d001      	beq.n	8003d78 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e036      	b.n	8003de6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d10b      	bne.n	8003d96 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	881b      	ldrh	r3, [r3, #0]
 8003d82:	461a      	mov	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d8c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	3302      	adds	r3, #2
 8003d92:	61bb      	str	r3, [r7, #24]
 8003d94:	e007      	b.n	8003da6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	781a      	ldrb	r2, [r3, #0]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	3301      	adds	r3, #1
 8003da4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	3b01      	subs	r3, #1
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1cf      	bne.n	8003d5e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	9300      	str	r3, [sp, #0]
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	2140      	movs	r1, #64	; 0x40
 8003dc8:	68f8      	ldr	r0, [r7, #12]
 8003dca:	f000 faef 	bl	80043ac <UART_WaitOnFlagUntilTimeout>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d001      	beq.n	8003dd8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e006      	b.n	8003de6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2220      	movs	r2, #32
 8003ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003de0:	2300      	movs	r3, #0
 8003de2:	e000      	b.n	8003de6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003de4:	2302      	movs	r3, #2
  }
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3720      	adds	r7, #32
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b084      	sub	sp, #16
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	60f8      	str	r0, [r7, #12]
 8003df6:	60b9      	str	r1, [r7, #8]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b20      	cmp	r3, #32
 8003e06:	d11d      	bne.n	8003e44 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d002      	beq.n	8003e14 <HAL_UART_Receive_IT+0x26>
 8003e0e:	88fb      	ldrh	r3, [r7, #6]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d101      	bne.n	8003e18 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e016      	b.n	8003e46 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d101      	bne.n	8003e26 <HAL_UART_Receive_IT+0x38>
 8003e22:	2302      	movs	r3, #2
 8003e24:	e00f      	b.n	8003e46 <HAL_UART_Receive_IT+0x58>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003e34:	88fb      	ldrh	r3, [r7, #6]
 8003e36:	461a      	mov	r2, r3
 8003e38:	68b9      	ldr	r1, [r7, #8]
 8003e3a:	68f8      	ldr	r0, [r7, #12]
 8003e3c:	f000 fb24 	bl	8004488 <UART_Start_Receive_IT>
 8003e40:	4603      	mov	r3, r0
 8003e42:	e000      	b.n	8003e46 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003e44:	2302      	movs	r3, #2
  }
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
	...

08003e50 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b0ba      	sub	sp, #232	; 0xe8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003e76:	2300      	movs	r3, #0
 8003e78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e86:	f003 030f 	and.w	r3, r3, #15
 8003e8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003e8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d10f      	bne.n	8003eb6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e9a:	f003 0320 	and.w	r3, r3, #32
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d009      	beq.n	8003eb6 <HAL_UART_IRQHandler+0x66>
 8003ea2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ea6:	f003 0320 	and.w	r3, r3, #32
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d003      	beq.n	8003eb6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 fc07 	bl	80046c2 <UART_Receive_IT>
      return;
 8003eb4:	e256      	b.n	8004364 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003eb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f000 80de 	beq.w	800407c <HAL_UART_IRQHandler+0x22c>
 8003ec0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ec4:	f003 0301 	and.w	r3, r3, #1
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d106      	bne.n	8003eda <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003ecc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ed0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f000 80d1 	beq.w	800407c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00b      	beq.n	8003efe <HAL_UART_IRQHandler+0xae>
 8003ee6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d005      	beq.n	8003efe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef6:	f043 0201 	orr.w	r2, r3, #1
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003efe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f02:	f003 0304 	and.w	r3, r3, #4
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00b      	beq.n	8003f22 <HAL_UART_IRQHandler+0xd2>
 8003f0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d005      	beq.n	8003f22 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1a:	f043 0202 	orr.w	r2, r3, #2
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00b      	beq.n	8003f46 <HAL_UART_IRQHandler+0xf6>
 8003f2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d005      	beq.n	8003f46 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3e:	f043 0204 	orr.w	r2, r3, #4
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f4a:	f003 0308 	and.w	r3, r3, #8
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d011      	beq.n	8003f76 <HAL_UART_IRQHandler+0x126>
 8003f52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f56:	f003 0320 	and.w	r3, r3, #32
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d105      	bne.n	8003f6a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d005      	beq.n	8003f76 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6e:	f043 0208 	orr.w	r2, r3, #8
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f000 81ed 	beq.w	800435a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f84:	f003 0320 	and.w	r3, r3, #32
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d008      	beq.n	8003f9e <HAL_UART_IRQHandler+0x14e>
 8003f8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f90:	f003 0320 	and.w	r3, r3, #32
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d002      	beq.n	8003f9e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 fb92 	bl	80046c2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	695b      	ldr	r3, [r3, #20]
 8003fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa8:	2b40      	cmp	r3, #64	; 0x40
 8003faa:	bf0c      	ite	eq
 8003fac:	2301      	moveq	r3, #1
 8003fae:	2300      	movne	r3, #0
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fba:	f003 0308 	and.w	r3, r3, #8
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d103      	bne.n	8003fca <HAL_UART_IRQHandler+0x17a>
 8003fc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d04f      	beq.n	800406a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 fa9a 	bl	8004504 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fda:	2b40      	cmp	r3, #64	; 0x40
 8003fdc:	d141      	bne.n	8004062 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	3314      	adds	r3, #20
 8003fe4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003fec:	e853 3f00 	ldrex	r3, [r3]
 8003ff0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003ff4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ff8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ffc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	3314      	adds	r3, #20
 8004006:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800400a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800400e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004012:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004016:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800401a:	e841 2300 	strex	r3, r2, [r1]
 800401e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004022:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1d9      	bne.n	8003fde <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402e:	2b00      	cmp	r3, #0
 8004030:	d013      	beq.n	800405a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004036:	4a7d      	ldr	r2, [pc, #500]	; (800422c <HAL_UART_IRQHandler+0x3dc>)
 8004038:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800403e:	4618      	mov	r0, r3
 8004040:	f7fe fb05 	bl	800264e <HAL_DMA_Abort_IT>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d016      	beq.n	8004078 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800404e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004054:	4610      	mov	r0, r2
 8004056:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004058:	e00e      	b.n	8004078 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 f990 	bl	8004380 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004060:	e00a      	b.n	8004078 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 f98c 	bl	8004380 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004068:	e006      	b.n	8004078 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 f988 	bl	8004380 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004076:	e170      	b.n	800435a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004078:	bf00      	nop
    return;
 800407a:	e16e      	b.n	800435a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004080:	2b01      	cmp	r3, #1
 8004082:	f040 814a 	bne.w	800431a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800408a:	f003 0310 	and.w	r3, r3, #16
 800408e:	2b00      	cmp	r3, #0
 8004090:	f000 8143 	beq.w	800431a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004098:	f003 0310 	and.w	r3, r3, #16
 800409c:	2b00      	cmp	r3, #0
 800409e:	f000 813c 	beq.w	800431a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040a2:	2300      	movs	r3, #0
 80040a4:	60bb      	str	r3, [r7, #8]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	60bb      	str	r3, [r7, #8]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	60bb      	str	r3, [r7, #8]
 80040b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c2:	2b40      	cmp	r3, #64	; 0x40
 80040c4:	f040 80b4 	bne.w	8004230 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80040d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f000 8140 	beq.w	800435e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80040e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80040e6:	429a      	cmp	r2, r3
 80040e8:	f080 8139 	bcs.w	800435e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80040f2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f8:	69db      	ldr	r3, [r3, #28]
 80040fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040fe:	f000 8088 	beq.w	8004212 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	330c      	adds	r3, #12
 8004108:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800410c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004110:	e853 3f00 	ldrex	r3, [r3]
 8004114:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004118:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800411c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004120:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	330c      	adds	r3, #12
 800412a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800412e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004132:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004136:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800413a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800413e:	e841 2300 	strex	r3, r2, [r1]
 8004142:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004146:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1d9      	bne.n	8004102 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	3314      	adds	r3, #20
 8004154:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004156:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004158:	e853 3f00 	ldrex	r3, [r3]
 800415c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800415e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004160:	f023 0301 	bic.w	r3, r3, #1
 8004164:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	3314      	adds	r3, #20
 800416e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004172:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004176:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004178:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800417a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800417e:	e841 2300 	strex	r3, r2, [r1]
 8004182:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004184:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1e1      	bne.n	800414e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	3314      	adds	r3, #20
 8004190:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004192:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004194:	e853 3f00 	ldrex	r3, [r3]
 8004198:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800419a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800419c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	3314      	adds	r3, #20
 80041aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80041ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80041b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80041b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80041b6:	e841 2300 	strex	r3, r2, [r1]
 80041ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80041bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d1e3      	bne.n	800418a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2220      	movs	r2, #32
 80041c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	330c      	adds	r3, #12
 80041d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041da:	e853 3f00 	ldrex	r3, [r3]
 80041de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80041e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041e2:	f023 0310 	bic.w	r3, r3, #16
 80041e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	330c      	adds	r3, #12
 80041f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80041f4:	65ba      	str	r2, [r7, #88]	; 0x58
 80041f6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80041fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80041fc:	e841 2300 	strex	r3, r2, [r1]
 8004200:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004202:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1e3      	bne.n	80041d0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800420c:	4618      	mov	r0, r3
 800420e:	f7fe f9ae 	bl	800256e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800421a:	b29b      	uxth	r3, r3
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	b29b      	uxth	r3, r3
 8004220:	4619      	mov	r1, r3
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 f8b6 	bl	8004394 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004228:	e099      	b.n	800435e <HAL_UART_IRQHandler+0x50e>
 800422a:	bf00      	nop
 800422c:	080045cb 	.word	0x080045cb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004238:	b29b      	uxth	r3, r3
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004244:	b29b      	uxth	r3, r3
 8004246:	2b00      	cmp	r3, #0
 8004248:	f000 808b 	beq.w	8004362 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800424c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004250:	2b00      	cmp	r3, #0
 8004252:	f000 8086 	beq.w	8004362 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	330c      	adds	r3, #12
 800425c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800425e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004260:	e853 3f00 	ldrex	r3, [r3]
 8004264:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004268:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800426c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	330c      	adds	r3, #12
 8004276:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800427a:	647a      	str	r2, [r7, #68]	; 0x44
 800427c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800427e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004280:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004282:	e841 2300 	strex	r3, r2, [r1]
 8004286:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1e3      	bne.n	8004256 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	3314      	adds	r3, #20
 8004294:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004298:	e853 3f00 	ldrex	r3, [r3]
 800429c:	623b      	str	r3, [r7, #32]
   return(result);
 800429e:	6a3b      	ldr	r3, [r7, #32]
 80042a0:	f023 0301 	bic.w	r3, r3, #1
 80042a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	3314      	adds	r3, #20
 80042ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80042b2:	633a      	str	r2, [r7, #48]	; 0x30
 80042b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042ba:	e841 2300 	strex	r3, r2, [r1]
 80042be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80042c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1e3      	bne.n	800428e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2220      	movs	r2, #32
 80042ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	330c      	adds	r3, #12
 80042da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	e853 3f00 	ldrex	r3, [r3]
 80042e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f023 0310 	bic.w	r3, r3, #16
 80042ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	330c      	adds	r3, #12
 80042f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80042f8:	61fa      	str	r2, [r7, #28]
 80042fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fc:	69b9      	ldr	r1, [r7, #24]
 80042fe:	69fa      	ldr	r2, [r7, #28]
 8004300:	e841 2300 	strex	r3, r2, [r1]
 8004304:	617b      	str	r3, [r7, #20]
   return(result);
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d1e3      	bne.n	80042d4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800430c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004310:	4619      	mov	r1, r3
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 f83e 	bl	8004394 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004318:	e023      	b.n	8004362 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800431a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800431e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004322:	2b00      	cmp	r3, #0
 8004324:	d009      	beq.n	800433a <HAL_UART_IRQHandler+0x4ea>
 8004326:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800432a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800432e:	2b00      	cmp	r3, #0
 8004330:	d003      	beq.n	800433a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 f95d 	bl	80045f2 <UART_Transmit_IT>
    return;
 8004338:	e014      	b.n	8004364 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800433a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800433e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00e      	beq.n	8004364 <HAL_UART_IRQHandler+0x514>
 8004346:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800434a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800434e:	2b00      	cmp	r3, #0
 8004350:	d008      	beq.n	8004364 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 f99d 	bl	8004692 <UART_EndTransmit_IT>
    return;
 8004358:	e004      	b.n	8004364 <HAL_UART_IRQHandler+0x514>
    return;
 800435a:	bf00      	nop
 800435c:	e002      	b.n	8004364 <HAL_UART_IRQHandler+0x514>
      return;
 800435e:	bf00      	nop
 8004360:	e000      	b.n	8004364 <HAL_UART_IRQHandler+0x514>
      return;
 8004362:	bf00      	nop
  }
}
 8004364:	37e8      	adds	r7, #232	; 0xe8
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop

0800436c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004374:	bf00      	nop
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004388:	bf00      	nop
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	460b      	mov	r3, r1
 800439e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80043a0:	bf00      	nop
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b090      	sub	sp, #64	; 0x40
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	603b      	str	r3, [r7, #0]
 80043b8:	4613      	mov	r3, r2
 80043ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043bc:	e050      	b.n	8004460 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c4:	d04c      	beq.n	8004460 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80043c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d007      	beq.n	80043dc <UART_WaitOnFlagUntilTimeout+0x30>
 80043cc:	f7fc fe94 	bl	80010f8 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043d8:	429a      	cmp	r2, r3
 80043da:	d241      	bcs.n	8004460 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	330c      	adds	r3, #12
 80043e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e6:	e853 3f00 	ldrex	r3, [r3]
 80043ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80043f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	330c      	adds	r3, #12
 80043fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80043fc:	637a      	str	r2, [r7, #52]	; 0x34
 80043fe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004400:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004402:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004404:	e841 2300 	strex	r3, r2, [r1]
 8004408:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800440a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1e5      	bne.n	80043dc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	3314      	adds	r3, #20
 8004416:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	e853 3f00 	ldrex	r3, [r3]
 800441e:	613b      	str	r3, [r7, #16]
   return(result);
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	f023 0301 	bic.w	r3, r3, #1
 8004426:	63bb      	str	r3, [r7, #56]	; 0x38
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	3314      	adds	r3, #20
 800442e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004430:	623a      	str	r2, [r7, #32]
 8004432:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004434:	69f9      	ldr	r1, [r7, #28]
 8004436:	6a3a      	ldr	r2, [r7, #32]
 8004438:	e841 2300 	strex	r3, r2, [r1]
 800443c:	61bb      	str	r3, [r7, #24]
   return(result);
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d1e5      	bne.n	8004410 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2220      	movs	r2, #32
 8004448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2220      	movs	r2, #32
 8004450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	e00f      	b.n	8004480 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	4013      	ands	r3, r2
 800446a:	68ba      	ldr	r2, [r7, #8]
 800446c:	429a      	cmp	r2, r3
 800446e:	bf0c      	ite	eq
 8004470:	2301      	moveq	r3, #1
 8004472:	2300      	movne	r3, #0
 8004474:	b2db      	uxtb	r3, r3
 8004476:	461a      	mov	r2, r3
 8004478:	79fb      	ldrb	r3, [r7, #7]
 800447a:	429a      	cmp	r2, r3
 800447c:	d09f      	beq.n	80043be <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	3740      	adds	r7, #64	; 0x40
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004488:	b480      	push	{r7}
 800448a:	b085      	sub	sp, #20
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	4613      	mov	r3, r2
 8004494:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	68ba      	ldr	r2, [r7, #8]
 800449a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	88fa      	ldrh	r2, [r7, #6]
 80044a0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	88fa      	ldrh	r2, [r7, #6]
 80044a6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2222      	movs	r2, #34	; 0x22
 80044b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d007      	beq.n	80044d6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68da      	ldr	r2, [r3, #12]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044d4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	695a      	ldr	r2, [r3, #20]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f042 0201 	orr.w	r2, r2, #1
 80044e4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68da      	ldr	r2, [r3, #12]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f042 0220 	orr.w	r2, r2, #32
 80044f4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3714      	adds	r7, #20
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004504:	b480      	push	{r7}
 8004506:	b095      	sub	sp, #84	; 0x54
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	330c      	adds	r3, #12
 8004512:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004516:	e853 3f00 	ldrex	r3, [r3]
 800451a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800451c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800451e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004522:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	330c      	adds	r3, #12
 800452a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800452c:	643a      	str	r2, [r7, #64]	; 0x40
 800452e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004530:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004532:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004534:	e841 2300 	strex	r3, r2, [r1]
 8004538:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800453a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1e5      	bne.n	800450c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	3314      	adds	r3, #20
 8004546:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004548:	6a3b      	ldr	r3, [r7, #32]
 800454a:	e853 3f00 	ldrex	r3, [r3]
 800454e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	f023 0301 	bic.w	r3, r3, #1
 8004556:	64bb      	str	r3, [r7, #72]	; 0x48
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	3314      	adds	r3, #20
 800455e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004560:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004562:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004564:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004566:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004568:	e841 2300 	strex	r3, r2, [r1]
 800456c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800456e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1e5      	bne.n	8004540 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004578:	2b01      	cmp	r3, #1
 800457a:	d119      	bne.n	80045b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	330c      	adds	r3, #12
 8004582:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	e853 3f00 	ldrex	r3, [r3]
 800458a:	60bb      	str	r3, [r7, #8]
   return(result);
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	f023 0310 	bic.w	r3, r3, #16
 8004592:	647b      	str	r3, [r7, #68]	; 0x44
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	330c      	adds	r3, #12
 800459a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800459c:	61ba      	str	r2, [r7, #24]
 800459e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a0:	6979      	ldr	r1, [r7, #20]
 80045a2:	69ba      	ldr	r2, [r7, #24]
 80045a4:	e841 2300 	strex	r3, r2, [r1]
 80045a8:	613b      	str	r3, [r7, #16]
   return(result);
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1e5      	bne.n	800457c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2220      	movs	r2, #32
 80045b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80045be:	bf00      	nop
 80045c0:	3754      	adds	r7, #84	; 0x54
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr

080045ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b084      	sub	sp, #16
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2200      	movs	r2, #0
 80045e2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045e4:	68f8      	ldr	r0, [r7, #12]
 80045e6:	f7ff fecb 	bl	8004380 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045ea:	bf00      	nop
 80045ec:	3710      	adds	r7, #16
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80045f2:	b480      	push	{r7}
 80045f4:	b085      	sub	sp, #20
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b21      	cmp	r3, #33	; 0x21
 8004604:	d13e      	bne.n	8004684 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800460e:	d114      	bne.n	800463a <UART_Transmit_IT+0x48>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d110      	bne.n	800463a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a1b      	ldr	r3, [r3, #32]
 800461c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	881b      	ldrh	r3, [r3, #0]
 8004622:	461a      	mov	r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800462c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a1b      	ldr	r3, [r3, #32]
 8004632:	1c9a      	adds	r2, r3, #2
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	621a      	str	r2, [r3, #32]
 8004638:	e008      	b.n	800464c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a1b      	ldr	r3, [r3, #32]
 800463e:	1c59      	adds	r1, r3, #1
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	6211      	str	r1, [r2, #32]
 8004644:	781a      	ldrb	r2, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004650:	b29b      	uxth	r3, r3
 8004652:	3b01      	subs	r3, #1
 8004654:	b29b      	uxth	r3, r3
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	4619      	mov	r1, r3
 800465a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800465c:	2b00      	cmp	r3, #0
 800465e:	d10f      	bne.n	8004680 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68da      	ldr	r2, [r3, #12]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800466e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68da      	ldr	r2, [r3, #12]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800467e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004680:	2300      	movs	r3, #0
 8004682:	e000      	b.n	8004686 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004684:	2302      	movs	r3, #2
  }
}
 8004686:	4618      	mov	r0, r3
 8004688:	3714      	adds	r7, #20
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr

08004692 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004692:	b580      	push	{r7, lr}
 8004694:	b082      	sub	sp, #8
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68da      	ldr	r2, [r3, #12]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046a8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2220      	movs	r2, #32
 80046ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f7ff fe5a 	bl	800436c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3708      	adds	r7, #8
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b08c      	sub	sp, #48	; 0x30
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	2b22      	cmp	r3, #34	; 0x22
 80046d4:	f040 80ab 	bne.w	800482e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046e0:	d117      	bne.n	8004712 <UART_Receive_IT+0x50>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d113      	bne.n	8004712 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80046ea:	2300      	movs	r3, #0
 80046ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004700:	b29a      	uxth	r2, r3
 8004702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004704:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800470a:	1c9a      	adds	r2, r3, #2
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	629a      	str	r2, [r3, #40]	; 0x28
 8004710:	e026      	b.n	8004760 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004716:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004718:	2300      	movs	r3, #0
 800471a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004724:	d007      	beq.n	8004736 <UART_Receive_IT+0x74>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10a      	bne.n	8004744 <UART_Receive_IT+0x82>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d106      	bne.n	8004744 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	b2da      	uxtb	r2, r3
 800473e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004740:	701a      	strb	r2, [r3, #0]
 8004742:	e008      	b.n	8004756 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	b2db      	uxtb	r3, r3
 800474c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004750:	b2da      	uxtb	r2, r3
 8004752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004754:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800475a:	1c5a      	adds	r2, r3, #1
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004764:	b29b      	uxth	r3, r3
 8004766:	3b01      	subs	r3, #1
 8004768:	b29b      	uxth	r3, r3
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	4619      	mov	r1, r3
 800476e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004770:	2b00      	cmp	r3, #0
 8004772:	d15a      	bne.n	800482a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68da      	ldr	r2, [r3, #12]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f022 0220 	bic.w	r2, r2, #32
 8004782:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68da      	ldr	r2, [r3, #12]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004792:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	695a      	ldr	r2, [r3, #20]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f022 0201 	bic.w	r2, r2, #1
 80047a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2220      	movs	r2, #32
 80047a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d135      	bne.n	8004820 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	330c      	adds	r3, #12
 80047c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	e853 3f00 	ldrex	r3, [r3]
 80047c8:	613b      	str	r3, [r7, #16]
   return(result);
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	f023 0310 	bic.w	r3, r3, #16
 80047d0:	627b      	str	r3, [r7, #36]	; 0x24
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	330c      	adds	r3, #12
 80047d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047da:	623a      	str	r2, [r7, #32]
 80047dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047de:	69f9      	ldr	r1, [r7, #28]
 80047e0:	6a3a      	ldr	r2, [r7, #32]
 80047e2:	e841 2300 	strex	r3, r2, [r1]
 80047e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d1e5      	bne.n	80047ba <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0310 	and.w	r3, r3, #16
 80047f8:	2b10      	cmp	r3, #16
 80047fa:	d10a      	bne.n	8004812 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80047fc:	2300      	movs	r3, #0
 80047fe:	60fb      	str	r3, [r7, #12]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	60fb      	str	r3, [r7, #12]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	60fb      	str	r3, [r7, #12]
 8004810:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004816:	4619      	mov	r1, r3
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f7ff fdbb 	bl	8004394 <HAL_UARTEx_RxEventCallback>
 800481e:	e002      	b.n	8004826 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f7fb fe6f 	bl	8000504 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004826:	2300      	movs	r3, #0
 8004828:	e002      	b.n	8004830 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800482a:	2300      	movs	r3, #0
 800482c:	e000      	b.n	8004830 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800482e:	2302      	movs	r3, #2
  }
}
 8004830:	4618      	mov	r0, r3
 8004832:	3730      	adds	r7, #48	; 0x30
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004838:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800483c:	b0c0      	sub	sp, #256	; 0x100
 800483e:	af00      	add	r7, sp, #0
 8004840:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004854:	68d9      	ldr	r1, [r3, #12]
 8004856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	ea40 0301 	orr.w	r3, r0, r1
 8004860:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004866:	689a      	ldr	r2, [r3, #8]
 8004868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	431a      	orrs	r2, r3
 8004870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	431a      	orrs	r2, r3
 8004878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800487c:	69db      	ldr	r3, [r3, #28]
 800487e:	4313      	orrs	r3, r2
 8004880:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004890:	f021 010c 	bic.w	r1, r1, #12
 8004894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800489e:	430b      	orrs	r3, r1
 80048a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80048ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048b2:	6999      	ldr	r1, [r3, #24]
 80048b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	ea40 0301 	orr.w	r3, r0, r1
 80048be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	4b8f      	ldr	r3, [pc, #572]	; (8004b04 <UART_SetConfig+0x2cc>)
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d005      	beq.n	80048d8 <UART_SetConfig+0xa0>
 80048cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	4b8d      	ldr	r3, [pc, #564]	; (8004b08 <UART_SetConfig+0x2d0>)
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d104      	bne.n	80048e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80048d8:	f7fe fd14 	bl	8003304 <HAL_RCC_GetPCLK2Freq>
 80048dc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80048e0:	e003      	b.n	80048ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80048e2:	f7fe fcfb 	bl	80032dc <HAL_RCC_GetPCLK1Freq>
 80048e6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ee:	69db      	ldr	r3, [r3, #28]
 80048f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048f4:	f040 810c 	bne.w	8004b10 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80048f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048fc:	2200      	movs	r2, #0
 80048fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004902:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004906:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800490a:	4622      	mov	r2, r4
 800490c:	462b      	mov	r3, r5
 800490e:	1891      	adds	r1, r2, r2
 8004910:	65b9      	str	r1, [r7, #88]	; 0x58
 8004912:	415b      	adcs	r3, r3
 8004914:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004916:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800491a:	4621      	mov	r1, r4
 800491c:	eb12 0801 	adds.w	r8, r2, r1
 8004920:	4629      	mov	r1, r5
 8004922:	eb43 0901 	adc.w	r9, r3, r1
 8004926:	f04f 0200 	mov.w	r2, #0
 800492a:	f04f 0300 	mov.w	r3, #0
 800492e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004932:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004936:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800493a:	4690      	mov	r8, r2
 800493c:	4699      	mov	r9, r3
 800493e:	4623      	mov	r3, r4
 8004940:	eb18 0303 	adds.w	r3, r8, r3
 8004944:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004948:	462b      	mov	r3, r5
 800494a:	eb49 0303 	adc.w	r3, r9, r3
 800494e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800495e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004962:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004966:	460b      	mov	r3, r1
 8004968:	18db      	adds	r3, r3, r3
 800496a:	653b      	str	r3, [r7, #80]	; 0x50
 800496c:	4613      	mov	r3, r2
 800496e:	eb42 0303 	adc.w	r3, r2, r3
 8004972:	657b      	str	r3, [r7, #84]	; 0x54
 8004974:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004978:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800497c:	f7fb fc24 	bl	80001c8 <__aeabi_uldivmod>
 8004980:	4602      	mov	r2, r0
 8004982:	460b      	mov	r3, r1
 8004984:	4b61      	ldr	r3, [pc, #388]	; (8004b0c <UART_SetConfig+0x2d4>)
 8004986:	fba3 2302 	umull	r2, r3, r3, r2
 800498a:	095b      	lsrs	r3, r3, #5
 800498c:	011c      	lsls	r4, r3, #4
 800498e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004992:	2200      	movs	r2, #0
 8004994:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004998:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800499c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80049a0:	4642      	mov	r2, r8
 80049a2:	464b      	mov	r3, r9
 80049a4:	1891      	adds	r1, r2, r2
 80049a6:	64b9      	str	r1, [r7, #72]	; 0x48
 80049a8:	415b      	adcs	r3, r3
 80049aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80049b0:	4641      	mov	r1, r8
 80049b2:	eb12 0a01 	adds.w	sl, r2, r1
 80049b6:	4649      	mov	r1, r9
 80049b8:	eb43 0b01 	adc.w	fp, r3, r1
 80049bc:	f04f 0200 	mov.w	r2, #0
 80049c0:	f04f 0300 	mov.w	r3, #0
 80049c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80049c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80049cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049d0:	4692      	mov	sl, r2
 80049d2:	469b      	mov	fp, r3
 80049d4:	4643      	mov	r3, r8
 80049d6:	eb1a 0303 	adds.w	r3, sl, r3
 80049da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049de:	464b      	mov	r3, r9
 80049e0:	eb4b 0303 	adc.w	r3, fp, r3
 80049e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80049e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049f4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80049f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80049fc:	460b      	mov	r3, r1
 80049fe:	18db      	adds	r3, r3, r3
 8004a00:	643b      	str	r3, [r7, #64]	; 0x40
 8004a02:	4613      	mov	r3, r2
 8004a04:	eb42 0303 	adc.w	r3, r2, r3
 8004a08:	647b      	str	r3, [r7, #68]	; 0x44
 8004a0a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a0e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004a12:	f7fb fbd9 	bl	80001c8 <__aeabi_uldivmod>
 8004a16:	4602      	mov	r2, r0
 8004a18:	460b      	mov	r3, r1
 8004a1a:	4611      	mov	r1, r2
 8004a1c:	4b3b      	ldr	r3, [pc, #236]	; (8004b0c <UART_SetConfig+0x2d4>)
 8004a1e:	fba3 2301 	umull	r2, r3, r3, r1
 8004a22:	095b      	lsrs	r3, r3, #5
 8004a24:	2264      	movs	r2, #100	; 0x64
 8004a26:	fb02 f303 	mul.w	r3, r2, r3
 8004a2a:	1acb      	subs	r3, r1, r3
 8004a2c:	00db      	lsls	r3, r3, #3
 8004a2e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004a32:	4b36      	ldr	r3, [pc, #216]	; (8004b0c <UART_SetConfig+0x2d4>)
 8004a34:	fba3 2302 	umull	r2, r3, r3, r2
 8004a38:	095b      	lsrs	r3, r3, #5
 8004a3a:	005b      	lsls	r3, r3, #1
 8004a3c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a40:	441c      	add	r4, r3
 8004a42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a46:	2200      	movs	r2, #0
 8004a48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a4c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004a50:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004a54:	4642      	mov	r2, r8
 8004a56:	464b      	mov	r3, r9
 8004a58:	1891      	adds	r1, r2, r2
 8004a5a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a5c:	415b      	adcs	r3, r3
 8004a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004a64:	4641      	mov	r1, r8
 8004a66:	1851      	adds	r1, r2, r1
 8004a68:	6339      	str	r1, [r7, #48]	; 0x30
 8004a6a:	4649      	mov	r1, r9
 8004a6c:	414b      	adcs	r3, r1
 8004a6e:	637b      	str	r3, [r7, #52]	; 0x34
 8004a70:	f04f 0200 	mov.w	r2, #0
 8004a74:	f04f 0300 	mov.w	r3, #0
 8004a78:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004a7c:	4659      	mov	r1, fp
 8004a7e:	00cb      	lsls	r3, r1, #3
 8004a80:	4651      	mov	r1, sl
 8004a82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a86:	4651      	mov	r1, sl
 8004a88:	00ca      	lsls	r2, r1, #3
 8004a8a:	4610      	mov	r0, r2
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	4603      	mov	r3, r0
 8004a90:	4642      	mov	r2, r8
 8004a92:	189b      	adds	r3, r3, r2
 8004a94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a98:	464b      	mov	r3, r9
 8004a9a:	460a      	mov	r2, r1
 8004a9c:	eb42 0303 	adc.w	r3, r2, r3
 8004aa0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004ab0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004ab4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004ab8:	460b      	mov	r3, r1
 8004aba:	18db      	adds	r3, r3, r3
 8004abc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004abe:	4613      	mov	r3, r2
 8004ac0:	eb42 0303 	adc.w	r3, r2, r3
 8004ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ac6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004aca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004ace:	f7fb fb7b 	bl	80001c8 <__aeabi_uldivmod>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	4b0d      	ldr	r3, [pc, #52]	; (8004b0c <UART_SetConfig+0x2d4>)
 8004ad8:	fba3 1302 	umull	r1, r3, r3, r2
 8004adc:	095b      	lsrs	r3, r3, #5
 8004ade:	2164      	movs	r1, #100	; 0x64
 8004ae0:	fb01 f303 	mul.w	r3, r1, r3
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	00db      	lsls	r3, r3, #3
 8004ae8:	3332      	adds	r3, #50	; 0x32
 8004aea:	4a08      	ldr	r2, [pc, #32]	; (8004b0c <UART_SetConfig+0x2d4>)
 8004aec:	fba2 2303 	umull	r2, r3, r2, r3
 8004af0:	095b      	lsrs	r3, r3, #5
 8004af2:	f003 0207 	and.w	r2, r3, #7
 8004af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4422      	add	r2, r4
 8004afe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b00:	e105      	b.n	8004d0e <UART_SetConfig+0x4d6>
 8004b02:	bf00      	nop
 8004b04:	40011000 	.word	0x40011000
 8004b08:	40011400 	.word	0x40011400
 8004b0c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b14:	2200      	movs	r2, #0
 8004b16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004b1a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004b1e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004b22:	4642      	mov	r2, r8
 8004b24:	464b      	mov	r3, r9
 8004b26:	1891      	adds	r1, r2, r2
 8004b28:	6239      	str	r1, [r7, #32]
 8004b2a:	415b      	adcs	r3, r3
 8004b2c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b32:	4641      	mov	r1, r8
 8004b34:	1854      	adds	r4, r2, r1
 8004b36:	4649      	mov	r1, r9
 8004b38:	eb43 0501 	adc.w	r5, r3, r1
 8004b3c:	f04f 0200 	mov.w	r2, #0
 8004b40:	f04f 0300 	mov.w	r3, #0
 8004b44:	00eb      	lsls	r3, r5, #3
 8004b46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b4a:	00e2      	lsls	r2, r4, #3
 8004b4c:	4614      	mov	r4, r2
 8004b4e:	461d      	mov	r5, r3
 8004b50:	4643      	mov	r3, r8
 8004b52:	18e3      	adds	r3, r4, r3
 8004b54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004b58:	464b      	mov	r3, r9
 8004b5a:	eb45 0303 	adc.w	r3, r5, r3
 8004b5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004b6e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b72:	f04f 0200 	mov.w	r2, #0
 8004b76:	f04f 0300 	mov.w	r3, #0
 8004b7a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004b7e:	4629      	mov	r1, r5
 8004b80:	008b      	lsls	r3, r1, #2
 8004b82:	4621      	mov	r1, r4
 8004b84:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b88:	4621      	mov	r1, r4
 8004b8a:	008a      	lsls	r2, r1, #2
 8004b8c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004b90:	f7fb fb1a 	bl	80001c8 <__aeabi_uldivmod>
 8004b94:	4602      	mov	r2, r0
 8004b96:	460b      	mov	r3, r1
 8004b98:	4b60      	ldr	r3, [pc, #384]	; (8004d1c <UART_SetConfig+0x4e4>)
 8004b9a:	fba3 2302 	umull	r2, r3, r3, r2
 8004b9e:	095b      	lsrs	r3, r3, #5
 8004ba0:	011c      	lsls	r4, r3, #4
 8004ba2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004bac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004bb0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004bb4:	4642      	mov	r2, r8
 8004bb6:	464b      	mov	r3, r9
 8004bb8:	1891      	adds	r1, r2, r2
 8004bba:	61b9      	str	r1, [r7, #24]
 8004bbc:	415b      	adcs	r3, r3
 8004bbe:	61fb      	str	r3, [r7, #28]
 8004bc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bc4:	4641      	mov	r1, r8
 8004bc6:	1851      	adds	r1, r2, r1
 8004bc8:	6139      	str	r1, [r7, #16]
 8004bca:	4649      	mov	r1, r9
 8004bcc:	414b      	adcs	r3, r1
 8004bce:	617b      	str	r3, [r7, #20]
 8004bd0:	f04f 0200 	mov.w	r2, #0
 8004bd4:	f04f 0300 	mov.w	r3, #0
 8004bd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004bdc:	4659      	mov	r1, fp
 8004bde:	00cb      	lsls	r3, r1, #3
 8004be0:	4651      	mov	r1, sl
 8004be2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004be6:	4651      	mov	r1, sl
 8004be8:	00ca      	lsls	r2, r1, #3
 8004bea:	4610      	mov	r0, r2
 8004bec:	4619      	mov	r1, r3
 8004bee:	4603      	mov	r3, r0
 8004bf0:	4642      	mov	r2, r8
 8004bf2:	189b      	adds	r3, r3, r2
 8004bf4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004bf8:	464b      	mov	r3, r9
 8004bfa:	460a      	mov	r2, r1
 8004bfc:	eb42 0303 	adc.w	r3, r2, r3
 8004c00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c0e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004c10:	f04f 0200 	mov.w	r2, #0
 8004c14:	f04f 0300 	mov.w	r3, #0
 8004c18:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004c1c:	4649      	mov	r1, r9
 8004c1e:	008b      	lsls	r3, r1, #2
 8004c20:	4641      	mov	r1, r8
 8004c22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c26:	4641      	mov	r1, r8
 8004c28:	008a      	lsls	r2, r1, #2
 8004c2a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004c2e:	f7fb facb 	bl	80001c8 <__aeabi_uldivmod>
 8004c32:	4602      	mov	r2, r0
 8004c34:	460b      	mov	r3, r1
 8004c36:	4b39      	ldr	r3, [pc, #228]	; (8004d1c <UART_SetConfig+0x4e4>)
 8004c38:	fba3 1302 	umull	r1, r3, r3, r2
 8004c3c:	095b      	lsrs	r3, r3, #5
 8004c3e:	2164      	movs	r1, #100	; 0x64
 8004c40:	fb01 f303 	mul.w	r3, r1, r3
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	011b      	lsls	r3, r3, #4
 8004c48:	3332      	adds	r3, #50	; 0x32
 8004c4a:	4a34      	ldr	r2, [pc, #208]	; (8004d1c <UART_SetConfig+0x4e4>)
 8004c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c50:	095b      	lsrs	r3, r3, #5
 8004c52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c56:	441c      	add	r4, r3
 8004c58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	673b      	str	r3, [r7, #112]	; 0x70
 8004c60:	677a      	str	r2, [r7, #116]	; 0x74
 8004c62:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004c66:	4642      	mov	r2, r8
 8004c68:	464b      	mov	r3, r9
 8004c6a:	1891      	adds	r1, r2, r2
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	415b      	adcs	r3, r3
 8004c70:	60fb      	str	r3, [r7, #12]
 8004c72:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c76:	4641      	mov	r1, r8
 8004c78:	1851      	adds	r1, r2, r1
 8004c7a:	6039      	str	r1, [r7, #0]
 8004c7c:	4649      	mov	r1, r9
 8004c7e:	414b      	adcs	r3, r1
 8004c80:	607b      	str	r3, [r7, #4]
 8004c82:	f04f 0200 	mov.w	r2, #0
 8004c86:	f04f 0300 	mov.w	r3, #0
 8004c8a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c8e:	4659      	mov	r1, fp
 8004c90:	00cb      	lsls	r3, r1, #3
 8004c92:	4651      	mov	r1, sl
 8004c94:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c98:	4651      	mov	r1, sl
 8004c9a:	00ca      	lsls	r2, r1, #3
 8004c9c:	4610      	mov	r0, r2
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	4642      	mov	r2, r8
 8004ca4:	189b      	adds	r3, r3, r2
 8004ca6:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ca8:	464b      	mov	r3, r9
 8004caa:	460a      	mov	r2, r1
 8004cac:	eb42 0303 	adc.w	r3, r2, r3
 8004cb0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	663b      	str	r3, [r7, #96]	; 0x60
 8004cbc:	667a      	str	r2, [r7, #100]	; 0x64
 8004cbe:	f04f 0200 	mov.w	r2, #0
 8004cc2:	f04f 0300 	mov.w	r3, #0
 8004cc6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004cca:	4649      	mov	r1, r9
 8004ccc:	008b      	lsls	r3, r1, #2
 8004cce:	4641      	mov	r1, r8
 8004cd0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cd4:	4641      	mov	r1, r8
 8004cd6:	008a      	lsls	r2, r1, #2
 8004cd8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004cdc:	f7fb fa74 	bl	80001c8 <__aeabi_uldivmod>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	4b0d      	ldr	r3, [pc, #52]	; (8004d1c <UART_SetConfig+0x4e4>)
 8004ce6:	fba3 1302 	umull	r1, r3, r3, r2
 8004cea:	095b      	lsrs	r3, r3, #5
 8004cec:	2164      	movs	r1, #100	; 0x64
 8004cee:	fb01 f303 	mul.w	r3, r1, r3
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	011b      	lsls	r3, r3, #4
 8004cf6:	3332      	adds	r3, #50	; 0x32
 8004cf8:	4a08      	ldr	r2, [pc, #32]	; (8004d1c <UART_SetConfig+0x4e4>)
 8004cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8004cfe:	095b      	lsrs	r3, r3, #5
 8004d00:	f003 020f 	and.w	r2, r3, #15
 8004d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4422      	add	r2, r4
 8004d0c:	609a      	str	r2, [r3, #8]
}
 8004d0e:	bf00      	nop
 8004d10:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004d14:	46bd      	mov	sp, r7
 8004d16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d1a:	bf00      	nop
 8004d1c:	51eb851f 	.word	0x51eb851f

08004d20 <__libc_init_array>:
 8004d20:	b570      	push	{r4, r5, r6, lr}
 8004d22:	4d0d      	ldr	r5, [pc, #52]	; (8004d58 <__libc_init_array+0x38>)
 8004d24:	4c0d      	ldr	r4, [pc, #52]	; (8004d5c <__libc_init_array+0x3c>)
 8004d26:	1b64      	subs	r4, r4, r5
 8004d28:	10a4      	asrs	r4, r4, #2
 8004d2a:	2600      	movs	r6, #0
 8004d2c:	42a6      	cmp	r6, r4
 8004d2e:	d109      	bne.n	8004d44 <__libc_init_array+0x24>
 8004d30:	4d0b      	ldr	r5, [pc, #44]	; (8004d60 <__libc_init_array+0x40>)
 8004d32:	4c0c      	ldr	r4, [pc, #48]	; (8004d64 <__libc_init_array+0x44>)
 8004d34:	f000 f820 	bl	8004d78 <_init>
 8004d38:	1b64      	subs	r4, r4, r5
 8004d3a:	10a4      	asrs	r4, r4, #2
 8004d3c:	2600      	movs	r6, #0
 8004d3e:	42a6      	cmp	r6, r4
 8004d40:	d105      	bne.n	8004d4e <__libc_init_array+0x2e>
 8004d42:	bd70      	pop	{r4, r5, r6, pc}
 8004d44:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d48:	4798      	blx	r3
 8004d4a:	3601      	adds	r6, #1
 8004d4c:	e7ee      	b.n	8004d2c <__libc_init_array+0xc>
 8004d4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d52:	4798      	blx	r3
 8004d54:	3601      	adds	r6, #1
 8004d56:	e7f2      	b.n	8004d3e <__libc_init_array+0x1e>
 8004d58:	08004db0 	.word	0x08004db0
 8004d5c:	08004db0 	.word	0x08004db0
 8004d60:	08004db0 	.word	0x08004db0
 8004d64:	08004db4 	.word	0x08004db4

08004d68 <memset>:
 8004d68:	4402      	add	r2, r0
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d100      	bne.n	8004d72 <memset+0xa>
 8004d70:	4770      	bx	lr
 8004d72:	f803 1b01 	strb.w	r1, [r3], #1
 8004d76:	e7f9      	b.n	8004d6c <memset+0x4>

08004d78 <_init>:
 8004d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d7a:	bf00      	nop
 8004d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d7e:	bc08      	pop	{r3}
 8004d80:	469e      	mov	lr, r3
 8004d82:	4770      	bx	lr

08004d84 <_fini>:
 8004d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d86:	bf00      	nop
 8004d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d8a:	bc08      	pop	{r3}
 8004d8c:	469e      	mov	lr, r3
 8004d8e:	4770      	bx	lr
