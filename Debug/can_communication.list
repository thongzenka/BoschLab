
can_communication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065a0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e50  08006730  08006730  00016730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007580  08007580  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007580  08007580  00017580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007588  08007588  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007588  08007588  00017588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800758c  0800758c  0001758c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007590  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          000001dc  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000254  20000254  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013f44  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028f8  00000000  00000000  00033fec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001180  00000000  00000000  000368e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001058  00000000  00000000  00037a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020d66  00000000  00000000  00038ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001420c  00000000  00000000  00059826  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c624d  00000000  00000000  0006da32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00133c7f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004dd4  00000000  00000000  00133cd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006718 	.word	0x08006718

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08006718 	.word	0x08006718

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <spi1_communication>:
function :	SPI1 send data
parameter:
send_char:	sned data
******************************************************************************/
uint8_t spi1_communication(uint8_t send_char)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	71fb      	strb	r3, [r7, #7]
	uint8_t chRetry = 0;
 800057e:	2300      	movs	r3, #0
 8000580:	73fb      	strb	r3, [r7, #15]
	uint8_t chTemp = 0;
 8000582:	2300      	movs	r3, #0
 8000584:	73bb      	strb	r3, [r7, #14]

	while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY_TX) {
 8000586:	e007      	b.n	8000598 <spi1_communication+0x24>
		if (++ chRetry > 200) {
 8000588:	7bfb      	ldrb	r3, [r7, #15]
 800058a:	3301      	adds	r3, #1
 800058c:	73fb      	strb	r3, [r7, #15]
 800058e:	7bfb      	ldrb	r3, [r7, #15]
 8000590:	2bc8      	cmp	r3, #200	; 0xc8
 8000592:	d901      	bls.n	8000598 <spi1_communication+0x24>
			return 0;
 8000594:	2300      	movs	r3, #0
 8000596:	e02d      	b.n	80005f4 <spi1_communication+0x80>
	while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY_TX) {
 8000598:	4818      	ldr	r0, [pc, #96]	; (80005fc <spi1_communication+0x88>)
 800059a:	f003 fde5 	bl	8004168 <HAL_SPI_GetState>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b03      	cmp	r3, #3
 80005a2:	d0f1      	beq.n	8000588 <spi1_communication+0x14>
		}
	}

	HAL_SPI_Transmit(&hspi1, &send_char, 1, 1000);
 80005a4:	1df9      	adds	r1, r7, #7
 80005a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005aa:	2201      	movs	r2, #1
 80005ac:	4813      	ldr	r0, [pc, #76]	; (80005fc <spi1_communication+0x88>)
 80005ae:	f003 f9ec 	bl	800398a <HAL_SPI_Transmit>

	chRetry=0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	73fb      	strb	r3, [r7, #15]
	while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY_RX) {
 80005b6:	e007      	b.n	80005c8 <spi1_communication+0x54>
		if (++ chRetry > 200) {
 80005b8:	7bfb      	ldrb	r3, [r7, #15]
 80005ba:	3301      	adds	r3, #1
 80005bc:	73fb      	strb	r3, [r7, #15]
 80005be:	7bfb      	ldrb	r3, [r7, #15]
 80005c0:	2bc8      	cmp	r3, #200	; 0xc8
 80005c2:	d901      	bls.n	80005c8 <spi1_communication+0x54>
			return 0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	e015      	b.n	80005f4 <spi1_communication+0x80>
	while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY_RX) {
 80005c8:	480c      	ldr	r0, [pc, #48]	; (80005fc <spi1_communication+0x88>)
 80005ca:	f003 fdcd 	bl	8004168 <HAL_SPI_GetState>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b04      	cmp	r3, #4
 80005d2:	d0f1      	beq.n	80005b8 <spi1_communication+0x44>
		}
	}

	HAL_SPI_Receive(&hspi1, &chTemp, 1, 1000);
 80005d4:	f107 010e 	add.w	r1, r7, #14
 80005d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005dc:	2201      	movs	r2, #1
 80005de:	4807      	ldr	r0, [pc, #28]	; (80005fc <spi1_communication+0x88>)
 80005e0:	f003 fb0f 	bl	8003c02 <HAL_SPI_Receive>

	/* Wait until the BSY flag is set */
	while(HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY) {
 80005e4:	bf00      	nop
 80005e6:	4805      	ldr	r0, [pc, #20]	; (80005fc <spi1_communication+0x88>)
 80005e8:	f003 fdbe 	bl	8004168 <HAL_SPI_GetState>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b02      	cmp	r3, #2
 80005f0:	d0f9      	beq.n	80005e6 <spi1_communication+0x72>

	}

	return chTemp;
 80005f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3710      	adds	r7, #16
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	200000c0 	.word	0x200000c0

08000600 <lcd_write_byte>:
parameter:
  chByte : send data
  chCmd  : command or data
******************************************************************************/
void lcd_write_byte(uint8_t chByte, uint8_t chCmd)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	4603      	mov	r3, r0
 8000608:	460a      	mov	r2, r1
 800060a:	71fb      	strb	r3, [r7, #7]
 800060c:	4613      	mov	r3, r2
 800060e:	71bb      	strb	r3, [r7, #6]
    if (chCmd) {
 8000610:	79bb      	ldrb	r3, [r7, #6]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d006      	beq.n	8000624 <lcd_write_byte+0x24>
        LCD_DC_H();
 8000616:	2201      	movs	r2, #1
 8000618:	f44f 7180 	mov.w	r1, #256	; 0x100
 800061c:	480d      	ldr	r0, [pc, #52]	; (8000654 <lcd_write_byte+0x54>)
 800061e:	f002 fc95 	bl	8002f4c <HAL_GPIO_WritePin>
 8000622:	e005      	b.n	8000630 <lcd_write_byte+0x30>
    } else {
        LCD_DC_L();
 8000624:	2200      	movs	r2, #0
 8000626:	f44f 7180 	mov.w	r1, #256	; 0x100
 800062a:	480a      	ldr	r0, [pc, #40]	; (8000654 <lcd_write_byte+0x54>)
 800062c:	f002 fc8e 	bl	8002f4c <HAL_GPIO_WritePin>
    }

    LCD_CS_L();
 8000630:	2200      	movs	r2, #0
 8000632:	2180      	movs	r1, #128	; 0x80
 8000634:	4807      	ldr	r0, [pc, #28]	; (8000654 <lcd_write_byte+0x54>)
 8000636:	f002 fc89 	bl	8002f4c <HAL_GPIO_WritePin>
    spi1_communication(chByte);
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	4618      	mov	r0, r3
 800063e:	f7ff ff99 	bl	8000574 <spi1_communication>
    LCD_CS_H();
 8000642:	2201      	movs	r2, #1
 8000644:	2180      	movs	r1, #128	; 0x80
 8000646:	4803      	ldr	r0, [pc, #12]	; (8000654 <lcd_write_byte+0x54>)
 8000648:	f002 fc80 	bl	8002f4c <HAL_GPIO_WritePin>
}
 800064c:	bf00      	nop
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40020400 	.word	0x40020400

08000658 <lcd_write_command>:
parameter:
     chByte : send data
		 chCmd  : command or data
******************************************************************************/
void lcd_write_command(uint8_t chRegister, uint8_t chValue)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	460a      	mov	r2, r1
 8000662:	71fb      	strb	r3, [r7, #7]
 8000664:	4613      	mov	r3, r2
 8000666:	71bb      	strb	r3, [r7, #6]
	lcd_write_byte(chRegister, LCD_CMD);
 8000668:	79fb      	ldrb	r3, [r7, #7]
 800066a:	2100      	movs	r1, #0
 800066c:	4618      	mov	r0, r3
 800066e:	f7ff ffc7 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 8000672:	79bb      	ldrb	r3, [r7, #6]
 8000674:	2101      	movs	r1, #1
 8000676:	4618      	mov	r0, r3
 8000678:	f7ff ffc2 	bl	8000600 <lcd_write_byte>
}
 800067c:	bf00      	nop
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}

08000684 <delay_ms>:
/******************************************************************************
Function Name  : delay
			parameter: ms
******************************************************************************/
void delay_ms(uint32_t ms)
{
 8000684:	b480      	push	{r7}
 8000686:	b085      	sub	sp, #20
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
	uint32_t j=5000;
 800068c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000690:	60fb      	str	r3, [r7, #12]
	for(;ms>2;ms--)
 8000692:	e008      	b.n	80006a6 <delay_ms+0x22>
		for(;j>2;j--){
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	3b01      	subs	r3, #1
 8000698:	60fb      	str	r3, [r7, #12]
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	2b02      	cmp	r3, #2
 800069e:	d8f9      	bhi.n	8000694 <delay_ms+0x10>
	for(;ms>2;ms--)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	3b01      	subs	r3, #1
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	2b02      	cmp	r3, #2
 80006aa:	d8f6      	bhi.n	800069a <delay_ms+0x16>

		}
}
 80006ac:	bf00      	nop
 80006ae:	bf00      	nop
 80006b0:	3714      	adds	r7, #20
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
	...

080006bc <lcd_init>:
/******************************************************************************
Function Name  : initials lcd control pin
			parameter:
******************************************************************************/
void lcd_init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
	LCD_RST_H();
 80006c0:	2201      	movs	r2, #1
 80006c2:	2104      	movs	r1, #4
 80006c4:	4881      	ldr	r0, [pc, #516]	; (80008cc <lcd_init+0x210>)
 80006c6:	f002 fc41 	bl	8002f4c <HAL_GPIO_WritePin>
	LCD_CS_H();
 80006ca:	2201      	movs	r2, #1
 80006cc:	2180      	movs	r1, #128	; 0x80
 80006ce:	487f      	ldr	r0, [pc, #508]	; (80008cc <lcd_init+0x210>)
 80006d0:	f002 fc3c 	bl	8002f4c <HAL_GPIO_WritePin>
	LCD_BKL_H();
 80006d4:	2201      	movs	r2, #1
 80006d6:	2140      	movs	r1, #64	; 0x40
 80006d8:	487c      	ldr	r0, [pc, #496]	; (80008cc <lcd_init+0x210>)
 80006da:	f002 fc37 	bl	8002f4c <HAL_GPIO_WritePin>
#ifdef 	ST7789_DEVICE
	LCD_RST_H();
 80006de:	2201      	movs	r2, #1
 80006e0:	2104      	movs	r1, #4
 80006e2:	487a      	ldr	r0, [pc, #488]	; (80008cc <lcd_init+0x210>)
 80006e4:	f002 fc32 	bl	8002f4c <HAL_GPIO_WritePin>
	delay_ms(5);
 80006e8:	2005      	movs	r0, #5
 80006ea:	f7ff ffcb 	bl	8000684 <delay_ms>
	LCD_RST_L();
 80006ee:	2200      	movs	r2, #0
 80006f0:	2104      	movs	r1, #4
 80006f2:	4876      	ldr	r0, [pc, #472]	; (80008cc <lcd_init+0x210>)
 80006f4:	f002 fc2a 	bl	8002f4c <HAL_GPIO_WritePin>
	delay_ms(5);
 80006f8:	2005      	movs	r0, #5
 80006fa:	f7ff ffc3 	bl	8000684 <delay_ms>
	LCD_RST_H();
 80006fe:	2201      	movs	r2, #1
 8000700:	2104      	movs	r1, #4
 8000702:	4872      	ldr	r0, [pc, #456]	; (80008cc <lcd_init+0x210>)
 8000704:	f002 fc22 	bl	8002f4c <HAL_GPIO_WritePin>
	delay_ms(5);
 8000708:	2005      	movs	r0, #5
 800070a:	f7ff ffbb 	bl	8000684 <delay_ms>
	LCD_CS_H();
 800070e:	2201      	movs	r2, #1
 8000710:	2180      	movs	r1, #128	; 0x80
 8000712:	486e      	ldr	r0, [pc, #440]	; (80008cc <lcd_init+0x210>)
 8000714:	f002 fc1a 	bl	8002f4c <HAL_GPIO_WritePin>
	lcd_write_command(0x07,0x00);
	lcd_write_command(0x08,0x01);
	lcd_write_command(0x09,0x3F);

#elif defined ST7789_DEVICE
	lcd_write_byte(0x11,LCD_CMD);
 8000718:	2100      	movs	r1, #0
 800071a:	2011      	movs	r0, #17
 800071c:	f7ff ff70 	bl	8000600 <lcd_write_byte>
	delay_ms(10);
 8000720:	200a      	movs	r0, #10
 8000722:	f7ff ffaf 	bl	8000684 <delay_ms>
	lcd_write_command(0x36,0x00);
 8000726:	2100      	movs	r1, #0
 8000728:	2036      	movs	r0, #54	; 0x36
 800072a:	f7ff ff95 	bl	8000658 <lcd_write_command>
	lcd_write_command(0x3a,0x05);
 800072e:	2105      	movs	r1, #5
 8000730:	203a      	movs	r0, #58	; 0x3a
 8000732:	f7ff ff91 	bl	8000658 <lcd_write_command>
	lcd_write_byte(0xb2,LCD_CMD);
 8000736:	2100      	movs	r1, #0
 8000738:	20b2      	movs	r0, #178	; 0xb2
 800073a:	f7ff ff61 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x0c,LCD_DATA);
 800073e:	2101      	movs	r1, #1
 8000740:	200c      	movs	r0, #12
 8000742:	f7ff ff5d 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x0c,LCD_DATA);
 8000746:	2101      	movs	r1, #1
 8000748:	200c      	movs	r0, #12
 800074a:	f7ff ff59 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x00,LCD_DATA);
 800074e:	2101      	movs	r1, #1
 8000750:	2000      	movs	r0, #0
 8000752:	f7ff ff55 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x33,LCD_DATA);
 8000756:	2101      	movs	r1, #1
 8000758:	2033      	movs	r0, #51	; 0x33
 800075a:	f7ff ff51 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x33,LCD_DATA);
 800075e:	2101      	movs	r1, #1
 8000760:	2033      	movs	r0, #51	; 0x33
 8000762:	f7ff ff4d 	bl	8000600 <lcd_write_byte>
	lcd_write_command(0xb7,0x35);
 8000766:	2135      	movs	r1, #53	; 0x35
 8000768:	20b7      	movs	r0, #183	; 0xb7
 800076a:	f7ff ff75 	bl	8000658 <lcd_write_command>
	lcd_write_command(0xbb,0x28);
 800076e:	2128      	movs	r1, #40	; 0x28
 8000770:	20bb      	movs	r0, #187	; 0xbb
 8000772:	f7ff ff71 	bl	8000658 <lcd_write_command>
	lcd_write_command(0xc0,0x3c);
 8000776:	213c      	movs	r1, #60	; 0x3c
 8000778:	20c0      	movs	r0, #192	; 0xc0
 800077a:	f7ff ff6d 	bl	8000658 <lcd_write_command>
	lcd_write_command(0xc2,0x01);
 800077e:	2101      	movs	r1, #1
 8000780:	20c2      	movs	r0, #194	; 0xc2
 8000782:	f7ff ff69 	bl	8000658 <lcd_write_command>
	lcd_write_command(0xc3,0x0b);
 8000786:	210b      	movs	r1, #11
 8000788:	20c3      	movs	r0, #195	; 0xc3
 800078a:	f7ff ff65 	bl	8000658 <lcd_write_command>
	lcd_write_command(0xc4,0x20);
 800078e:	2120      	movs	r1, #32
 8000790:	20c4      	movs	r0, #196	; 0xc4
 8000792:	f7ff ff61 	bl	8000658 <lcd_write_command>
	lcd_write_command(0xc6,0x0f);
 8000796:	210f      	movs	r1, #15
 8000798:	20c6      	movs	r0, #198	; 0xc6
 800079a:	f7ff ff5d 	bl	8000658 <lcd_write_command>
	lcd_write_byte(0xD0,LCD_CMD);
 800079e:	2100      	movs	r1, #0
 80007a0:	20d0      	movs	r0, #208	; 0xd0
 80007a2:	f7ff ff2d 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0xa4,LCD_DATA);
 80007a6:	2101      	movs	r1, #1
 80007a8:	20a4      	movs	r0, #164	; 0xa4
 80007aa:	f7ff ff29 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0xa1,LCD_DATA);
 80007ae:	2101      	movs	r1, #1
 80007b0:	20a1      	movs	r0, #161	; 0xa1
 80007b2:	f7ff ff25 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0xe0,LCD_CMD);
 80007b6:	2100      	movs	r1, #0
 80007b8:	20e0      	movs	r0, #224	; 0xe0
 80007ba:	f7ff ff21 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0xd0,LCD_DATA);
 80007be:	2101      	movs	r1, #1
 80007c0:	20d0      	movs	r0, #208	; 0xd0
 80007c2:	f7ff ff1d 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x01,LCD_DATA);
 80007c6:	2101      	movs	r1, #1
 80007c8:	2001      	movs	r0, #1
 80007ca:	f7ff ff19 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x08,LCD_DATA);
 80007ce:	2101      	movs	r1, #1
 80007d0:	2008      	movs	r0, #8
 80007d2:	f7ff ff15 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x0f,LCD_DATA);
 80007d6:	2101      	movs	r1, #1
 80007d8:	200f      	movs	r0, #15
 80007da:	f7ff ff11 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x11,LCD_DATA);
 80007de:	2101      	movs	r1, #1
 80007e0:	2011      	movs	r0, #17
 80007e2:	f7ff ff0d 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x2a,LCD_DATA);
 80007e6:	2101      	movs	r1, #1
 80007e8:	202a      	movs	r0, #42	; 0x2a
 80007ea:	f7ff ff09 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x36,LCD_DATA);
 80007ee:	2101      	movs	r1, #1
 80007f0:	2036      	movs	r0, #54	; 0x36
 80007f2:	f7ff ff05 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x55,LCD_DATA);
 80007f6:	2101      	movs	r1, #1
 80007f8:	2055      	movs	r0, #85	; 0x55
 80007fa:	f7ff ff01 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x44,LCD_DATA);
 80007fe:	2101      	movs	r1, #1
 8000800:	2044      	movs	r0, #68	; 0x44
 8000802:	f7ff fefd 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x3a,LCD_DATA);
 8000806:	2101      	movs	r1, #1
 8000808:	203a      	movs	r0, #58	; 0x3a
 800080a:	f7ff fef9 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x0b,LCD_DATA);
 800080e:	2101      	movs	r1, #1
 8000810:	200b      	movs	r0, #11
 8000812:	f7ff fef5 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x06,LCD_DATA);
 8000816:	2101      	movs	r1, #1
 8000818:	2006      	movs	r0, #6
 800081a:	f7ff fef1 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x11,LCD_DATA);
 800081e:	2101      	movs	r1, #1
 8000820:	2011      	movs	r0, #17
 8000822:	f7ff feed 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x20,LCD_DATA);
 8000826:	2101      	movs	r1, #1
 8000828:	2020      	movs	r0, #32
 800082a:	f7ff fee9 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0xe1,LCD_CMD);
 800082e:	2100      	movs	r1, #0
 8000830:	20e1      	movs	r0, #225	; 0xe1
 8000832:	f7ff fee5 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0xd0,LCD_DATA);
 8000836:	2101      	movs	r1, #1
 8000838:	20d0      	movs	r0, #208	; 0xd0
 800083a:	f7ff fee1 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x02,LCD_DATA);
 800083e:	2101      	movs	r1, #1
 8000840:	2002      	movs	r0, #2
 8000842:	f7ff fedd 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x07,LCD_DATA);
 8000846:	2101      	movs	r1, #1
 8000848:	2007      	movs	r0, #7
 800084a:	f7ff fed9 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x0a,LCD_DATA);
 800084e:	2101      	movs	r1, #1
 8000850:	200a      	movs	r0, #10
 8000852:	f7ff fed5 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x0b,LCD_DATA);
 8000856:	2101      	movs	r1, #1
 8000858:	200b      	movs	r0, #11
 800085a:	f7ff fed1 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x18,LCD_DATA);
 800085e:	2101      	movs	r1, #1
 8000860:	2018      	movs	r0, #24
 8000862:	f7ff fecd 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x34,LCD_DATA);
 8000866:	2101      	movs	r1, #1
 8000868:	2034      	movs	r0, #52	; 0x34
 800086a:	f7ff fec9 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x43,LCD_DATA);
 800086e:	2101      	movs	r1, #1
 8000870:	2043      	movs	r0, #67	; 0x43
 8000872:	f7ff fec5 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x4a,LCD_DATA);
 8000876:	2101      	movs	r1, #1
 8000878:	204a      	movs	r0, #74	; 0x4a
 800087a:	f7ff fec1 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x2b,LCD_DATA);
 800087e:	2101      	movs	r1, #1
 8000880:	202b      	movs	r0, #43	; 0x2b
 8000882:	f7ff febd 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x1b,LCD_DATA);
 8000886:	2101      	movs	r1, #1
 8000888:	201b      	movs	r0, #27
 800088a:	f7ff feb9 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x1c,LCD_DATA);
 800088e:	2101      	movs	r1, #1
 8000890:	201c      	movs	r0, #28
 8000892:	f7ff feb5 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x22,LCD_DATA);
 8000896:	2101      	movs	r1, #1
 8000898:	2022      	movs	r0, #34	; 0x22
 800089a:	f7ff feb1 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x1f,LCD_DATA);
 800089e:	2101      	movs	r1, #1
 80008a0:	201f      	movs	r0, #31
 80008a2:	f7ff fead 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x29,LCD_CMD);
 80008a6:	2100      	movs	r1, #0
 80008a8:	2029      	movs	r0, #41	; 0x29
 80008aa:	f7ff fea9 	bl	8000600 <lcd_write_byte>
	lcd_write_command(0x51,0xff);
 80008ae:	21ff      	movs	r1, #255	; 0xff
 80008b0:	2051      	movs	r0, #81	; 0x51
 80008b2:	f7ff fed1 	bl	8000658 <lcd_write_command>
	lcd_write_command(0x55,0xB0);
 80008b6:	21b0      	movs	r1, #176	; 0xb0
 80008b8:	2055      	movs	r0, #85	; 0x55
 80008ba:	f7ff fecd 	bl	8000658 <lcd_write_command>
#endif

	lcd_clear_screen(WHITE);
 80008be:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80008c2:	f000 f805 	bl	80008d0 <lcd_clear_screen>
}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40020400 	.word	0x40020400

080008d0 <lcd_clear_screen>:
Function Name  : clear lcd screen
			parameter:
				hwColor: background color
******************************************************************************/
void lcd_clear_screen(uint16_t hwColor)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	80fb      	strh	r3, [r7, #6]
	uint32_t i, wCount = LCD_WIDTH;
 80008da:	23f0      	movs	r3, #240	; 0xf0
 80008dc:	60bb      	str	r3, [r7, #8]
	wCount *= LCD_HEIGHT;
 80008de:	68ba      	ldr	r2, [r7, #8]
 80008e0:	4613      	mov	r3, r2
 80008e2:	009b      	lsls	r3, r3, #2
 80008e4:	4413      	add	r3, r2
 80008e6:	019b      	lsls	r3, r3, #6
 80008e8:	60bb      	str	r3, [r7, #8]

#ifdef HX8347D_DEVICE
	lcd_set_cursor(0, 0);
	lcd_write_byte(0x22, LCD_CMD);
#elif defined ST7789_DEVICE
	lcd_write_byte(0x2A,LCD_CMD);
 80008ea:	2100      	movs	r1, #0
 80008ec:	202a      	movs	r0, #42	; 0x2a
 80008ee:	f7ff fe87 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x00,LCD_DATA);
 80008f2:	2101      	movs	r1, #1
 80008f4:	2000      	movs	r0, #0
 80008f6:	f7ff fe83 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x00,LCD_DATA);
 80008fa:	2101      	movs	r1, #1
 80008fc:	2000      	movs	r0, #0
 80008fe:	f7ff fe7f 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x00,LCD_DATA);
 8000902:	2101      	movs	r1, #1
 8000904:	2000      	movs	r0, #0
 8000906:	f7ff fe7b 	bl	8000600 <lcd_write_byte>
	lcd_write_byte((LCD_WIDTH-1)&0xff,LCD_DATA);
 800090a:	2101      	movs	r1, #1
 800090c:	20ef      	movs	r0, #239	; 0xef
 800090e:	f7ff fe77 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x2B,LCD_CMD);
 8000912:	2100      	movs	r1, #0
 8000914:	202b      	movs	r0, #43	; 0x2b
 8000916:	f7ff fe73 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x00,LCD_DATA);
 800091a:	2101      	movs	r1, #1
 800091c:	2000      	movs	r0, #0
 800091e:	f7ff fe6f 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x00,LCD_DATA);
 8000922:	2101      	movs	r1, #1
 8000924:	2000      	movs	r0, #0
 8000926:	f7ff fe6b 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(((LCD_HEIGHT-1)>>8)&0xff,LCD_DATA);
 800092a:	2101      	movs	r1, #1
 800092c:	2001      	movs	r0, #1
 800092e:	f7ff fe67 	bl	8000600 <lcd_write_byte>
	lcd_write_byte((LCD_HEIGHT-1)&0xff,LCD_DATA);
 8000932:	2101      	movs	r1, #1
 8000934:	203f      	movs	r0, #63	; 0x3f
 8000936:	f7ff fe63 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x2C,LCD_CMD);
 800093a:	2100      	movs	r1, #0
 800093c:	202c      	movs	r0, #44	; 0x2c
 800093e:	f7ff fe5f 	bl	8000600 <lcd_write_byte>
#endif
	LCD_CS_L();
 8000942:	2200      	movs	r2, #0
 8000944:	2180      	movs	r1, #128	; 0x80
 8000946:	4814      	ldr	r0, [pc, #80]	; (8000998 <lcd_clear_screen+0xc8>)
 8000948:	f002 fb00 	bl	8002f4c <HAL_GPIO_WritePin>
	LCD_DC_H();
 800094c:	2201      	movs	r2, #1
 800094e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000952:	4811      	ldr	r0, [pc, #68]	; (8000998 <lcd_clear_screen+0xc8>)
 8000954:	f002 fafa 	bl	8002f4c <HAL_GPIO_WritePin>
	for(i=0;i<wCount;i++){
 8000958:	2300      	movs	r3, #0
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	e00e      	b.n	800097c <lcd_clear_screen+0xac>
//		spi1_communication(hwColor>>8);

		spi1_communication(hwColor>>8);
		spi1_communication((uint8_t)(hwColor&0xff));
#elif defined ST7789_DEVICE
		spi1_communication(hwColor>>8);
 800095e:	88fb      	ldrh	r3, [r7, #6]
 8000960:	0a1b      	lsrs	r3, r3, #8
 8000962:	b29b      	uxth	r3, r3
 8000964:	b2db      	uxtb	r3, r3
 8000966:	4618      	mov	r0, r3
 8000968:	f7ff fe04 	bl	8000574 <spi1_communication>
		spi1_communication((uint8_t)(hwColor&0xff));
 800096c:	88fb      	ldrh	r3, [r7, #6]
 800096e:	b2db      	uxtb	r3, r3
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff fdff 	bl	8000574 <spi1_communication>
	for(i=0;i<wCount;i++){
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	3301      	adds	r3, #1
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fa      	ldr	r2, [r7, #12]
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	429a      	cmp	r2, r3
 8000982:	d3ec      	bcc.n	800095e <lcd_clear_screen+0x8e>
#endif
	}
	LCD_CS_H();
 8000984:	2201      	movs	r2, #1
 8000986:	2180      	movs	r1, #128	; 0x80
 8000988:	4803      	ldr	r0, [pc, #12]	; (8000998 <lcd_clear_screen+0xc8>)
 800098a:	f002 fadf 	bl	8002f4c <HAL_GPIO_WritePin>
}
 800098e:	bf00      	nop
 8000990:	3710      	adds	r7, #16
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40020400 	.word	0x40020400

0800099c <HAL_CAN_RxFifo0MsgPendingCallback>:

uint32_t TxMailbox;


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 80009a4:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80009a6:	4a09      	ldr	r2, [pc, #36]	; (80009cc <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80009a8:	2100      	movs	r1, #0
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f001 fc26 	bl	80021fc <HAL_CAN_GetRxMessage>
		if (RxHeader.DLC == 8)
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80009b2:	691b      	ldr	r3, [r3, #16]
 80009b4:	2b08      	cmp	r3, #8
 80009b6:	d102      	bne.n	80009be <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
		{
			data_flag1 = 1;
 80009b8:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	701a      	strb	r2, [r3, #0]
		}

}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	200001e0 	.word	0x200001e0
 80009cc:	200001bc 	.word	0x200001bc
 80009d0:	20000097 	.word	0x20000097

080009d4 <HAL_UART_RxCpltCallback>:

uint8_t buffer[MAX_BUFFER_SIZE];
uint8_t buffer0[10];
uint8_t buffer1[10];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
	if( huart -> Instance == USART2 ) {
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a13      	ldr	r2, [pc, #76]	; (8000a30 <HAL_UART_RxCpltCallback+0x5c>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d11f      	bne.n	8000a26 <HAL_UART_RxCpltCallback+0x52>
		buffer[index_buffer++] = temp;
 80009e6:	4b13      	ldr	r3, [pc, #76]	; (8000a34 <HAL_UART_RxCpltCallback+0x60>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	1c5a      	adds	r2, r3, #1
 80009ec:	b2d1      	uxtb	r1, r2
 80009ee:	4a11      	ldr	r2, [pc, #68]	; (8000a34 <HAL_UART_RxCpltCallback+0x60>)
 80009f0:	7011      	strb	r1, [r2, #0]
 80009f2:	461a      	mov	r2, r3
 80009f4:	4b10      	ldr	r3, [pc, #64]	; (8000a38 <HAL_UART_RxCpltCallback+0x64>)
 80009f6:	7819      	ldrb	r1, [r3, #0]
 80009f8:	4b10      	ldr	r3, [pc, #64]	; (8000a3c <HAL_UART_RxCpltCallback+0x68>)
 80009fa:	5499      	strb	r1, [r3, r2]
		if(index_buffer == 30) index_buffer = 0;
 80009fc:	4b0d      	ldr	r3, [pc, #52]	; (8000a34 <HAL_UART_RxCpltCallback+0x60>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	2b1e      	cmp	r3, #30
 8000a02:	d102      	bne.n	8000a0a <HAL_UART_RxCpltCallback+0x36>
 8000a04:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <HAL_UART_RxCpltCallback+0x60>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	701a      	strb	r2, [r3, #0]
		buffer_flag = 1;
 8000a0a:	4b0d      	ldr	r3, [pc, #52]	; (8000a40 <HAL_UART_RxCpltCallback+0x6c>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit (&huart2, &temp, 1, 50) ;
 8000a10:	2332      	movs	r3, #50	; 0x32
 8000a12:	2201      	movs	r2, #1
 8000a14:	4908      	ldr	r1, [pc, #32]	; (8000a38 <HAL_UART_RxCpltCallback+0x64>)
 8000a16:	480b      	ldr	r0, [pc, #44]	; (8000a44 <HAL_UART_RxCpltCallback+0x70>)
 8000a18:	f004 f9b3 	bl	8004d82 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart2, & temp, 1);
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	4906      	ldr	r1, [pc, #24]	; (8000a38 <HAL_UART_RxCpltCallback+0x64>)
 8000a20:	4808      	ldr	r0, [pc, #32]	; (8000a44 <HAL_UART_RxCpltCallback+0x70>)
 8000a22:	f004 fa40 	bl	8004ea6 <HAL_UART_Receive_IT>
	}
}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40004400 	.word	0x40004400
 8000a34:	20000095 	.word	0x20000095
 8000a38:	20000094 	.word	0x20000094
 8000a3c:	200001ec 	.word	0x200001ec
 8000a40:	20000096 	.word	0x20000096
 8000a44:	20000160 	.word	0x20000160

08000a48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a4e:	f001 f80f 	bl	8001a70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a52:	f000 f8af 	bl	8000bb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a56:	f000 fa0b 	bl	8000e70 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000a5a:	f000 f909 	bl	8000c70 <MX_CAN1_Init>
  MX_TIM2_Init();
 8000a5e:	f000 f991 	bl	8000d84 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000a62:	f000 f9db 	bl	8000e1c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000a66:	f000 f957 	bl	8000d18 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 8000a6a:	4845      	ldr	r0, [pc, #276]	; (8000b80 <main+0x138>)
 8000a6c:	f001 fa72 	bl	8001f54 <HAL_CAN_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8000a70:	4844      	ldr	r0, [pc, #272]	; (8000b84 <main+0x13c>)
 8000a72:	f003 fd07 	bl	8004484 <HAL_TIM_Base_Start_IT>

  // Activate the notification
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000a76:	2102      	movs	r1, #2
 8000a78:	4841      	ldr	r0, [pc, #260]	; (8000b80 <main+0x138>)
 8000a7a:	f001 fcd1 	bl	8002420 <HAL_CAN_ActivateNotification>

  HAL_Delay(300);
 8000a7e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a82:	f001 f867 	bl	8001b54 <HAL_Delay>

  TxHeader.DLC   = 8;  // data length
 8000a86:	4b40      	ldr	r3, [pc, #256]	; (8000b88 <main+0x140>)
 8000a88:	2208      	movs	r2, #8
 8000a8a:	611a      	str	r2, [r3, #16]
  TxHeader.IDE   = CAN_ID_STD;
 8000a8c:	4b3e      	ldr	r3, [pc, #248]	; (8000b88 <main+0x140>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	609a      	str	r2, [r3, #8]
  TxHeader.RTR   = CAN_RTR_DATA;
 8000a92:	4b3d      	ldr	r3, [pc, #244]	; (8000b88 <main+0x140>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x012;  // ID
 8000a98:	4b3b      	ldr	r3, [pc, #236]	; (8000b88 <main+0x140>)
 8000a9a:	2212      	movs	r2, #18
 8000a9c:	601a      	str	r2, [r3, #0]

  setTimer1(100);
 8000a9e:	2064      	movs	r0, #100	; 0x64
 8000aa0:	f000 ff5c 	bl	800195c <setTimer1>

    lcd_init();
 8000aa4:	f7ff fe0a 	bl	80006bc <lcd_init>
    ST7789_Init();
 8000aa8:	f000 fbba 	bl	8001220 <ST7789_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //LAB1 ECU BOARD
	  /*Node1 (practice board): recieve data*/
	  if(data_flag1){
 8000aac:	4b37      	ldr	r3, [pc, #220]	; (8000b8c <main+0x144>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d046      	beq.n	8000b42 <main+0xfa>
		  TxData[0] = RxData[0];
 8000ab4:	4b36      	ldr	r3, [pc, #216]	; (8000b90 <main+0x148>)
 8000ab6:	781a      	ldrb	r2, [r3, #0]
 8000ab8:	4b36      	ldr	r3, [pc, #216]	; (8000b94 <main+0x14c>)
 8000aba:	701a      	strb	r2, [r3, #0]
		  TxData[1] = RxData[1];
 8000abc:	4b34      	ldr	r3, [pc, #208]	; (8000b90 <main+0x148>)
 8000abe:	785a      	ldrb	r2, [r3, #1]
 8000ac0:	4b34      	ldr	r3, [pc, #208]	; (8000b94 <main+0x14c>)
 8000ac2:	705a      	strb	r2, [r3, #1]
		  TxData[2] = TxData[0] + TxData[1];
 8000ac4:	4b33      	ldr	r3, [pc, #204]	; (8000b94 <main+0x14c>)
 8000ac6:	781a      	ldrb	r2, [r3, #0]
 8000ac8:	4b32      	ldr	r3, [pc, #200]	; (8000b94 <main+0x14c>)
 8000aca:	785b      	ldrb	r3, [r3, #1]
 8000acc:	4413      	add	r3, r2
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	4b30      	ldr	r3, [pc, #192]	; (8000b94 <main+0x14c>)
 8000ad2:	709a      	strb	r2, [r3, #2]
		  TxData[7] = calculate_crc_sae_j1850(TxData, 7);
 8000ad4:	2107      	movs	r1, #7
 8000ad6:	482f      	ldr	r0, [pc, #188]	; (8000b94 <main+0x14c>)
 8000ad8:	f000 fa4e 	bl	8000f78 <calculate_crc_sae_j1850>
 8000adc:	4603      	mov	r3, r0
 8000ade:	461a      	mov	r2, r3
 8000ae0:	4b2c      	ldr	r3, [pc, #176]	; (8000b94 <main+0x14c>)
 8000ae2:	71da      	strb	r2, [r3, #7]
		  data_flag1 = 0;
 8000ae4:	4b29      	ldr	r3, [pc, #164]	; (8000b8c <main+0x144>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	701a      	strb	r2, [r3, #0]
		  sprintf(&buffer0[0], "DataId = %02x ", RxData[0]);
 8000aea:	4b29      	ldr	r3, [pc, #164]	; (8000b90 <main+0x148>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	461a      	mov	r2, r3
 8000af0:	4929      	ldr	r1, [pc, #164]	; (8000b98 <main+0x150>)
 8000af2:	482a      	ldr	r0, [pc, #168]	; (8000b9c <main+0x154>)
 8000af4:	f005 f9a2 	bl	8005e3c <siprintf>
		  sprintf(&buffer1[0], "DataId = %02x ", RxData[1]);
 8000af8:	4b25      	ldr	r3, [pc, #148]	; (8000b90 <main+0x148>)
 8000afa:	785b      	ldrb	r3, [r3, #1]
 8000afc:	461a      	mov	r2, r3
 8000afe:	4926      	ldr	r1, [pc, #152]	; (8000b98 <main+0x150>)
 8000b00:	4827      	ldr	r0, [pc, #156]	; (8000ba0 <main+0x158>)
 8000b02:	f005 f99b 	bl	8005e3c <siprintf>
//		  sprintf(buffer0, "DataId=%02X\r\n: ", TxData[1]);

		  ST7789_WriteString(0, 0, &buffer0[0] , Font_11x18, RED, WHITE);
 8000b06:	4b27      	ldr	r3, [pc, #156]	; (8000ba4 <main+0x15c>)
 8000b08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b0c:	9202      	str	r2, [sp, #8]
 8000b0e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000b12:	9201      	str	r2, [sp, #4]
 8000b14:	685a      	ldr	r2, [r3, #4]
 8000b16:	9200      	str	r2, [sp, #0]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a20      	ldr	r2, [pc, #128]	; (8000b9c <main+0x154>)
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	2000      	movs	r0, #0
 8000b20:	f000 fcda 	bl	80014d8 <ST7789_WriteString>
		  ST7789_WriteString(0, 20, &buffer1[0] , Font_11x18, RED, WHITE);
 8000b24:	4b1f      	ldr	r3, [pc, #124]	; (8000ba4 <main+0x15c>)
 8000b26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b2a:	9202      	str	r2, [sp, #8]
 8000b2c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000b30:	9201      	str	r2, [sp, #4]
 8000b32:	685a      	ldr	r2, [r3, #4]
 8000b34:	9200      	str	r2, [sp, #0]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a19      	ldr	r2, [pc, #100]	; (8000ba0 <main+0x158>)
 8000b3a:	2114      	movs	r1, #20
 8000b3c:	2000      	movs	r0, #0
 8000b3e:	f000 fccb 	bl	80014d8 <ST7789_WriteString>
	  }

	  /*Node1 : send data*/
	  if(timer1_flag){
 8000b42:	4b19      	ldr	r3, [pc, #100]	; (8000ba8 <main+0x160>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d0b0      	beq.n	8000aac <main+0x64>
		  setTimer1(20);
 8000b4a:	2014      	movs	r0, #20
 8000b4c:	f000 ff06 	bl	800195c <setTimer1>
		  if(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) > 0)
 8000b50:	480b      	ldr	r0, [pc, #44]	; (8000b80 <main+0x138>)
 8000b52:	f001 fb1e 	bl	8002192 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d00e      	beq.n	8000b7a <main+0x132>
		  { // check Mailbox
		 	 if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) == HAL_OK)
 8000b5c:	4b13      	ldr	r3, [pc, #76]	; (8000bac <main+0x164>)
 8000b5e:	4a0d      	ldr	r2, [pc, #52]	; (8000b94 <main+0x14c>)
 8000b60:	4909      	ldr	r1, [pc, #36]	; (8000b88 <main+0x140>)
 8000b62:	4807      	ldr	r0, [pc, #28]	; (8000b80 <main+0x138>)
 8000b64:	f001 fa3a 	bl	8001fdc <HAL_CAN_AddTxMessage>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d19e      	bne.n	8000aac <main+0x64>
		 	 {
		 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, SET);
 8000b6e:	2201      	movs	r2, #1
 8000b70:	2101      	movs	r1, #1
 8000b72:	480f      	ldr	r0, [pc, #60]	; (8000bb0 <main+0x168>)
 8000b74:	f002 f9ea 	bl	8002f4c <HAL_GPIO_WritePin>
 8000b78:	e798      	b.n	8000aac <main+0x64>
		 	  }
		  }
		   else
		   {
		 	  Error_Handler();
 8000b7a:	f000 fa43 	bl	8001004 <Error_Handler>
	  if(data_flag1){
 8000b7e:	e795      	b.n	8000aac <main+0x64>
 8000b80:	20000098 	.word	0x20000098
 8000b84:	20000118 	.word	0x20000118
 8000b88:	200001a4 	.word	0x200001a4
 8000b8c:	20000097 	.word	0x20000097
 8000b90:	200001e0 	.word	0x200001e0
 8000b94:	200001d8 	.word	0x200001d8
 8000b98:	08006730 	.word	0x08006730
 8000b9c:	2000020c 	.word	0x2000020c
 8000ba0:	20000218 	.word	0x20000218
 8000ba4:	20000000 	.word	0x20000000
 8000ba8:	20000234 	.word	0x20000234
 8000bac:	200001e8 	.word	0x200001e8
 8000bb0:	40020400 	.word	0x40020400

08000bb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b094      	sub	sp, #80	; 0x50
 8000bb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bba:	f107 0320 	add.w	r3, r7, #32
 8000bbe:	2230      	movs	r2, #48	; 0x30
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f005 f932 	bl	8005e2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc8:	f107 030c 	add.w	r3, r7, #12
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60bb      	str	r3, [r7, #8]
 8000bdc:	4b22      	ldr	r3, [pc, #136]	; (8000c68 <SystemClock_Config+0xb4>)
 8000bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be0:	4a21      	ldr	r2, [pc, #132]	; (8000c68 <SystemClock_Config+0xb4>)
 8000be2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be6:	6413      	str	r3, [r2, #64]	; 0x40
 8000be8:	4b1f      	ldr	r3, [pc, #124]	; (8000c68 <SystemClock_Config+0xb4>)
 8000bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf0:	60bb      	str	r3, [r7, #8]
 8000bf2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	4b1c      	ldr	r3, [pc, #112]	; (8000c6c <SystemClock_Config+0xb8>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a1b      	ldr	r2, [pc, #108]	; (8000c6c <SystemClock_Config+0xb8>)
 8000bfe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c02:	6013      	str	r3, [r2, #0]
 8000c04:	4b19      	ldr	r3, [pc, #100]	; (8000c6c <SystemClock_Config+0xb8>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c0c:	607b      	str	r3, [r7, #4]
 8000c0e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c10:	2302      	movs	r3, #2
 8000c12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c14:	2301      	movs	r3, #1
 8000c16:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c18:	2310      	movs	r3, #16
 8000c1a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c20:	f107 0320 	add.w	r3, r7, #32
 8000c24:	4618      	mov	r0, r3
 8000c26:	f002 f9cf 	bl	8002fc8 <HAL_RCC_OscConfig>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000c30:	f000 f9e8 	bl	8001004 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c34:	230f      	movs	r3, #15
 8000c36:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c40:	2300      	movs	r3, #0
 8000c42:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c48:	f107 030c 	add.w	r3, r7, #12
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f002 fc32 	bl	80034b8 <HAL_RCC_ClockConfig>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000c5a:	f000 f9d3 	bl	8001004 <Error_Handler>
  }
}
 8000c5e:	bf00      	nop
 8000c60:	3750      	adds	r7, #80	; 0x50
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	40007000 	.word	0x40007000

08000c70 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08a      	sub	sp, #40	; 0x28
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000c76:	4b26      	ldr	r3, [pc, #152]	; (8000d10 <MX_CAN1_Init+0xa0>)
 8000c78:	4a26      	ldr	r2, [pc, #152]	; (8000d14 <MX_CAN1_Init+0xa4>)
 8000c7a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 8;
 8000c7c:	4b24      	ldr	r3, [pc, #144]	; (8000d10 <MX_CAN1_Init+0xa0>)
 8000c7e:	2208      	movs	r2, #8
 8000c80:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000c82:	4b23      	ldr	r3, [pc, #140]	; (8000d10 <MX_CAN1_Init+0xa0>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000c88:	4b21      	ldr	r3, [pc, #132]	; (8000d10 <MX_CAN1_Init+0xa0>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000c8e:	4b20      	ldr	r3, [pc, #128]	; (8000d10 <MX_CAN1_Init+0xa0>)
 8000c90:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c94:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000c96:	4b1e      	ldr	r3, [pc, #120]	; (8000d10 <MX_CAN1_Init+0xa0>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000c9c:	4b1c      	ldr	r3, [pc, #112]	; (8000d10 <MX_CAN1_Init+0xa0>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000ca2:	4b1b      	ldr	r3, [pc, #108]	; (8000d10 <MX_CAN1_Init+0xa0>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000ca8:	4b19      	ldr	r3, [pc, #100]	; (8000d10 <MX_CAN1_Init+0xa0>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000cae:	4b18      	ldr	r3, [pc, #96]	; (8000d10 <MX_CAN1_Init+0xa0>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000cb4:	4b16      	ldr	r3, [pc, #88]	; (8000d10 <MX_CAN1_Init+0xa0>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000cba:	4b15      	ldr	r3, [pc, #84]	; (8000d10 <MX_CAN1_Init+0xa0>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000cc0:	4813      	ldr	r0, [pc, #76]	; (8000d10 <MX_CAN1_Init+0xa0>)
 8000cc2:	f000 ff6b 	bl	8001b9c <HAL_CAN_Init>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000ccc:	f000 f99a 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

    canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	623b      	str	r3, [r7, #32]
    canfilterconfig.FilterBank = 4;  // which filter bank to use from the assigned ones
 8000cd4:	2304      	movs	r3, #4
 8000cd6:	617b      	str	r3, [r7, #20]
    canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	613b      	str	r3, [r7, #16]
    canfilterconfig.FilterIdHigh = 0x0A2<<5;
 8000cdc:	f44f 53a2 	mov.w	r3, #5184	; 0x1440
 8000ce0:	603b      	str	r3, [r7, #0]
    canfilterconfig.FilterIdLow = 0;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	607b      	str	r3, [r7, #4]
    canfilterconfig.FilterMaskIdHigh = 0x0A2<<5;
 8000ce6:	f44f 53a2 	mov.w	r3, #5184	; 0x1440
 8000cea:	60bb      	str	r3, [r7, #8]
    canfilterconfig.FilterMaskIdLow = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	60fb      	str	r3, [r7, #12]
    canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	61bb      	str	r3, [r7, #24]
    canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	61fb      	str	r3, [r7, #28]
    canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 8000cf8:	2314      	movs	r3, #20
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24

    HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8000cfc:	463b      	mov	r3, r7
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4803      	ldr	r0, [pc, #12]	; (8000d10 <MX_CAN1_Init+0xa0>)
 8000d02:	f001 f847 	bl	8001d94 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 8000d06:	bf00      	nop
 8000d08:	3728      	adds	r7, #40	; 0x28
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20000098 	.word	0x20000098
 8000d14:	40006400 	.word	0x40006400

08000d18 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d1c:	4b17      	ldr	r3, [pc, #92]	; (8000d7c <MX_SPI1_Init+0x64>)
 8000d1e:	4a18      	ldr	r2, [pc, #96]	; (8000d80 <MX_SPI1_Init+0x68>)
 8000d20:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d22:	4b16      	ldr	r3, [pc, #88]	; (8000d7c <MX_SPI1_Init+0x64>)
 8000d24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d28:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d2a:	4b14      	ldr	r3, [pc, #80]	; (8000d7c <MX_SPI1_Init+0x64>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d30:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <MX_SPI1_Init+0x64>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000d36:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <MX_SPI1_Init+0x64>)
 8000d38:	2202      	movs	r2, #2
 8000d3a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d3c:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <MX_SPI1_Init+0x64>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000d42:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <MX_SPI1_Init+0x64>)
 8000d44:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000d48:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <MX_SPI1_Init+0x64>)
 8000d4c:	2208      	movs	r2, #8
 8000d4e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d50:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <MX_SPI1_Init+0x64>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d56:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <MX_SPI1_Init+0x64>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d5c:	4b07      	ldr	r3, [pc, #28]	; (8000d7c <MX_SPI1_Init+0x64>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <MX_SPI1_Init+0x64>)
 8000d64:	220a      	movs	r2, #10
 8000d66:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d68:	4804      	ldr	r0, [pc, #16]	; (8000d7c <MX_SPI1_Init+0x64>)
 8000d6a:	f002 fd85 	bl	8003878 <HAL_SPI_Init>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d74:	f000 f946 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	200000c0 	.word	0x200000c0
 8000d80:	40013000 	.word	0x40013000

08000d84 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d8a:	f107 0308 	add.w	r3, r7, #8
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	605a      	str	r2, [r3, #4]
 8000d94:	609a      	str	r2, [r3, #8]
 8000d96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d98:	463b      	mov	r3, r7
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000da0:	4b1d      	ldr	r3, [pc, #116]	; (8000e18 <MX_TIM2_Init+0x94>)
 8000da2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000da6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 8000da8:	4b1b      	ldr	r3, [pc, #108]	; (8000e18 <MX_TIM2_Init+0x94>)
 8000daa:	220f      	movs	r2, #15
 8000dac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dae:	4b1a      	ldr	r3, [pc, #104]	; (8000e18 <MX_TIM2_Init+0x94>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8000db4:	4b18      	ldr	r3, [pc, #96]	; (8000e18 <MX_TIM2_Init+0x94>)
 8000db6:	f242 720f 	movw	r2, #9999	; 0x270f
 8000dba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dbc:	4b16      	ldr	r3, [pc, #88]	; (8000e18 <MX_TIM2_Init+0x94>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dc2:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <MX_TIM2_Init+0x94>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000dc8:	4813      	ldr	r0, [pc, #76]	; (8000e18 <MX_TIM2_Init+0x94>)
 8000dca:	f003 fb0b 	bl	80043e4 <HAL_TIM_Base_Init>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000dd4:	f000 f916 	bl	8001004 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ddc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dde:	f107 0308 	add.w	r3, r7, #8
 8000de2:	4619      	mov	r1, r3
 8000de4:	480c      	ldr	r0, [pc, #48]	; (8000e18 <MX_TIM2_Init+0x94>)
 8000de6:	f003 fcc5 	bl	8004774 <HAL_TIM_ConfigClockSource>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000df0:	f000 f908 	bl	8001004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df4:	2300      	movs	r3, #0
 8000df6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dfc:	463b      	mov	r3, r7
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4805      	ldr	r0, [pc, #20]	; (8000e18 <MX_TIM2_Init+0x94>)
 8000e02:	f003 fee1 	bl	8004bc8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e0c:	f000 f8fa 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e10:	bf00      	nop
 8000e12:	3718      	adds	r7, #24
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20000118 	.word	0x20000118

08000e1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e20:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <MX_USART2_UART_Init+0x4c>)
 8000e22:	4a12      	ldr	r2, [pc, #72]	; (8000e6c <MX_USART2_UART_Init+0x50>)
 8000e24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000e26:	4b10      	ldr	r3, [pc, #64]	; (8000e68 <MX_USART2_UART_Init+0x4c>)
 8000e28:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000e2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e2e:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <MX_USART2_UART_Init+0x4c>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e34:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <MX_USART2_UART_Init+0x4c>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e3a:	4b0b      	ldr	r3, [pc, #44]	; (8000e68 <MX_USART2_UART_Init+0x4c>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e40:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <MX_USART2_UART_Init+0x4c>)
 8000e42:	220c      	movs	r2, #12
 8000e44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e46:	4b08      	ldr	r3, [pc, #32]	; (8000e68 <MX_USART2_UART_Init+0x4c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e4c:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <MX_USART2_UART_Init+0x4c>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e52:	4805      	ldr	r0, [pc, #20]	; (8000e68 <MX_USART2_UART_Init+0x4c>)
 8000e54:	f003 ff48 	bl	8004ce8 <HAL_UART_Init>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e5e:	f000 f8d1 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20000160 	.word	0x20000160
 8000e6c:	40004400 	.word	0x40004400

08000e70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08a      	sub	sp, #40	; 0x28
 8000e74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e76:	f107 0314 	add.w	r3, r7, #20
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]
 8000e80:	609a      	str	r2, [r3, #8]
 8000e82:	60da      	str	r2, [r3, #12]
 8000e84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	613b      	str	r3, [r7, #16]
 8000e8a:	4b38      	ldr	r3, [pc, #224]	; (8000f6c <MX_GPIO_Init+0xfc>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	4a37      	ldr	r2, [pc, #220]	; (8000f6c <MX_GPIO_Init+0xfc>)
 8000e90:	f043 0304 	orr.w	r3, r3, #4
 8000e94:	6313      	str	r3, [r2, #48]	; 0x30
 8000e96:	4b35      	ldr	r3, [pc, #212]	; (8000f6c <MX_GPIO_Init+0xfc>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	f003 0304 	and.w	r3, r3, #4
 8000e9e:	613b      	str	r3, [r7, #16]
 8000ea0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	4b31      	ldr	r3, [pc, #196]	; (8000f6c <MX_GPIO_Init+0xfc>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	4a30      	ldr	r2, [pc, #192]	; (8000f6c <MX_GPIO_Init+0xfc>)
 8000eac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb2:	4b2e      	ldr	r3, [pc, #184]	; (8000f6c <MX_GPIO_Init+0xfc>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	4b2a      	ldr	r3, [pc, #168]	; (8000f6c <MX_GPIO_Init+0xfc>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	4a29      	ldr	r2, [pc, #164]	; (8000f6c <MX_GPIO_Init+0xfc>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ece:	4b27      	ldr	r3, [pc, #156]	; (8000f6c <MX_GPIO_Init+0xfc>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	60bb      	str	r3, [r7, #8]
 8000ed8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	607b      	str	r3, [r7, #4]
 8000ede:	4b23      	ldr	r3, [pc, #140]	; (8000f6c <MX_GPIO_Init+0xfc>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	4a22      	ldr	r2, [pc, #136]	; (8000f6c <MX_GPIO_Init+0xfc>)
 8000ee4:	f043 0302 	orr.w	r3, r3, #2
 8000ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eea:	4b20      	ldr	r3, [pc, #128]	; (8000f6c <MX_GPIO_Init+0xfc>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	f003 0302 	and.w	r3, r3, #2
 8000ef2:	607b      	str	r3, [r7, #4]
 8000ef4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f240 31c7 	movw	r1, #967	; 0x3c7
 8000efc:	481c      	ldr	r0, [pc, #112]	; (8000f70 <MX_GPIO_Init+0x100>)
 8000efe:	f002 f825 	bl	8002f4c <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f08:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f12:	f107 0314 	add.w	r3, r7, #20
 8000f16:	4619      	mov	r1, r3
 8000f18:	4816      	ldr	r0, [pc, #88]	; (8000f74 <MX_GPIO_Init+0x104>)
 8000f1a:	f001 fe7b 	bl	8002c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6
 8000f1e:	f240 33c7 	movw	r3, #967	; 0x3c7
 8000f22:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f24:	2301      	movs	r3, #1
 8000f26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	4619      	mov	r1, r3
 8000f36:	480e      	ldr	r0, [pc, #56]	; (8000f70 <MX_GPIO_Init+0x100>)
 8000f38:	f001 fe6c 	bl	8002c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f3c:	2310      	movs	r3, #16
 8000f3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f40:	2300      	movs	r3, #0
 8000f42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f44:	2301      	movs	r3, #1
 8000f46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4808      	ldr	r0, [pc, #32]	; (8000f70 <MX_GPIO_Init+0x100>)
 8000f50:	f001 fe60 	bl	8002c14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f54:	2200      	movs	r2, #0
 8000f56:	2100      	movs	r1, #0
 8000f58:	2028      	movs	r0, #40	; 0x28
 8000f5a:	f001 fd92 	bl	8002a82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f5e:	2028      	movs	r0, #40	; 0x28
 8000f60:	f001 fdab 	bl	8002aba <HAL_NVIC_EnableIRQ>

}
 8000f64:	bf00      	nop
 8000f66:	3728      	adds	r7, #40	; 0x28
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	40020400 	.word	0x40020400
 8000f74:	40020800 	.word	0x40020800

08000f78 <calculate_crc_sae_j1850>:

/* USER CODE BEGIN 4 */
uint8_t calculate_crc_sae_j1850(uint8_t *data, int length){
 8000f78:	b480      	push	{r7}
 8000f7a:	b087      	sub	sp, #28
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
	 uint8_t polynomial = 0x1D; // Generator polynomial for CRC-8 SAE J1850
 8000f82:	231d      	movs	r3, #29
 8000f84:	72fb      	strb	r3, [r7, #11]
	 uint8_t remainder = 0xFF;
 8000f86:	23ff      	movs	r3, #255	; 0xff
 8000f88:	75fb      	strb	r3, [r7, #23]

	    for (int i = 0; i < length; i++) {
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	613b      	str	r3, [r7, #16]
 8000f8e:	e022      	b.n	8000fd6 <calculate_crc_sae_j1850+0x5e>
	        remainder ^= data[i];
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	4413      	add	r3, r2
 8000f96:	781a      	ldrb	r2, [r3, #0]
 8000f98:	7dfb      	ldrb	r3, [r7, #23]
 8000f9a:	4053      	eors	r3, r2
 8000f9c:	75fb      	strb	r3, [r7, #23]
	        for (int bit = 0; bit < 8; bit++) {
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	e012      	b.n	8000fca <calculate_crc_sae_j1850+0x52>
	            if (remainder & 0x80) {
 8000fa4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	da08      	bge.n	8000fbe <calculate_crc_sae_j1850+0x46>
	                remainder = (remainder << 1) ^ polynomial;
 8000fac:	7dfb      	ldrb	r3, [r7, #23]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	b25a      	sxtb	r2, r3
 8000fb2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000fb6:	4053      	eors	r3, r2
 8000fb8:	b25b      	sxtb	r3, r3
 8000fba:	75fb      	strb	r3, [r7, #23]
 8000fbc:	e002      	b.n	8000fc4 <calculate_crc_sae_j1850+0x4c>
	            } else {
	                remainder <<= 1;
 8000fbe:	7dfb      	ldrb	r3, [r7, #23]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	75fb      	strb	r3, [r7, #23]
	        for (int bit = 0; bit < 8; bit++) {
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	2b07      	cmp	r3, #7
 8000fce:	dde9      	ble.n	8000fa4 <calculate_crc_sae_j1850+0x2c>
	    for (int i = 0; i < length; i++) {
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	dbd8      	blt.n	8000f90 <calculate_crc_sae_j1850+0x18>
	            }
	        }
	    }

	    return remainder ^ 0xFF; // Invert the bits
 8000fde:	7dfb      	ldrb	r3, [r7, #23]
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	b2db      	uxtb	r3, r3
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	371c      	adds	r7, #28
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
//  if(htim->Instance == TIM2){
//		button_reading();
//		SCH_Update();
//	}
	timerRun();
 8000ff8:	f000 fccc 	bl	8001994 <timerRun>

}
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001008:	b672      	cpsid	i
}
 800100a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800100c:	e7fe      	b.n	800100c <Error_Handler+0x8>
	...

08001010 <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 800101a:	2200      	movs	r2, #0
 800101c:	2180      	movs	r1, #128	; 0x80
 800101e:	480c      	ldr	r0, [pc, #48]	; (8001050 <ST7789_WriteCommand+0x40>)
 8001020:	f001 ff94 	bl	8002f4c <HAL_GPIO_WritePin>
	ST7789_DC_Clr();
 8001024:	2200      	movs	r2, #0
 8001026:	f44f 7180 	mov.w	r1, #256	; 0x100
 800102a:	4809      	ldr	r0, [pc, #36]	; (8001050 <ST7789_WriteCommand+0x40>)
 800102c:	f001 ff8e 	bl	8002f4c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001030:	1df9      	adds	r1, r7, #7
 8001032:	f04f 33ff 	mov.w	r3, #4294967295
 8001036:	2201      	movs	r2, #1
 8001038:	4806      	ldr	r0, [pc, #24]	; (8001054 <ST7789_WriteCommand+0x44>)
 800103a:	f002 fca6 	bl	800398a <HAL_SPI_Transmit>
	ST7789_UnSelect();
 800103e:	2201      	movs	r2, #1
 8001040:	2180      	movs	r1, #128	; 0x80
 8001042:	4803      	ldr	r0, [pc, #12]	; (8001050 <ST7789_WriteCommand+0x40>)
 8001044:	f001 ff82 	bl	8002f4c <HAL_GPIO_WritePin>
}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40020400 	.word	0x40020400
 8001054:	200000c0 	.word	0x200000c0

08001058 <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 8001062:	2200      	movs	r2, #0
 8001064:	2180      	movs	r1, #128	; 0x80
 8001066:	4816      	ldr	r0, [pc, #88]	; (80010c0 <ST7789_WriteData+0x68>)
 8001068:	f001 ff70 	bl	8002f4c <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 800106c:	2201      	movs	r2, #1
 800106e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001072:	4813      	ldr	r0, [pc, #76]	; (80010c0 <ST7789_WriteData+0x68>)
 8001074:	f001 ff6a 	bl	8002f4c <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 8001078:	e015      	b.n	80010a6 <ST7789_WriteData+0x4e>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001080:	4293      	cmp	r3, r2
 8001082:	bf28      	it	cs
 8001084:	4613      	movcs	r3, r2
 8001086:	81fb      	strh	r3, [r7, #14]
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8001088:	89fa      	ldrh	r2, [r7, #14]
 800108a:	f04f 33ff 	mov.w	r3, #4294967295
 800108e:	6879      	ldr	r1, [r7, #4]
 8001090:	480c      	ldr	r0, [pc, #48]	; (80010c4 <ST7789_WriteData+0x6c>)
 8001092:	f002 fc7a 	bl	800398a <HAL_SPI_Transmit>
		#endif
		buff += chunk_size;
 8001096:	89fb      	ldrh	r3, [r7, #14]
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	4413      	add	r3, r2
 800109c:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 800109e:	89fb      	ldrh	r3, [r7, #14]
 80010a0:	683a      	ldr	r2, [r7, #0]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d1e6      	bne.n	800107a <ST7789_WriteData+0x22>
	}

	ST7789_UnSelect();
 80010ac:	2201      	movs	r2, #1
 80010ae:	2180      	movs	r1, #128	; 0x80
 80010b0:	4803      	ldr	r0, [pc, #12]	; (80010c0 <ST7789_WriteData+0x68>)
 80010b2:	f001 ff4b 	bl	8002f4c <HAL_GPIO_WritePin>
}
 80010b6:	bf00      	nop
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40020400 	.word	0x40020400
 80010c4:	200000c0 	.word	0x200000c0

080010c8 <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 80010d2:	2200      	movs	r2, #0
 80010d4:	2180      	movs	r1, #128	; 0x80
 80010d6:	480c      	ldr	r0, [pc, #48]	; (8001108 <ST7789_WriteSmallData+0x40>)
 80010d8:	f001 ff38 	bl	8002f4c <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 80010dc:	2201      	movs	r2, #1
 80010de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010e2:	4809      	ldr	r0, [pc, #36]	; (8001108 <ST7789_WriteSmallData+0x40>)
 80010e4:	f001 ff32 	bl	8002f4c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 80010e8:	1df9      	adds	r1, r7, #7
 80010ea:	f04f 33ff 	mov.w	r3, #4294967295
 80010ee:	2201      	movs	r2, #1
 80010f0:	4806      	ldr	r0, [pc, #24]	; (800110c <ST7789_WriteSmallData+0x44>)
 80010f2:	f002 fc4a 	bl	800398a <HAL_SPI_Transmit>
	ST7789_UnSelect();
 80010f6:	2201      	movs	r2, #1
 80010f8:	2180      	movs	r1, #128	; 0x80
 80010fa:	4803      	ldr	r0, [pc, #12]	; (8001108 <ST7789_WriteSmallData+0x40>)
 80010fc:	f001 ff26 	bl	8002f4c <HAL_GPIO_WritePin>
}
 8001100:	bf00      	nop
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40020400 	.word	0x40020400
 800110c:	200000c0 	.word	0x200000c0

08001110 <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 800111a:	2036      	movs	r0, #54	; 0x36
 800111c:	f7ff ff78 	bl	8001010 <ST7789_WriteCommand>
	switch (m) {
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	2b03      	cmp	r3, #3
 8001124:	d81a      	bhi.n	800115c <ST7789_SetRotation+0x4c>
 8001126:	a201      	add	r2, pc, #4	; (adr r2, 800112c <ST7789_SetRotation+0x1c>)
 8001128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800112c:	0800113d 	.word	0x0800113d
 8001130:	08001145 	.word	0x08001145
 8001134:	0800114d 	.word	0x0800114d
 8001138:	08001155 	.word	0x08001155
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 800113c:	20c0      	movs	r0, #192	; 0xc0
 800113e:	f7ff ffc3 	bl	80010c8 <ST7789_WriteSmallData>
		break;
 8001142:	e00c      	b.n	800115e <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8001144:	20a0      	movs	r0, #160	; 0xa0
 8001146:	f7ff ffbf 	bl	80010c8 <ST7789_WriteSmallData>
		break;
 800114a:	e008      	b.n	800115e <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 800114c:	2000      	movs	r0, #0
 800114e:	f7ff ffbb 	bl	80010c8 <ST7789_WriteSmallData>
		break;
 8001152:	e004      	b.n	800115e <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8001154:	2060      	movs	r0, #96	; 0x60
 8001156:	f7ff ffb7 	bl	80010c8 <ST7789_WriteSmallData>
		break;
 800115a:	e000      	b.n	800115e <ST7789_SetRotation+0x4e>
	default:
		break;
 800115c:	bf00      	nop
	}
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop

08001168 <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8001168:	b590      	push	{r4, r7, lr}
 800116a:	b087      	sub	sp, #28
 800116c:	af00      	add	r7, sp, #0
 800116e:	4604      	mov	r4, r0
 8001170:	4608      	mov	r0, r1
 8001172:	4611      	mov	r1, r2
 8001174:	461a      	mov	r2, r3
 8001176:	4623      	mov	r3, r4
 8001178:	80fb      	strh	r3, [r7, #6]
 800117a:	4603      	mov	r3, r0
 800117c:	80bb      	strh	r3, [r7, #4]
 800117e:	460b      	mov	r3, r1
 8001180:	807b      	strh	r3, [r7, #2]
 8001182:	4613      	mov	r3, r2
 8001184:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8001186:	2200      	movs	r2, #0
 8001188:	2180      	movs	r1, #128	; 0x80
 800118a:	4824      	ldr	r0, [pc, #144]	; (800121c <ST7789_SetAddressWindow+0xb4>)
 800118c:	f001 fede 	bl	8002f4c <HAL_GPIO_WritePin>
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 8001190:	88fb      	ldrh	r3, [r7, #6]
 8001192:	82fb      	strh	r3, [r7, #22]
 8001194:	887b      	ldrh	r3, [r7, #2]
 8001196:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 8001198:	88bb      	ldrh	r3, [r7, #4]
 800119a:	827b      	strh	r3, [r7, #18]
 800119c:	883b      	ldrh	r3, [r7, #0]
 800119e:	823b      	strh	r3, [r7, #16]

	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET);
 80011a0:	202a      	movs	r0, #42	; 0x2a
 80011a2:	f7ff ff35 	bl	8001010 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 80011a6:	8afb      	ldrh	r3, [r7, #22]
 80011a8:	0a1b      	lsrs	r3, r3, #8
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	733b      	strb	r3, [r7, #12]
 80011b0:	8afb      	ldrh	r3, [r7, #22]
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	737b      	strb	r3, [r7, #13]
 80011b6:	8abb      	ldrh	r3, [r7, #20]
 80011b8:	0a1b      	lsrs	r3, r3, #8
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	73bb      	strb	r3, [r7, #14]
 80011c0:	8abb      	ldrh	r3, [r7, #20]
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 80011c6:	f107 030c 	add.w	r3, r7, #12
 80011ca:	2104      	movs	r1, #4
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff ff43 	bl	8001058 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 80011d2:	202b      	movs	r0, #43	; 0x2b
 80011d4:	f7ff ff1c 	bl	8001010 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 80011d8:	8a7b      	ldrh	r3, [r7, #18]
 80011da:	0a1b      	lsrs	r3, r3, #8
 80011dc:	b29b      	uxth	r3, r3
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	723b      	strb	r3, [r7, #8]
 80011e2:	8a7b      	ldrh	r3, [r7, #18]
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	727b      	strb	r3, [r7, #9]
 80011e8:	8a3b      	ldrh	r3, [r7, #16]
 80011ea:	0a1b      	lsrs	r3, r3, #8
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	72bb      	strb	r3, [r7, #10]
 80011f2:	8a3b      	ldrh	r3, [r7, #16]
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 80011f8:	f107 0308 	add.w	r3, r7, #8
 80011fc:	2104      	movs	r1, #4
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff ff2a 	bl	8001058 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8001204:	202c      	movs	r0, #44	; 0x2c
 8001206:	f7ff ff03 	bl	8001010 <ST7789_WriteCommand>
	ST7789_UnSelect();
 800120a:	2201      	movs	r2, #1
 800120c:	2180      	movs	r1, #128	; 0x80
 800120e:	4803      	ldr	r0, [pc, #12]	; (800121c <ST7789_SetAddressWindow+0xb4>)
 8001210:	f001 fe9c 	bl	8002f4c <HAL_GPIO_WritePin>
}
 8001214:	bf00      	nop
 8001216:	371c      	adds	r7, #28
 8001218:	46bd      	mov	sp, r7
 800121a:	bd90      	pop	{r4, r7, pc}
 800121c:	40020400 	.word	0x40020400

08001220 <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 8001220:	b590      	push	{r4, r7, lr}
 8001222:	b08b      	sub	sp, #44	; 0x2c
 8001224:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
	#endif
	HAL_Delay(25);
 8001226:	2019      	movs	r0, #25
 8001228:	f000 fc94 	bl	8001b54 <HAL_Delay>
    ST7789_RST_Clr();
 800122c:	2200      	movs	r2, #0
 800122e:	2104      	movs	r1, #4
 8001230:	4846      	ldr	r0, [pc, #280]	; (800134c <ST7789_Init+0x12c>)
 8001232:	f001 fe8b 	bl	8002f4c <HAL_GPIO_WritePin>
    HAL_Delay(25);
 8001236:	2019      	movs	r0, #25
 8001238:	f000 fc8c 	bl	8001b54 <HAL_Delay>
    ST7789_RST_Set();
 800123c:	2201      	movs	r2, #1
 800123e:	2104      	movs	r1, #4
 8001240:	4842      	ldr	r0, [pc, #264]	; (800134c <ST7789_Init+0x12c>)
 8001242:	f001 fe83 	bl	8002f4c <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8001246:	2032      	movs	r0, #50	; 0x32
 8001248:	f000 fc84 	bl	8001b54 <HAL_Delay>

    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 800124c:	203a      	movs	r0, #58	; 0x3a
 800124e:	f7ff fedf 	bl	8001010 <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 8001252:	2055      	movs	r0, #85	; 0x55
 8001254:	f7ff ff38 	bl	80010c8 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 8001258:	20b2      	movs	r0, #178	; 0xb2
 800125a:	f7ff fed9 	bl	8001010 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 800125e:	4a3c      	ldr	r2, [pc, #240]	; (8001350 <ST7789_Init+0x130>)
 8001260:	f107 0320 	add.w	r3, r7, #32
 8001264:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001268:	6018      	str	r0, [r3, #0]
 800126a:	3304      	adds	r3, #4
 800126c:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 800126e:	f107 0320 	add.w	r3, r7, #32
 8001272:	2105      	movs	r1, #5
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff feef 	bl	8001058 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 800127a:	2001      	movs	r0, #1
 800127c:	f7ff ff48 	bl	8001110 <ST7789_SetRotation>

	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 8001280:	20b7      	movs	r0, #183	; 0xb7
 8001282:	f7ff fec5 	bl	8001010 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 8001286:	2035      	movs	r0, #53	; 0x35
 8001288:	f7ff ff1e 	bl	80010c8 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 800128c:	20bb      	movs	r0, #187	; 0xbb
 800128e:	f7ff febf 	bl	8001010 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 8001292:	2019      	movs	r0, #25
 8001294:	f7ff ff18 	bl	80010c8 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL
 8001298:	20c0      	movs	r0, #192	; 0xc0
 800129a:	f7ff feb9 	bl	8001010 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 800129e:	202c      	movs	r0, #44	; 0x2c
 80012a0:	f7ff ff12 	bl	80010c8 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 80012a4:	20c2      	movs	r0, #194	; 0xc2
 80012a6:	f7ff feb3 	bl	8001010 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 80012aa:	2001      	movs	r0, #1
 80012ac:	f7ff ff0c 	bl	80010c8 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 80012b0:	20c3      	movs	r0, #195	; 0xc3
 80012b2:	f7ff fead 	bl	8001010 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 80012b6:	2012      	movs	r0, #18
 80012b8:	f7ff ff06 	bl	80010c8 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 80012bc:	20c4      	movs	r0, #196	; 0xc4
 80012be:	f7ff fea7 	bl	8001010 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 80012c2:	2020      	movs	r0, #32
 80012c4:	f7ff ff00 	bl	80010c8 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 80012c8:	20c6      	movs	r0, #198	; 0xc6
 80012ca:	f7ff fea1 	bl	8001010 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 80012ce:	200f      	movs	r0, #15
 80012d0:	f7ff fefa 	bl	80010c8 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 80012d4:	20d0      	movs	r0, #208	; 0xd0
 80012d6:	f7ff fe9b 	bl	8001010 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 80012da:	20a4      	movs	r0, #164	; 0xa4
 80012dc:	f7ff fef4 	bl	80010c8 <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 80012e0:	20a1      	movs	r0, #161	; 0xa1
 80012e2:	f7ff fef1 	bl	80010c8 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 80012e6:	20e0      	movs	r0, #224	; 0xe0
 80012e8:	f7ff fe92 	bl	8001010 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 80012ec:	4b19      	ldr	r3, [pc, #100]	; (8001354 <ST7789_Init+0x134>)
 80012ee:	f107 0410 	add.w	r4, r7, #16
 80012f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012f4:	c407      	stmia	r4!, {r0, r1, r2}
 80012f6:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 80012f8:	f107 0310 	add.w	r3, r7, #16
 80012fc:	210e      	movs	r1, #14
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff feaa 	bl	8001058 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 8001304:	20e1      	movs	r0, #225	; 0xe1
 8001306:	f7ff fe83 	bl	8001010 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 800130a:	4b13      	ldr	r3, [pc, #76]	; (8001358 <ST7789_Init+0x138>)
 800130c:	463c      	mov	r4, r7
 800130e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001310:	c407      	stmia	r4!, {r0, r1, r2}
 8001312:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8001314:	463b      	mov	r3, r7
 8001316:	210e      	movs	r1, #14
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fe9d 	bl	8001058 <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 800131e:	2021      	movs	r0, #33	; 0x21
 8001320:	f7ff fe76 	bl	8001010 <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 8001324:	2011      	movs	r0, #17
 8001326:	f7ff fe73 	bl	8001010 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 800132a:	2013      	movs	r0, #19
 800132c:	f7ff fe70 	bl	8001010 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on
 8001330:	2029      	movs	r0, #41	; 0x29
 8001332:	f7ff fe6d 	bl	8001010 <ST7789_WriteCommand>

	HAL_Delay(50);
 8001336:	2032      	movs	r0, #50	; 0x32
 8001338:	f000 fc0c 	bl	8001b54 <HAL_Delay>
	ST7789_Fill_Color(WHITE);				//	Fill with Black.
 800133c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001340:	f000 f80c 	bl	800135c <ST7789_Fill_Color>
}
 8001344:	bf00      	nop
 8001346:	372c      	adds	r7, #44	; 0x2c
 8001348:	46bd      	mov	sp, r7
 800134a:	bd90      	pop	{r4, r7, pc}
 800134c:	40020400 	.word	0x40020400
 8001350:	08006740 	.word	0x08006740
 8001354:	08006748 	.word	0x08006748
 8001358:	08006758 	.word	0x08006758

0800135c <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 8001366:	23ef      	movs	r3, #239	; 0xef
 8001368:	f240 123f 	movw	r2, #319	; 0x13f
 800136c:	2100      	movs	r1, #0
 800136e:	2000      	movs	r0, #0
 8001370:	f7ff fefa 	bl	8001168 <ST7789_SetAddressWindow>
	ST7789_Select();
 8001374:	2200      	movs	r2, #0
 8001376:	2180      	movs	r1, #128	; 0x80
 8001378:	4816      	ldr	r0, [pc, #88]	; (80013d4 <ST7789_Fill_Color+0x78>)
 800137a:	f001 fde7 	bl	8002f4c <HAL_GPIO_WritePin>
			memset(disp_buf, color, sizeof(disp_buf));
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
		}
	#else
		uint16_t j;
		for (i = 0; i < ST7789_WIDTH; i++)
 800137e:	2300      	movs	r3, #0
 8001380:	81fb      	strh	r3, [r7, #14]
 8001382:	e019      	b.n	80013b8 <ST7789_Fill_Color+0x5c>
				for (j = 0; j < ST7789_HEIGHT; j++) {
 8001384:	2300      	movs	r3, #0
 8001386:	81bb      	strh	r3, [r7, #12]
 8001388:	e010      	b.n	80013ac <ST7789_Fill_Color+0x50>
					uint8_t data[] = {color >> 8, color & 0xFF};
 800138a:	88fb      	ldrh	r3, [r7, #6]
 800138c:	0a1b      	lsrs	r3, r3, #8
 800138e:	b29b      	uxth	r3, r3
 8001390:	b2db      	uxtb	r3, r3
 8001392:	723b      	strb	r3, [r7, #8]
 8001394:	88fb      	ldrh	r3, [r7, #6]
 8001396:	b2db      	uxtb	r3, r3
 8001398:	727b      	strb	r3, [r7, #9]
					ST7789_WriteData(data, sizeof(data));
 800139a:	f107 0308 	add.w	r3, r7, #8
 800139e:	2102      	movs	r1, #2
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff fe59 	bl	8001058 <ST7789_WriteData>
				for (j = 0; j < ST7789_HEIGHT; j++) {
 80013a6:	89bb      	ldrh	r3, [r7, #12]
 80013a8:	3301      	adds	r3, #1
 80013aa:	81bb      	strh	r3, [r7, #12]
 80013ac:	89bb      	ldrh	r3, [r7, #12]
 80013ae:	2bef      	cmp	r3, #239	; 0xef
 80013b0:	d9eb      	bls.n	800138a <ST7789_Fill_Color+0x2e>
		for (i = 0; i < ST7789_WIDTH; i++)
 80013b2:	89fb      	ldrh	r3, [r7, #14]
 80013b4:	3301      	adds	r3, #1
 80013b6:	81fb      	strh	r3, [r7, #14]
 80013b8:	89fb      	ldrh	r3, [r7, #14]
 80013ba:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80013be:	d3e1      	bcc.n	8001384 <ST7789_Fill_Color+0x28>
				}
	#endif
	ST7789_UnSelect();
 80013c0:	2201      	movs	r2, #1
 80013c2:	2180      	movs	r1, #128	; 0x80
 80013c4:	4803      	ldr	r0, [pc, #12]	; (80013d4 <ST7789_Fill_Color+0x78>)
 80013c6:	f001 fdc1 	bl	8002f4c <HAL_GPIO_WritePin>
}
 80013ca:	bf00      	nop
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40020400 	.word	0x40020400

080013d8 <ST7789_WriteChar>:
 * @param color -> color of the char
 * @param bgcolor -> background color of the char
 * @return  none
 */
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 80013d8:	b082      	sub	sp, #8
 80013da:	b590      	push	{r4, r7, lr}
 80013dc:	b089      	sub	sp, #36	; 0x24
 80013de:	af00      	add	r7, sp, #0
 80013e0:	637b      	str	r3, [r7, #52]	; 0x34
 80013e2:	4603      	mov	r3, r0
 80013e4:	80fb      	strh	r3, [r7, #6]
 80013e6:	460b      	mov	r3, r1
 80013e8:	80bb      	strh	r3, [r7, #4]
 80013ea:	4613      	mov	r3, r2
 80013ec:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;
	ST7789_Select();
 80013ee:	2200      	movs	r2, #0
 80013f0:	2180      	movs	r1, #128	; 0x80
 80013f2:	4838      	ldr	r0, [pc, #224]	; (80014d4 <ST7789_WriteChar+0xfc>)
 80013f4:	f001 fdaa 	bl	8002f4c <HAL_GPIO_WritePin>
	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 80013f8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80013fc:	b29a      	uxth	r2, r3
 80013fe:	88fb      	ldrh	r3, [r7, #6]
 8001400:	4413      	add	r3, r2
 8001402:	b29b      	uxth	r3, r3
 8001404:	3b01      	subs	r3, #1
 8001406:	b29c      	uxth	r4, r3
 8001408:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800140c:	b29a      	uxth	r2, r3
 800140e:	88bb      	ldrh	r3, [r7, #4]
 8001410:	4413      	add	r3, r2
 8001412:	b29b      	uxth	r3, r3
 8001414:	3b01      	subs	r3, #1
 8001416:	b29b      	uxth	r3, r3
 8001418:	88b9      	ldrh	r1, [r7, #4]
 800141a:	88f8      	ldrh	r0, [r7, #6]
 800141c:	4622      	mov	r2, r4
 800141e:	f7ff fea3 	bl	8001168 <ST7789_SetAddressWindow>

	for (i = 0; i < font.height; i++) {
 8001422:	2300      	movs	r3, #0
 8001424:	61fb      	str	r3, [r7, #28]
 8001426:	e043      	b.n	80014b0 <ST7789_WriteChar+0xd8>
		b = font.data[(ch - 32) * font.height + i];
 8001428:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800142a:	78fb      	ldrb	r3, [r7, #3]
 800142c:	3b20      	subs	r3, #32
 800142e:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8001432:	fb01 f303 	mul.w	r3, r1, r3
 8001436:	4619      	mov	r1, r3
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	440b      	add	r3, r1
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	4413      	add	r3, r2
 8001440:	881b      	ldrh	r3, [r3, #0]
 8001442:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
 8001444:	2300      	movs	r3, #0
 8001446:	61bb      	str	r3, [r7, #24]
 8001448:	e029      	b.n	800149e <ST7789_WriteChar+0xc6>
			if ((b << j) & 0x8000) {
 800144a:	697a      	ldr	r2, [r7, #20]
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d00e      	beq.n	8001478 <ST7789_WriteChar+0xa0>
				uint8_t data[] = {color >> 8, color & 0xFF};
 800145a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800145c:	0a1b      	lsrs	r3, r3, #8
 800145e:	b29b      	uxth	r3, r3
 8001460:	b2db      	uxtb	r3, r3
 8001462:	743b      	strb	r3, [r7, #16]
 8001464:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001466:	b2db      	uxtb	r3, r3
 8001468:	747b      	strb	r3, [r7, #17]
				ST7789_WriteData(data, sizeof(data));
 800146a:	f107 0310 	add.w	r3, r7, #16
 800146e:	2102      	movs	r1, #2
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff fdf1 	bl	8001058 <ST7789_WriteData>
 8001476:	e00f      	b.n	8001498 <ST7789_WriteChar+0xc0>
			}
			else {
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 8001478:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800147c:	0a1b      	lsrs	r3, r3, #8
 800147e:	b29b      	uxth	r3, r3
 8001480:	b2db      	uxtb	r3, r3
 8001482:	733b      	strb	r3, [r7, #12]
 8001484:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001488:	b2db      	uxtb	r3, r3
 800148a:	737b      	strb	r3, [r7, #13]
				ST7789_WriteData(data, sizeof(data));
 800148c:	f107 030c 	add.w	r3, r7, #12
 8001490:	2102      	movs	r1, #2
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff fde0 	bl	8001058 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	3301      	adds	r3, #1
 800149c:	61bb      	str	r3, [r7, #24]
 800149e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80014a2:	461a      	mov	r2, r3
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d3cf      	bcc.n	800144a <ST7789_WriteChar+0x72>
	for (i = 0; i < font.height; i++) {
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	3301      	adds	r3, #1
 80014ae:	61fb      	str	r3, [r7, #28]
 80014b0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80014b4:	461a      	mov	r2, r3
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d3b5      	bcc.n	8001428 <ST7789_WriteChar+0x50>
			}
		}
	}
	ST7789_UnSelect();
 80014bc:	2201      	movs	r2, #1
 80014be:	2180      	movs	r1, #128	; 0x80
 80014c0:	4804      	ldr	r0, [pc, #16]	; (80014d4 <ST7789_WriteChar+0xfc>)
 80014c2:	f001 fd43 	bl	8002f4c <HAL_GPIO_WritePin>
}
 80014c6:	bf00      	nop
 80014c8:	3724      	adds	r7, #36	; 0x24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80014d0:	b002      	add	sp, #8
 80014d2:	4770      	bx	lr
 80014d4:	40020400 	.word	0x40020400

080014d8 <ST7789_WriteString>:
 * @param color -> color of the string
 * @param bgcolor -> background color of the string
 * @return  none
 */
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 80014d8:	b082      	sub	sp, #8
 80014da:	b580      	push	{r7, lr}
 80014dc:	b086      	sub	sp, #24
 80014de:	af04      	add	r7, sp, #16
 80014e0:	603a      	str	r2, [r7, #0]
 80014e2:	617b      	str	r3, [r7, #20]
 80014e4:	4603      	mov	r3, r0
 80014e6:	80fb      	strh	r3, [r7, #6]
 80014e8:	460b      	mov	r3, r1
 80014ea:	80bb      	strh	r3, [r7, #4]
	ST7789_Select();
 80014ec:	2200      	movs	r2, #0
 80014ee:	2180      	movs	r1, #128	; 0x80
 80014f0:	4822      	ldr	r0, [pc, #136]	; (800157c <ST7789_WriteString+0xa4>)
 80014f2:	f001 fd2b 	bl	8002f4c <HAL_GPIO_WritePin>
	while (*str) {
 80014f6:	e02e      	b.n	8001556 <ST7789_WriteString+0x7e>
		if (x + font.width >= ST7789_WIDTH) {
 80014f8:	88fb      	ldrh	r3, [r7, #6]
 80014fa:	7d3a      	ldrb	r2, [r7, #20]
 80014fc:	4413      	add	r3, r2
 80014fe:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001502:	db13      	blt.n	800152c <ST7789_WriteString+0x54>
			x = 0;
 8001504:	2300      	movs	r3, #0
 8001506:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8001508:	7d7b      	ldrb	r3, [r7, #21]
 800150a:	b29a      	uxth	r2, r3
 800150c:	88bb      	ldrh	r3, [r7, #4]
 800150e:	4413      	add	r3, r2
 8001510:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) {
 8001512:	88bb      	ldrh	r3, [r7, #4]
 8001514:	7d7a      	ldrb	r2, [r7, #21]
 8001516:	4413      	add	r3, r2
 8001518:	2bef      	cmp	r3, #239	; 0xef
 800151a:	dc21      	bgt.n	8001560 <ST7789_WriteString+0x88>
				break;
			}

			if (*str == ' ') {
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b20      	cmp	r3, #32
 8001522:	d103      	bne.n	800152c <ST7789_WriteString+0x54>
				// skip spaces in the beginning of the new line
				str++;
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	3301      	adds	r3, #1
 8001528:	603b      	str	r3, [r7, #0]
				continue;
 800152a:	e014      	b.n	8001556 <ST7789_WriteString+0x7e>
			}
		}
		ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	781a      	ldrb	r2, [r3, #0]
 8001530:	88b9      	ldrh	r1, [r7, #4]
 8001532:	88f8      	ldrh	r0, [r7, #6]
 8001534:	8c3b      	ldrh	r3, [r7, #32]
 8001536:	9302      	str	r3, [sp, #8]
 8001538:	8bbb      	ldrh	r3, [r7, #28]
 800153a:	9301      	str	r3, [sp, #4]
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	f7ff ff49 	bl	80013d8 <ST7789_WriteChar>
		x += font.width;
 8001546:	7d3b      	ldrb	r3, [r7, #20]
 8001548:	b29a      	uxth	r2, r3
 800154a:	88fb      	ldrh	r3, [r7, #6]
 800154c:	4413      	add	r3, r2
 800154e:	80fb      	strh	r3, [r7, #6]
		str++;
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	3301      	adds	r3, #1
 8001554:	603b      	str	r3, [r7, #0]
	while (*str) {
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1cc      	bne.n	80014f8 <ST7789_WriteString+0x20>
 800155e:	e000      	b.n	8001562 <ST7789_WriteString+0x8a>
				break;
 8001560:	bf00      	nop
	}
	ST7789_UnSelect();
 8001562:	2201      	movs	r2, #1
 8001564:	2180      	movs	r1, #128	; 0x80
 8001566:	4805      	ldr	r0, [pc, #20]	; (800157c <ST7789_WriteString+0xa4>)
 8001568:	f001 fcf0 	bl	8002f4c <HAL_GPIO_WritePin>
}
 800156c:	bf00      	nop
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001576:	b002      	add	sp, #8
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	40020400 	.word	0x40020400

08001580 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	607b      	str	r3, [r7, #4]
 800158a:	4b10      	ldr	r3, [pc, #64]	; (80015cc <HAL_MspInit+0x4c>)
 800158c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158e:	4a0f      	ldr	r2, [pc, #60]	; (80015cc <HAL_MspInit+0x4c>)
 8001590:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001594:	6453      	str	r3, [r2, #68]	; 0x44
 8001596:	4b0d      	ldr	r3, [pc, #52]	; (80015cc <HAL_MspInit+0x4c>)
 8001598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800159e:	607b      	str	r3, [r7, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	603b      	str	r3, [r7, #0]
 80015a6:	4b09      	ldr	r3, [pc, #36]	; (80015cc <HAL_MspInit+0x4c>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	4a08      	ldr	r2, [pc, #32]	; (80015cc <HAL_MspInit+0x4c>)
 80015ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b0:	6413      	str	r3, [r2, #64]	; 0x40
 80015b2:	4b06      	ldr	r3, [pc, #24]	; (80015cc <HAL_MspInit+0x4c>)
 80015b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ba:	603b      	str	r3, [r7, #0]
 80015bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	40023800 	.word	0x40023800

080015d0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08a      	sub	sp, #40	; 0x28
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d8:	f107 0314 	add.w	r3, r7, #20
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a1d      	ldr	r2, [pc, #116]	; (8001664 <HAL_CAN_MspInit+0x94>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d134      	bne.n	800165c <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	613b      	str	r3, [r7, #16]
 80015f6:	4b1c      	ldr	r3, [pc, #112]	; (8001668 <HAL_CAN_MspInit+0x98>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	4a1b      	ldr	r2, [pc, #108]	; (8001668 <HAL_CAN_MspInit+0x98>)
 80015fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001600:	6413      	str	r3, [r2, #64]	; 0x40
 8001602:	4b19      	ldr	r3, [pc, #100]	; (8001668 <HAL_CAN_MspInit+0x98>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800160a:	613b      	str	r3, [r7, #16]
 800160c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	4b15      	ldr	r3, [pc, #84]	; (8001668 <HAL_CAN_MspInit+0x98>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	4a14      	ldr	r2, [pc, #80]	; (8001668 <HAL_CAN_MspInit+0x98>)
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	6313      	str	r3, [r2, #48]	; 0x30
 800161e:	4b12      	ldr	r3, [pc, #72]	; (8001668 <HAL_CAN_MspInit+0x98>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800162a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800162e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001630:	2302      	movs	r3, #2
 8001632:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001634:	2301      	movs	r3, #1
 8001636:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001638:	2303      	movs	r3, #3
 800163a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800163c:	2309      	movs	r3, #9
 800163e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001640:	f107 0314 	add.w	r3, r7, #20
 8001644:	4619      	mov	r1, r3
 8001646:	4809      	ldr	r0, [pc, #36]	; (800166c <HAL_CAN_MspInit+0x9c>)
 8001648:	f001 fae4 	bl	8002c14 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800164c:	2200      	movs	r2, #0
 800164e:	2100      	movs	r1, #0
 8001650:	2014      	movs	r0, #20
 8001652:	f001 fa16 	bl	8002a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001656:	2014      	movs	r0, #20
 8001658:	f001 fa2f 	bl	8002aba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800165c:	bf00      	nop
 800165e:	3728      	adds	r7, #40	; 0x28
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40006400 	.word	0x40006400
 8001668:	40023800 	.word	0x40023800
 800166c:	40020000 	.word	0x40020000

08001670 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08a      	sub	sp, #40	; 0x28
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001678:	f107 0314 	add.w	r3, r7, #20
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a28      	ldr	r2, [pc, #160]	; (8001730 <HAL_SPI_MspInit+0xc0>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d149      	bne.n	8001726 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	613b      	str	r3, [r7, #16]
 8001696:	4b27      	ldr	r3, [pc, #156]	; (8001734 <HAL_SPI_MspInit+0xc4>)
 8001698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169a:	4a26      	ldr	r2, [pc, #152]	; (8001734 <HAL_SPI_MspInit+0xc4>)
 800169c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016a0:	6453      	str	r3, [r2, #68]	; 0x44
 80016a2:	4b24      	ldr	r3, [pc, #144]	; (8001734 <HAL_SPI_MspInit+0xc4>)
 80016a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016aa:	613b      	str	r3, [r7, #16]
 80016ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	4b20      	ldr	r3, [pc, #128]	; (8001734 <HAL_SPI_MspInit+0xc4>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	4a1f      	ldr	r2, [pc, #124]	; (8001734 <HAL_SPI_MspInit+0xc4>)
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	6313      	str	r3, [r2, #48]	; 0x30
 80016be:	4b1d      	ldr	r3, [pc, #116]	; (8001734 <HAL_SPI_MspInit+0xc4>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	60bb      	str	r3, [r7, #8]
 80016ce:	4b19      	ldr	r3, [pc, #100]	; (8001734 <HAL_SPI_MspInit+0xc4>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	4a18      	ldr	r2, [pc, #96]	; (8001734 <HAL_SPI_MspInit+0xc4>)
 80016d4:	f043 0302 	orr.w	r3, r3, #2
 80016d8:	6313      	str	r3, [r2, #48]	; 0x30
 80016da:	4b16      	ldr	r3, [pc, #88]	; (8001734 <HAL_SPI_MspInit+0xc4>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	60bb      	str	r3, [r7, #8]
 80016e4:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 80016e6:	23d0      	movs	r3, #208	; 0xd0
 80016e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ea:	2302      	movs	r3, #2
 80016ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f2:	2303      	movs	r3, #3
 80016f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016f6:	2305      	movs	r3, #5
 80016f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016fa:	f107 0314 	add.w	r3, r7, #20
 80016fe:	4619      	mov	r1, r3
 8001700:	480d      	ldr	r0, [pc, #52]	; (8001738 <HAL_SPI_MspInit+0xc8>)
 8001702:	f001 fa87 	bl	8002c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001706:	2308      	movs	r3, #8
 8001708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170a:	2302      	movs	r3, #2
 800170c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001712:	2303      	movs	r3, #3
 8001714:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001716:	2305      	movs	r3, #5
 8001718:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800171a:	f107 0314 	add.w	r3, r7, #20
 800171e:	4619      	mov	r1, r3
 8001720:	4806      	ldr	r0, [pc, #24]	; (800173c <HAL_SPI_MspInit+0xcc>)
 8001722:	f001 fa77 	bl	8002c14 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001726:	bf00      	nop
 8001728:	3728      	adds	r7, #40	; 0x28
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40013000 	.word	0x40013000
 8001734:	40023800 	.word	0x40023800
 8001738:	40020000 	.word	0x40020000
 800173c:	40020400 	.word	0x40020400

08001740 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001750:	d115      	bne.n	800177e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	4b0c      	ldr	r3, [pc, #48]	; (8001788 <HAL_TIM_Base_MspInit+0x48>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	4a0b      	ldr	r2, [pc, #44]	; (8001788 <HAL_TIM_Base_MspInit+0x48>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	6413      	str	r3, [r2, #64]	; 0x40
 8001762:	4b09      	ldr	r3, [pc, #36]	; (8001788 <HAL_TIM_Base_MspInit+0x48>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800176e:	2200      	movs	r2, #0
 8001770:	2100      	movs	r1, #0
 8001772:	201c      	movs	r0, #28
 8001774:	f001 f985 	bl	8002a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001778:	201c      	movs	r0, #28
 800177a:	f001 f99e 	bl	8002aba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800177e:	bf00      	nop
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40023800 	.word	0x40023800

0800178c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b08a      	sub	sp, #40	; 0x28
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001794:	f107 0314 	add.w	r3, r7, #20
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a1d      	ldr	r2, [pc, #116]	; (8001820 <HAL_UART_MspInit+0x94>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d133      	bne.n	8001816 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	613b      	str	r3, [r7, #16]
 80017b2:	4b1c      	ldr	r3, [pc, #112]	; (8001824 <HAL_UART_MspInit+0x98>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	4a1b      	ldr	r2, [pc, #108]	; (8001824 <HAL_UART_MspInit+0x98>)
 80017b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017bc:	6413      	str	r3, [r2, #64]	; 0x40
 80017be:	4b19      	ldr	r3, [pc, #100]	; (8001824 <HAL_UART_MspInit+0x98>)
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c6:	613b      	str	r3, [r7, #16]
 80017c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	60fb      	str	r3, [r7, #12]
 80017ce:	4b15      	ldr	r3, [pc, #84]	; (8001824 <HAL_UART_MspInit+0x98>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	4a14      	ldr	r2, [pc, #80]	; (8001824 <HAL_UART_MspInit+0x98>)
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	6313      	str	r3, [r2, #48]	; 0x30
 80017da:	4b12      	ldr	r3, [pc, #72]	; (8001824 <HAL_UART_MspInit+0x98>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017e6:	230c      	movs	r3, #12
 80017e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ea:	2302      	movs	r3, #2
 80017ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f2:	2303      	movs	r3, #3
 80017f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017f6:	2307      	movs	r3, #7
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fa:	f107 0314 	add.w	r3, r7, #20
 80017fe:	4619      	mov	r1, r3
 8001800:	4809      	ldr	r0, [pc, #36]	; (8001828 <HAL_UART_MspInit+0x9c>)
 8001802:	f001 fa07 	bl	8002c14 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001806:	2200      	movs	r2, #0
 8001808:	2100      	movs	r1, #0
 800180a:	2026      	movs	r0, #38	; 0x26
 800180c:	f001 f939 	bl	8002a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001810:	2026      	movs	r0, #38	; 0x26
 8001812:	f001 f952 	bl	8002aba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001816:	bf00      	nop
 8001818:	3728      	adds	r7, #40	; 0x28
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40004400 	.word	0x40004400
 8001824:	40023800 	.word	0x40023800
 8001828:	40020000 	.word	0x40020000

0800182c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001830:	e7fe      	b.n	8001830 <NMI_Handler+0x4>

08001832 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001832:	b480      	push	{r7}
 8001834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001836:	e7fe      	b.n	8001836 <HardFault_Handler+0x4>

08001838 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800183c:	e7fe      	b.n	800183c <MemManage_Handler+0x4>

0800183e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800183e:	b480      	push	{r7}
 8001840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001842:	e7fe      	b.n	8001842 <BusFault_Handler+0x4>

08001844 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001848:	e7fe      	b.n	8001848 <UsageFault_Handler+0x4>

0800184a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800185c:	bf00      	nop
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001866:	b480      	push	{r7}
 8001868:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001878:	f000 f94c 	bl	8001b14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800187c:	bf00      	nop
 800187e:	bd80      	pop	{r7, pc}

08001880 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001884:	4802      	ldr	r0, [pc, #8]	; (8001890 <CAN1_RX0_IRQHandler+0x10>)
 8001886:	f000 fdf1 	bl	800246c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000098 	.word	0x20000098

08001894 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001898:	4802      	ldr	r0, [pc, #8]	; (80018a4 <TIM2_IRQHandler+0x10>)
 800189a:	f002 fe63 	bl	8004564 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20000118 	.word	0x20000118

080018a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018ac:	4802      	ldr	r0, [pc, #8]	; (80018b8 <USART2_IRQHandler+0x10>)
 80018ae:	f003 fb2b 	bl	8004f08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20000160 	.word	0x20000160

080018bc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80018c0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80018c4:	f001 fb5c 	bl	8002f80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80018c8:	bf00      	nop
 80018ca:	bd80      	pop	{r7, pc}

080018cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018d4:	4a14      	ldr	r2, [pc, #80]	; (8001928 <_sbrk+0x5c>)
 80018d6:	4b15      	ldr	r3, [pc, #84]	; (800192c <_sbrk+0x60>)
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018e0:	4b13      	ldr	r3, [pc, #76]	; (8001930 <_sbrk+0x64>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d102      	bne.n	80018ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018e8:	4b11      	ldr	r3, [pc, #68]	; (8001930 <_sbrk+0x64>)
 80018ea:	4a12      	ldr	r2, [pc, #72]	; (8001934 <_sbrk+0x68>)
 80018ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ee:	4b10      	ldr	r3, [pc, #64]	; (8001930 <_sbrk+0x64>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4413      	add	r3, r2
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d207      	bcs.n	800190c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018fc:	f004 fa6c 	bl	8005dd8 <__errno>
 8001900:	4603      	mov	r3, r0
 8001902:	220c      	movs	r2, #12
 8001904:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001906:	f04f 33ff 	mov.w	r3, #4294967295
 800190a:	e009      	b.n	8001920 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800190c:	4b08      	ldr	r3, [pc, #32]	; (8001930 <_sbrk+0x64>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001912:	4b07      	ldr	r3, [pc, #28]	; (8001930 <_sbrk+0x64>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4413      	add	r3, r2
 800191a:	4a05      	ldr	r2, [pc, #20]	; (8001930 <_sbrk+0x64>)
 800191c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800191e:	68fb      	ldr	r3, [r7, #12]
}
 8001920:	4618      	mov	r0, r3
 8001922:	3718      	adds	r7, #24
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	20020000 	.word	0x20020000
 800192c:	00000400 	.word	0x00000400
 8001930:	20000224 	.word	0x20000224
 8001934:	20000258 	.word	0x20000258

08001938 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800193c:	4b06      	ldr	r3, [pc, #24]	; (8001958 <SystemInit+0x20>)
 800193e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001942:	4a05      	ldr	r2, [pc, #20]	; (8001958 <SystemInit+0x20>)
 8001944:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001948:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <setTimer1>:
int timer1_flag = 0;
int timer2_flag = 0;
int timer3_flag = 0;


void setTimer1 (int duration) {
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/Timer_Cycle;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4a08      	ldr	r2, [pc, #32]	; (8001988 <setTimer1+0x2c>)
 8001968:	fb82 1203 	smull	r1, r2, r2, r3
 800196c:	1092      	asrs	r2, r2, #2
 800196e:	17db      	asrs	r3, r3, #31
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	4a06      	ldr	r2, [pc, #24]	; (800198c <setTimer1+0x30>)
 8001974:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001976:	4b06      	ldr	r3, [pc, #24]	; (8001990 <setTimer1+0x34>)
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
}
 800197c:	bf00      	nop
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	66666667 	.word	0x66666667
 800198c:	20000228 	.word	0x20000228
 8001990:	20000234 	.word	0x20000234

08001994 <timerRun>:
void setTimer3 (int duration) {
	timer3_counter = duration/Timer_Cycle;
	timer3_flag = 0;
}

void timerRun(){
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
	if(timer1_counter > 0) {
 8001998:	4b1a      	ldr	r3, [pc, #104]	; (8001a04 <timerRun+0x70>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	dd0b      	ble.n	80019b8 <timerRun+0x24>
		timer1_counter--;
 80019a0:	4b18      	ldr	r3, [pc, #96]	; (8001a04 <timerRun+0x70>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	3b01      	subs	r3, #1
 80019a6:	4a17      	ldr	r2, [pc, #92]	; (8001a04 <timerRun+0x70>)
 80019a8:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0) {
 80019aa:	4b16      	ldr	r3, [pc, #88]	; (8001a04 <timerRun+0x70>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	dc02      	bgt.n	80019b8 <timerRun+0x24>
			timer1_flag = 1;
 80019b2:	4b15      	ldr	r3, [pc, #84]	; (8001a08 <timerRun+0x74>)
 80019b4:	2201      	movs	r2, #1
 80019b6:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0) {
 80019b8:	4b14      	ldr	r3, [pc, #80]	; (8001a0c <timerRun+0x78>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	dd0b      	ble.n	80019d8 <timerRun+0x44>
		timer2_counter--;
 80019c0:	4b12      	ldr	r3, [pc, #72]	; (8001a0c <timerRun+0x78>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	3b01      	subs	r3, #1
 80019c6:	4a11      	ldr	r2, [pc, #68]	; (8001a0c <timerRun+0x78>)
 80019c8:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0) {
 80019ca:	4b10      	ldr	r3, [pc, #64]	; (8001a0c <timerRun+0x78>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	dc02      	bgt.n	80019d8 <timerRun+0x44>
			timer2_flag = 1;
 80019d2:	4b0f      	ldr	r3, [pc, #60]	; (8001a10 <timerRun+0x7c>)
 80019d4:	2201      	movs	r2, #1
 80019d6:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0) {
 80019d8:	4b0e      	ldr	r3, [pc, #56]	; (8001a14 <timerRun+0x80>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	dd0b      	ble.n	80019f8 <timerRun+0x64>
		timer3_counter--;
 80019e0:	4b0c      	ldr	r3, [pc, #48]	; (8001a14 <timerRun+0x80>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	3b01      	subs	r3, #1
 80019e6:	4a0b      	ldr	r2, [pc, #44]	; (8001a14 <timerRun+0x80>)
 80019e8:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0) {
 80019ea:	4b0a      	ldr	r3, [pc, #40]	; (8001a14 <timerRun+0x80>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	dc02      	bgt.n	80019f8 <timerRun+0x64>
			timer3_flag = 1;
 80019f2:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <timerRun+0x84>)
 80019f4:	2201      	movs	r2, #1
 80019f6:	601a      	str	r2, [r3, #0]
		}
	}
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	20000228 	.word	0x20000228
 8001a08:	20000234 	.word	0x20000234
 8001a0c:	2000022c 	.word	0x2000022c
 8001a10:	20000238 	.word	0x20000238
 8001a14:	20000230 	.word	0x20000230
 8001a18:	2000023c 	.word	0x2000023c

08001a1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001a1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a20:	480d      	ldr	r0, [pc, #52]	; (8001a58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a22:	490e      	ldr	r1, [pc, #56]	; (8001a5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a24:	4a0e      	ldr	r2, [pc, #56]	; (8001a60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a28:	e002      	b.n	8001a30 <LoopCopyDataInit>

08001a2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a2e:	3304      	adds	r3, #4

08001a30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a34:	d3f9      	bcc.n	8001a2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a36:	4a0b      	ldr	r2, [pc, #44]	; (8001a64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a38:	4c0b      	ldr	r4, [pc, #44]	; (8001a68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a3c:	e001      	b.n	8001a42 <LoopFillZerobss>

08001a3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a40:	3204      	adds	r2, #4

08001a42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a44:	d3fb      	bcc.n	8001a3e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a46:	f7ff ff77 	bl	8001938 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a4a:	f004 f9cb 	bl	8005de4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a4e:	f7fe fffb 	bl	8000a48 <main>
  bx  lr    
 8001a52:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001a54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a5c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001a60:	08007590 	.word	0x08007590
  ldr r2, =_sbss
 8001a64:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001a68:	20000254 	.word	0x20000254

08001a6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a6c:	e7fe      	b.n	8001a6c <ADC_IRQHandler>
	...

08001a70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a74:	4b0e      	ldr	r3, [pc, #56]	; (8001ab0 <HAL_Init+0x40>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a0d      	ldr	r2, [pc, #52]	; (8001ab0 <HAL_Init+0x40>)
 8001a7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a80:	4b0b      	ldr	r3, [pc, #44]	; (8001ab0 <HAL_Init+0x40>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a0a      	ldr	r2, [pc, #40]	; (8001ab0 <HAL_Init+0x40>)
 8001a86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a8c:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <HAL_Init+0x40>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a07      	ldr	r2, [pc, #28]	; (8001ab0 <HAL_Init+0x40>)
 8001a92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a98:	2003      	movs	r0, #3
 8001a9a:	f000 ffe7 	bl	8002a6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a9e:	200f      	movs	r0, #15
 8001aa0:	f000 f808 	bl	8001ab4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aa4:	f7ff fd6c 	bl	8001580 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40023c00 	.word	0x40023c00

08001ab4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001abc:	4b12      	ldr	r3, [pc, #72]	; (8001b08 <HAL_InitTick+0x54>)
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <HAL_InitTick+0x58>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aca:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f000 ffff 	bl	8002ad6 <HAL_SYSTICK_Config>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e00e      	b.n	8001b00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2b0f      	cmp	r3, #15
 8001ae6:	d80a      	bhi.n	8001afe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ae8:	2200      	movs	r2, #0
 8001aea:	6879      	ldr	r1, [r7, #4]
 8001aec:	f04f 30ff 	mov.w	r0, #4294967295
 8001af0:	f000 ffc7 	bl	8002a82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001af4:	4a06      	ldr	r2, [pc, #24]	; (8001b10 <HAL_InitTick+0x5c>)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001afa:	2300      	movs	r3, #0
 8001afc:	e000      	b.n	8001b00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	20000008 	.word	0x20000008
 8001b0c:	20000010 	.word	0x20000010
 8001b10:	2000000c 	.word	0x2000000c

08001b14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b18:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <HAL_IncTick+0x20>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <HAL_IncTick+0x24>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4413      	add	r3, r2
 8001b24:	4a04      	ldr	r2, [pc, #16]	; (8001b38 <HAL_IncTick+0x24>)
 8001b26:	6013      	str	r3, [r2, #0]
}
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	20000010 	.word	0x20000010
 8001b38:	20000240 	.word	0x20000240

08001b3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b40:	4b03      	ldr	r3, [pc, #12]	; (8001b50 <HAL_GetTick+0x14>)
 8001b42:	681b      	ldr	r3, [r3, #0]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	20000240 	.word	0x20000240

08001b54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b5c:	f7ff ffee 	bl	8001b3c <HAL_GetTick>
 8001b60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b6c:	d005      	beq.n	8001b7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b6e:	4b0a      	ldr	r3, [pc, #40]	; (8001b98 <HAL_Delay+0x44>)
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	461a      	mov	r2, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	4413      	add	r3, r2
 8001b78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b7a:	bf00      	nop
 8001b7c:	f7ff ffde 	bl	8001b3c <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	68fa      	ldr	r2, [r7, #12]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d8f7      	bhi.n	8001b7c <HAL_Delay+0x28>
  {
  }
}
 8001b8c:	bf00      	nop
 8001b8e:	bf00      	nop
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	20000010 	.word	0x20000010

08001b9c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e0ed      	b.n	8001d8a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d102      	bne.n	8001bc0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f7ff fd08 	bl	80015d0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f042 0201 	orr.w	r2, r2, #1
 8001bce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bd0:	f7ff ffb4 	bl	8001b3c <HAL_GetTick>
 8001bd4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001bd6:	e012      	b.n	8001bfe <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001bd8:	f7ff ffb0 	bl	8001b3c <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b0a      	cmp	r3, #10
 8001be4:	d90b      	bls.n	8001bfe <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2205      	movs	r2, #5
 8001bf6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e0c5      	b.n	8001d8a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d0e5      	beq.n	8001bd8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f022 0202 	bic.w	r2, r2, #2
 8001c1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c1c:	f7ff ff8e 	bl	8001b3c <HAL_GetTick>
 8001c20:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c22:	e012      	b.n	8001c4a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c24:	f7ff ff8a 	bl	8001b3c <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b0a      	cmp	r3, #10
 8001c30:	d90b      	bls.n	8001c4a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c36:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2205      	movs	r2, #5
 8001c42:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e09f      	b.n	8001d8a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d1e5      	bne.n	8001c24 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	7e1b      	ldrb	r3, [r3, #24]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d108      	bne.n	8001c72 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	e007      	b.n	8001c82 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c80:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	7e5b      	ldrb	r3, [r3, #25]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d108      	bne.n	8001c9c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c98:	601a      	str	r2, [r3, #0]
 8001c9a:	e007      	b.n	8001cac <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001caa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	7e9b      	ldrb	r3, [r3, #26]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d108      	bne.n	8001cc6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f042 0220 	orr.w	r2, r2, #32
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	e007      	b.n	8001cd6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f022 0220 	bic.w	r2, r2, #32
 8001cd4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	7edb      	ldrb	r3, [r3, #27]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d108      	bne.n	8001cf0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f022 0210 	bic.w	r2, r2, #16
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	e007      	b.n	8001d00 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f042 0210 	orr.w	r2, r2, #16
 8001cfe:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	7f1b      	ldrb	r3, [r3, #28]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d108      	bne.n	8001d1a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f042 0208 	orr.w	r2, r2, #8
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	e007      	b.n	8001d2a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f022 0208 	bic.w	r2, r2, #8
 8001d28:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	7f5b      	ldrb	r3, [r3, #29]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d108      	bne.n	8001d44 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f042 0204 	orr.w	r2, r2, #4
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	e007      	b.n	8001d54 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f022 0204 	bic.w	r2, r2, #4
 8001d52:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	431a      	orrs	r2, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	431a      	orrs	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	695b      	ldr	r3, [r3, #20]
 8001d68:	ea42 0103 	orr.w	r1, r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	1e5a      	subs	r2, r3, #1
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	430a      	orrs	r2, r1
 8001d78:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
	...

08001d94 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b087      	sub	sp, #28
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001daa:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001dac:	7cfb      	ldrb	r3, [r7, #19]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d003      	beq.n	8001dba <HAL_CAN_ConfigFilter+0x26>
 8001db2:	7cfb      	ldrb	r3, [r7, #19]
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	f040 80be 	bne.w	8001f36 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001dba:	4b65      	ldr	r3, [pc, #404]	; (8001f50 <HAL_CAN_ConfigFilter+0x1bc>)
 8001dbc:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001dc4:	f043 0201 	orr.w	r2, r3, #1
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001dd4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de8:	021b      	lsls	r3, r3, #8
 8001dea:	431a      	orrs	r2, r3
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	695b      	ldr	r3, [r3, #20]
 8001df6:	f003 031f 	and.w	r3, r3, #31
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	401a      	ands	r2, r3
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	69db      	ldr	r3, [r3, #28]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d123      	bne.n	8001e64 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	43db      	mvns	r3, r3
 8001e26:	401a      	ands	r2, r3
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e3a:	683a      	ldr	r2, [r7, #0]
 8001e3c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001e3e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	3248      	adds	r2, #72	; 0x48
 8001e44:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e58:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e5a:	6979      	ldr	r1, [r7, #20]
 8001e5c:	3348      	adds	r3, #72	; 0x48
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	440b      	add	r3, r1
 8001e62:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	69db      	ldr	r3, [r3, #28]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d122      	bne.n	8001eb2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	431a      	orrs	r2, r3
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001e8c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	3248      	adds	r2, #72	; 0x48
 8001e92:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ea6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ea8:	6979      	ldr	r1, [r7, #20]
 8001eaa:	3348      	adds	r3, #72	; 0x48
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	440b      	add	r3, r1
 8001eb0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d109      	bne.n	8001ece <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	401a      	ands	r2, r3
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001ecc:	e007      	b.n	8001ede <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	431a      	orrs	r2, r3
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d109      	bne.n	8001efa <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	43db      	mvns	r3, r3
 8001ef0:	401a      	ands	r2, r3
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001ef8:	e007      	b.n	8001f0a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	431a      	orrs	r2, r3
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	6a1b      	ldr	r3, [r3, #32]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d107      	bne.n	8001f22 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	431a      	orrs	r2, r3
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f28:	f023 0201 	bic.w	r2, r3, #1
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001f32:	2300      	movs	r3, #0
 8001f34:	e006      	b.n	8001f44 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
  }
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	371c      	adds	r7, #28
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	40006400 	.word	0x40006400

08001f54 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d12e      	bne.n	8001fc6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2202      	movs	r2, #2
 8001f6c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 0201 	bic.w	r2, r2, #1
 8001f7e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001f80:	f7ff fddc 	bl	8001b3c <HAL_GetTick>
 8001f84:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001f86:	e012      	b.n	8001fae <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f88:	f7ff fdd8 	bl	8001b3c <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b0a      	cmp	r3, #10
 8001f94:	d90b      	bls.n	8001fae <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2205      	movs	r2, #5
 8001fa6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e012      	b.n	8001fd4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d1e5      	bne.n	8001f88 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	e006      	b.n	8001fd4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fca:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
  }
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3710      	adds	r7, #16
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b089      	sub	sp, #36	; 0x24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
 8001fe8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ff0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ffa:	7ffb      	ldrb	r3, [r7, #31]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d003      	beq.n	8002008 <HAL_CAN_AddTxMessage+0x2c>
 8002000:	7ffb      	ldrb	r3, [r7, #31]
 8002002:	2b02      	cmp	r3, #2
 8002004:	f040 80b8 	bne.w	8002178 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10a      	bne.n	8002028 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002018:	2b00      	cmp	r3, #0
 800201a:	d105      	bne.n	8002028 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002022:	2b00      	cmp	r3, #0
 8002024:	f000 80a0 	beq.w	8002168 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	0e1b      	lsrs	r3, r3, #24
 800202c:	f003 0303 	and.w	r3, r3, #3
 8002030:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	2b02      	cmp	r3, #2
 8002036:	d907      	bls.n	8002048 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e09e      	b.n	8002186 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002048:	2201      	movs	r2, #1
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	409a      	lsls	r2, r3
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d10d      	bne.n	8002076 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002064:	68f9      	ldr	r1, [r7, #12]
 8002066:	6809      	ldr	r1, [r1, #0]
 8002068:	431a      	orrs	r2, r3
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	3318      	adds	r3, #24
 800206e:	011b      	lsls	r3, r3, #4
 8002070:	440b      	add	r3, r1
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	e00f      	b.n	8002096 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002080:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002086:	68f9      	ldr	r1, [r7, #12]
 8002088:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800208a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	3318      	adds	r3, #24
 8002090:	011b      	lsls	r3, r3, #4
 8002092:	440b      	add	r3, r1
 8002094:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6819      	ldr	r1, [r3, #0]
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	691a      	ldr	r2, [r3, #16]
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	3318      	adds	r3, #24
 80020a2:	011b      	lsls	r3, r3, #4
 80020a4:	440b      	add	r3, r1
 80020a6:	3304      	adds	r3, #4
 80020a8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	7d1b      	ldrb	r3, [r3, #20]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d111      	bne.n	80020d6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	3318      	adds	r3, #24
 80020ba:	011b      	lsls	r3, r3, #4
 80020bc:	4413      	add	r3, r2
 80020be:	3304      	adds	r3, #4
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	6811      	ldr	r1, [r2, #0]
 80020c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	3318      	adds	r3, #24
 80020ce:	011b      	lsls	r3, r3, #4
 80020d0:	440b      	add	r3, r1
 80020d2:	3304      	adds	r3, #4
 80020d4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	3307      	adds	r3, #7
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	061a      	lsls	r2, r3, #24
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	3306      	adds	r3, #6
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	041b      	lsls	r3, r3, #16
 80020e6:	431a      	orrs	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	3305      	adds	r3, #5
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	021b      	lsls	r3, r3, #8
 80020f0:	4313      	orrs	r3, r2
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	3204      	adds	r2, #4
 80020f6:	7812      	ldrb	r2, [r2, #0]
 80020f8:	4610      	mov	r0, r2
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	6811      	ldr	r1, [r2, #0]
 80020fe:	ea43 0200 	orr.w	r2, r3, r0
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	011b      	lsls	r3, r3, #4
 8002106:	440b      	add	r3, r1
 8002108:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800210c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	3303      	adds	r3, #3
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	061a      	lsls	r2, r3, #24
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	3302      	adds	r3, #2
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	041b      	lsls	r3, r3, #16
 800211e:	431a      	orrs	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	3301      	adds	r3, #1
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	021b      	lsls	r3, r3, #8
 8002128:	4313      	orrs	r3, r2
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	7812      	ldrb	r2, [r2, #0]
 800212e:	4610      	mov	r0, r2
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	6811      	ldr	r1, [r2, #0]
 8002134:	ea43 0200 	orr.w	r2, r3, r0
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	011b      	lsls	r3, r3, #4
 800213c:	440b      	add	r3, r1
 800213e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002142:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	3318      	adds	r3, #24
 800214c:	011b      	lsls	r3, r3, #4
 800214e:	4413      	add	r3, r2
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	6811      	ldr	r1, [r2, #0]
 8002156:	f043 0201 	orr.w	r2, r3, #1
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	3318      	adds	r3, #24
 800215e:	011b      	lsls	r3, r3, #4
 8002160:	440b      	add	r3, r1
 8002162:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002164:	2300      	movs	r3, #0
 8002166:	e00e      	b.n	8002186 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e006      	b.n	8002186 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
  }
}
 8002186:	4618      	mov	r0, r3
 8002188:	3724      	adds	r7, #36	; 0x24
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8002192:	b480      	push	{r7}
 8002194:	b085      	sub	sp, #20
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800219a:	2300      	movs	r3, #0
 800219c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021a4:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80021a6:	7afb      	ldrb	r3, [r7, #11]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d002      	beq.n	80021b2 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80021ac:	7afb      	ldrb	r3, [r7, #11]
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d11d      	bne.n	80021ee <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d002      	beq.n	80021c6 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	3301      	adds	r3, #1
 80021c4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d002      	beq.n	80021da <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	3301      	adds	r3, #1
 80021d8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d002      	beq.n	80021ee <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	3301      	adds	r3, #1
 80021ec:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80021ee:	68fb      	ldr	r3, [r7, #12]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3714      	adds	r7, #20
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80021fc:	b480      	push	{r7}
 80021fe:	b087      	sub	sp, #28
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
 8002208:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002210:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002212:	7dfb      	ldrb	r3, [r7, #23]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d003      	beq.n	8002220 <HAL_CAN_GetRxMessage+0x24>
 8002218:	7dfb      	ldrb	r3, [r7, #23]
 800221a:	2b02      	cmp	r3, #2
 800221c:	f040 80f3 	bne.w	8002406 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d10e      	bne.n	8002244 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	f003 0303 	and.w	r3, r3, #3
 8002230:	2b00      	cmp	r3, #0
 8002232:	d116      	bne.n	8002262 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002238:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e0e7      	b.n	8002414 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	f003 0303 	and.w	r3, r3, #3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d107      	bne.n	8002262 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002256:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e0d8      	b.n	8002414 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	331b      	adds	r3, #27
 800226a:	011b      	lsls	r3, r3, #4
 800226c:	4413      	add	r3, r2
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0204 	and.w	r2, r3, #4
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d10c      	bne.n	800229a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	331b      	adds	r3, #27
 8002288:	011b      	lsls	r3, r3, #4
 800228a:	4413      	add	r3, r2
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	0d5b      	lsrs	r3, r3, #21
 8002290:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	e00b      	b.n	80022b2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	331b      	adds	r3, #27
 80022a2:	011b      	lsls	r3, r3, #4
 80022a4:	4413      	add	r3, r2
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	08db      	lsrs	r3, r3, #3
 80022aa:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	331b      	adds	r3, #27
 80022ba:	011b      	lsls	r3, r3, #4
 80022bc:	4413      	add	r3, r2
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0202 	and.w	r2, r3, #2
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	331b      	adds	r3, #27
 80022d0:	011b      	lsls	r3, r3, #4
 80022d2:	4413      	add	r3, r2
 80022d4:	3304      	adds	r3, #4
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 020f 	and.w	r2, r3, #15
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	331b      	adds	r3, #27
 80022e8:	011b      	lsls	r3, r3, #4
 80022ea:	4413      	add	r3, r2
 80022ec:	3304      	adds	r3, #4
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	0a1b      	lsrs	r3, r3, #8
 80022f2:	b2da      	uxtb	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	331b      	adds	r3, #27
 8002300:	011b      	lsls	r3, r3, #4
 8002302:	4413      	add	r3, r2
 8002304:	3304      	adds	r3, #4
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	0c1b      	lsrs	r3, r3, #16
 800230a:	b29a      	uxth	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	011b      	lsls	r3, r3, #4
 8002318:	4413      	add	r3, r2
 800231a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	b2da      	uxtb	r2, r3
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	011b      	lsls	r3, r3, #4
 800232e:	4413      	add	r3, r2
 8002330:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	0a1a      	lsrs	r2, r3, #8
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	3301      	adds	r3, #1
 800233c:	b2d2      	uxtb	r2, r2
 800233e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	011b      	lsls	r3, r3, #4
 8002348:	4413      	add	r3, r2
 800234a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	0c1a      	lsrs	r2, r3, #16
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	3302      	adds	r3, #2
 8002356:	b2d2      	uxtb	r2, r2
 8002358:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	011b      	lsls	r3, r3, #4
 8002362:	4413      	add	r3, r2
 8002364:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	0e1a      	lsrs	r2, r3, #24
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	3303      	adds	r3, #3
 8002370:	b2d2      	uxtb	r2, r2
 8002372:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	011b      	lsls	r3, r3, #4
 800237c:	4413      	add	r3, r2
 800237e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	3304      	adds	r3, #4
 8002388:	b2d2      	uxtb	r2, r2
 800238a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	011b      	lsls	r3, r3, #4
 8002394:	4413      	add	r3, r2
 8002396:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	0a1a      	lsrs	r2, r3, #8
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	3305      	adds	r3, #5
 80023a2:	b2d2      	uxtb	r2, r2
 80023a4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	011b      	lsls	r3, r3, #4
 80023ae:	4413      	add	r3, r2
 80023b0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	0c1a      	lsrs	r2, r3, #16
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	3306      	adds	r3, #6
 80023bc:	b2d2      	uxtb	r2, r2
 80023be:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	011b      	lsls	r3, r3, #4
 80023c8:	4413      	add	r3, r2
 80023ca:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	0e1a      	lsrs	r2, r3, #24
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	3307      	adds	r3, #7
 80023d6:	b2d2      	uxtb	r2, r2
 80023d8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d108      	bne.n	80023f2 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68da      	ldr	r2, [r3, #12]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f042 0220 	orr.w	r2, r2, #32
 80023ee:	60da      	str	r2, [r3, #12]
 80023f0:	e007      	b.n	8002402 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	691a      	ldr	r2, [r3, #16]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f042 0220 	orr.w	r2, r2, #32
 8002400:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002402:	2300      	movs	r3, #0
 8002404:	e006      	b.n	8002414 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
  }
}
 8002414:	4618      	mov	r0, r3
 8002416:	371c      	adds	r7, #28
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002430:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002432:	7bfb      	ldrb	r3, [r7, #15]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d002      	beq.n	800243e <HAL_CAN_ActivateNotification+0x1e>
 8002438:	7bfb      	ldrb	r3, [r7, #15]
 800243a:	2b02      	cmp	r3, #2
 800243c:	d109      	bne.n	8002452 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	6959      	ldr	r1, [r3, #20]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	430a      	orrs	r2, r1
 800244c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800244e:	2300      	movs	r3, #0
 8002450:	e006      	b.n	8002460 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002456:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
  }
}
 8002460:	4618      	mov	r0, r3
 8002462:	3714      	adds	r7, #20
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b08a      	sub	sp, #40	; 0x28
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002474:	2300      	movs	r3, #0
 8002476:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	695b      	ldr	r3, [r3, #20]
 800247e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80024a8:	6a3b      	ldr	r3, [r7, #32]
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d07c      	beq.n	80025ac <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d023      	beq.n	8002504 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2201      	movs	r2, #1
 80024c2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d003      	beq.n	80024d6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f000 f983 	bl	80027da <HAL_CAN_TxMailbox0CompleteCallback>
 80024d4:	e016      	b.n	8002504 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	f003 0304 	and.w	r3, r3, #4
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d004      	beq.n	80024ea <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80024e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80024e6:	627b      	str	r3, [r7, #36]	; 0x24
 80024e8:	e00c      	b.n	8002504 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	f003 0308 	and.w	r3, r3, #8
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d004      	beq.n	80024fe <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80024f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024fa:	627b      	str	r3, [r7, #36]	; 0x24
 80024fc:	e002      	b.n	8002504 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 f989 	bl	8002816 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800250a:	2b00      	cmp	r3, #0
 800250c:	d024      	beq.n	8002558 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002516:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800251e:	2b00      	cmp	r3, #0
 8002520:	d003      	beq.n	800252a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 f963 	bl	80027ee <HAL_CAN_TxMailbox1CompleteCallback>
 8002528:	e016      	b.n	8002558 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002530:	2b00      	cmp	r3, #0
 8002532:	d004      	beq.n	800253e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002536:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800253a:	627b      	str	r3, [r7, #36]	; 0x24
 800253c:	e00c      	b.n	8002558 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002544:	2b00      	cmp	r3, #0
 8002546:	d004      	beq.n	8002552 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800254e:	627b      	str	r3, [r7, #36]	; 0x24
 8002550:	e002      	b.n	8002558 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 f969 	bl	800282a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d024      	beq.n	80025ac <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800256a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 f943 	bl	8002802 <HAL_CAN_TxMailbox2CompleteCallback>
 800257c:	e016      	b.n	80025ac <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d004      	beq.n	8002592 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800258e:	627b      	str	r3, [r7, #36]	; 0x24
 8002590:	e00c      	b.n	80025ac <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d004      	beq.n	80025a6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025a2:	627b      	str	r3, [r7, #36]	; 0x24
 80025a4:	e002      	b.n	80025ac <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 f949 	bl	800283e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80025ac:	6a3b      	ldr	r3, [r7, #32]
 80025ae:	f003 0308 	and.w	r3, r3, #8
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d00c      	beq.n	80025d0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	f003 0310 	and.w	r3, r3, #16
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d007      	beq.n	80025d0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80025c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025c6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2210      	movs	r2, #16
 80025ce:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80025d0:	6a3b      	ldr	r3, [r7, #32]
 80025d2:	f003 0304 	and.w	r3, r3, #4
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00b      	beq.n	80025f2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	f003 0308 	and.w	r3, r3, #8
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d006      	beq.n	80025f2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2208      	movs	r2, #8
 80025ea:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 f930 	bl	8002852 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80025f2:	6a3b      	ldr	r3, [r7, #32]
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d009      	beq.n	8002610 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	f003 0303 	and.w	r3, r3, #3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d002      	beq.n	8002610 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f7fe f9c6 	bl	800099c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002610:	6a3b      	ldr	r3, [r7, #32]
 8002612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00c      	beq.n	8002634 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	f003 0310 	and.w	r3, r3, #16
 8002620:	2b00      	cmp	r3, #0
 8002622:	d007      	beq.n	8002634 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002626:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800262a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2210      	movs	r2, #16
 8002632:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002634:	6a3b      	ldr	r3, [r7, #32]
 8002636:	f003 0320 	and.w	r3, r3, #32
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00b      	beq.n	8002656 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	f003 0308 	and.w	r3, r3, #8
 8002644:	2b00      	cmp	r3, #0
 8002646:	d006      	beq.n	8002656 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2208      	movs	r2, #8
 800264e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f000 f912 	bl	800287a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002656:	6a3b      	ldr	r3, [r7, #32]
 8002658:	f003 0310 	and.w	r3, r3, #16
 800265c:	2b00      	cmp	r3, #0
 800265e:	d009      	beq.n	8002674 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	f003 0303 	and.w	r3, r3, #3
 800266a:	2b00      	cmp	r3, #0
 800266c:	d002      	beq.n	8002674 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 f8f9 	bl	8002866 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002674:	6a3b      	ldr	r3, [r7, #32]
 8002676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d00b      	beq.n	8002696 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	f003 0310 	and.w	r3, r3, #16
 8002684:	2b00      	cmp	r3, #0
 8002686:	d006      	beq.n	8002696 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2210      	movs	r2, #16
 800268e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f000 f8fc 	bl	800288e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002696:	6a3b      	ldr	r3, [r7, #32]
 8002698:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d00b      	beq.n	80026b8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	f003 0308 	and.w	r3, r3, #8
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d006      	beq.n	80026b8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2208      	movs	r2, #8
 80026b0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f8f5 	bl	80028a2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80026b8:	6a3b      	ldr	r3, [r7, #32]
 80026ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d07b      	beq.n	80027ba <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	f003 0304 	and.w	r3, r3, #4
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d072      	beq.n	80027b2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80026cc:	6a3b      	ldr	r3, [r7, #32]
 80026ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d008      	beq.n	80026e8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d003      	beq.n	80026e8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80026e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e2:	f043 0301 	orr.w	r3, r3, #1
 80026e6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80026e8:	6a3b      	ldr	r3, [r7, #32]
 80026ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d008      	beq.n	8002704 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d003      	beq.n	8002704 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80026fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fe:	f043 0302 	orr.w	r3, r3, #2
 8002702:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002704:	6a3b      	ldr	r3, [r7, #32]
 8002706:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800270a:	2b00      	cmp	r3, #0
 800270c:	d008      	beq.n	8002720 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002714:	2b00      	cmp	r3, #0
 8002716:	d003      	beq.n	8002720 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271a:	f043 0304 	orr.w	r3, r3, #4
 800271e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002720:	6a3b      	ldr	r3, [r7, #32]
 8002722:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002726:	2b00      	cmp	r3, #0
 8002728:	d043      	beq.n	80027b2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002730:	2b00      	cmp	r3, #0
 8002732:	d03e      	beq.n	80027b2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800273a:	2b60      	cmp	r3, #96	; 0x60
 800273c:	d02b      	beq.n	8002796 <HAL_CAN_IRQHandler+0x32a>
 800273e:	2b60      	cmp	r3, #96	; 0x60
 8002740:	d82e      	bhi.n	80027a0 <HAL_CAN_IRQHandler+0x334>
 8002742:	2b50      	cmp	r3, #80	; 0x50
 8002744:	d022      	beq.n	800278c <HAL_CAN_IRQHandler+0x320>
 8002746:	2b50      	cmp	r3, #80	; 0x50
 8002748:	d82a      	bhi.n	80027a0 <HAL_CAN_IRQHandler+0x334>
 800274a:	2b40      	cmp	r3, #64	; 0x40
 800274c:	d019      	beq.n	8002782 <HAL_CAN_IRQHandler+0x316>
 800274e:	2b40      	cmp	r3, #64	; 0x40
 8002750:	d826      	bhi.n	80027a0 <HAL_CAN_IRQHandler+0x334>
 8002752:	2b30      	cmp	r3, #48	; 0x30
 8002754:	d010      	beq.n	8002778 <HAL_CAN_IRQHandler+0x30c>
 8002756:	2b30      	cmp	r3, #48	; 0x30
 8002758:	d822      	bhi.n	80027a0 <HAL_CAN_IRQHandler+0x334>
 800275a:	2b10      	cmp	r3, #16
 800275c:	d002      	beq.n	8002764 <HAL_CAN_IRQHandler+0x2f8>
 800275e:	2b20      	cmp	r3, #32
 8002760:	d005      	beq.n	800276e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002762:	e01d      	b.n	80027a0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002766:	f043 0308 	orr.w	r3, r3, #8
 800276a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800276c:	e019      	b.n	80027a2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002770:	f043 0310 	orr.w	r3, r3, #16
 8002774:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002776:	e014      	b.n	80027a2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277a:	f043 0320 	orr.w	r3, r3, #32
 800277e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002780:	e00f      	b.n	80027a2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002784:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002788:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800278a:	e00a      	b.n	80027a2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002792:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002794:	e005      	b.n	80027a2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800279c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800279e:	e000      	b.n	80027a2 <HAL_CAN_IRQHandler+0x336>
            break;
 80027a0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	699a      	ldr	r2, [r3, #24]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80027b0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2204      	movs	r2, #4
 80027b8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80027ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d008      	beq.n	80027d2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c6:	431a      	orrs	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f000 f872 	bl	80028b6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80027d2:	bf00      	nop
 80027d4:	3728      	adds	r7, #40	; 0x28
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80027da:	b480      	push	{r7}
 80027dc:	b083      	sub	sp, #12
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80027e2:	bf00      	nop
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002802:	b480      	push	{r7}
 8002804:	b083      	sub	sp, #12
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800280a:	bf00      	nop
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr

08002816 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002816:	b480      	push	{r7}
 8002818:	b083      	sub	sp, #12
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr

0800282a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800282a:	b480      	push	{r7}
 800282c:	b083      	sub	sp, #12
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002832:	bf00      	nop
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr

0800283e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800283e:	b480      	push	{r7}
 8002840:	b083      	sub	sp, #12
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002846:	bf00      	nop
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002852:	b480      	push	{r7}
 8002854:	b083      	sub	sp, #12
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800285a:	bf00      	nop
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr

08002866 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002866:	b480      	push	{r7}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800286e:	bf00      	nop
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr

0800287a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800287a:	b480      	push	{r7}
 800287c:	b083      	sub	sp, #12
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002882:	bf00      	nop
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr

0800288e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800288e:	b480      	push	{r7}
 8002890:	b083      	sub	sp, #12
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002896:	bf00      	nop
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr

080028a2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80028a2:	b480      	push	{r7}
 80028a4:	b083      	sub	sp, #12
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr

080028b6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80028b6:	b480      	push	{r7}
 80028b8:	b083      	sub	sp, #12
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80028be:	bf00      	nop
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
	...

080028cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f003 0307 	and.w	r3, r3, #7
 80028da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028dc:	4b0c      	ldr	r3, [pc, #48]	; (8002910 <__NVIC_SetPriorityGrouping+0x44>)
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028e2:	68ba      	ldr	r2, [r7, #8]
 80028e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028e8:	4013      	ands	r3, r2
 80028ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028fe:	4a04      	ldr	r2, [pc, #16]	; (8002910 <__NVIC_SetPriorityGrouping+0x44>)
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	60d3      	str	r3, [r2, #12]
}
 8002904:	bf00      	nop
 8002906:	3714      	adds	r7, #20
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr
 8002910:	e000ed00 	.word	0xe000ed00

08002914 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002918:	4b04      	ldr	r3, [pc, #16]	; (800292c <__NVIC_GetPriorityGrouping+0x18>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	0a1b      	lsrs	r3, r3, #8
 800291e:	f003 0307 	and.w	r3, r3, #7
}
 8002922:	4618      	mov	r0, r3
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr
 800292c:	e000ed00 	.word	0xe000ed00

08002930 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	4603      	mov	r3, r0
 8002938:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800293a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293e:	2b00      	cmp	r3, #0
 8002940:	db0b      	blt.n	800295a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002942:	79fb      	ldrb	r3, [r7, #7]
 8002944:	f003 021f 	and.w	r2, r3, #31
 8002948:	4907      	ldr	r1, [pc, #28]	; (8002968 <__NVIC_EnableIRQ+0x38>)
 800294a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294e:	095b      	lsrs	r3, r3, #5
 8002950:	2001      	movs	r0, #1
 8002952:	fa00 f202 	lsl.w	r2, r0, r2
 8002956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800295a:	bf00      	nop
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	e000e100 	.word	0xe000e100

0800296c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	4603      	mov	r3, r0
 8002974:	6039      	str	r1, [r7, #0]
 8002976:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297c:	2b00      	cmp	r3, #0
 800297e:	db0a      	blt.n	8002996 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	b2da      	uxtb	r2, r3
 8002984:	490c      	ldr	r1, [pc, #48]	; (80029b8 <__NVIC_SetPriority+0x4c>)
 8002986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298a:	0112      	lsls	r2, r2, #4
 800298c:	b2d2      	uxtb	r2, r2
 800298e:	440b      	add	r3, r1
 8002990:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002994:	e00a      	b.n	80029ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	b2da      	uxtb	r2, r3
 800299a:	4908      	ldr	r1, [pc, #32]	; (80029bc <__NVIC_SetPriority+0x50>)
 800299c:	79fb      	ldrb	r3, [r7, #7]
 800299e:	f003 030f 	and.w	r3, r3, #15
 80029a2:	3b04      	subs	r3, #4
 80029a4:	0112      	lsls	r2, r2, #4
 80029a6:	b2d2      	uxtb	r2, r2
 80029a8:	440b      	add	r3, r1
 80029aa:	761a      	strb	r2, [r3, #24]
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr
 80029b8:	e000e100 	.word	0xe000e100
 80029bc:	e000ed00 	.word	0xe000ed00

080029c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b089      	sub	sp, #36	; 0x24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f003 0307 	and.w	r3, r3, #7
 80029d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	f1c3 0307 	rsb	r3, r3, #7
 80029da:	2b04      	cmp	r3, #4
 80029dc:	bf28      	it	cs
 80029de:	2304      	movcs	r3, #4
 80029e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	3304      	adds	r3, #4
 80029e6:	2b06      	cmp	r3, #6
 80029e8:	d902      	bls.n	80029f0 <NVIC_EncodePriority+0x30>
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	3b03      	subs	r3, #3
 80029ee:	e000      	b.n	80029f2 <NVIC_EncodePriority+0x32>
 80029f0:	2300      	movs	r3, #0
 80029f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f4:	f04f 32ff 	mov.w	r2, #4294967295
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	fa02 f303 	lsl.w	r3, r2, r3
 80029fe:	43da      	mvns	r2, r3
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	401a      	ands	r2, r3
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a08:	f04f 31ff 	mov.w	r1, #4294967295
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a12:	43d9      	mvns	r1, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a18:	4313      	orrs	r3, r2
         );
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3724      	adds	r7, #36	; 0x24
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
	...

08002a28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	3b01      	subs	r3, #1
 8002a34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a38:	d301      	bcc.n	8002a3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e00f      	b.n	8002a5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a3e:	4a0a      	ldr	r2, [pc, #40]	; (8002a68 <SysTick_Config+0x40>)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3b01      	subs	r3, #1
 8002a44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a46:	210f      	movs	r1, #15
 8002a48:	f04f 30ff 	mov.w	r0, #4294967295
 8002a4c:	f7ff ff8e 	bl	800296c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a50:	4b05      	ldr	r3, [pc, #20]	; (8002a68 <SysTick_Config+0x40>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a56:	4b04      	ldr	r3, [pc, #16]	; (8002a68 <SysTick_Config+0x40>)
 8002a58:	2207      	movs	r2, #7
 8002a5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	e000e010 	.word	0xe000e010

08002a6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f7ff ff29 	bl	80028cc <__NVIC_SetPriorityGrouping>
}
 8002a7a:	bf00      	nop
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b086      	sub	sp, #24
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	4603      	mov	r3, r0
 8002a8a:	60b9      	str	r1, [r7, #8]
 8002a8c:	607a      	str	r2, [r7, #4]
 8002a8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a90:	2300      	movs	r3, #0
 8002a92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a94:	f7ff ff3e 	bl	8002914 <__NVIC_GetPriorityGrouping>
 8002a98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	68b9      	ldr	r1, [r7, #8]
 8002a9e:	6978      	ldr	r0, [r7, #20]
 8002aa0:	f7ff ff8e 	bl	80029c0 <NVIC_EncodePriority>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aaa:	4611      	mov	r1, r2
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff ff5d 	bl	800296c <__NVIC_SetPriority>
}
 8002ab2:	bf00      	nop
 8002ab4:	3718      	adds	r7, #24
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b082      	sub	sp, #8
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff ff31 	bl	8002930 <__NVIC_EnableIRQ>
}
 8002ace:	bf00      	nop
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b082      	sub	sp, #8
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f7ff ffa2 	bl	8002a28 <SysTick_Config>
 8002ae4:	4603      	mov	r3, r0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b084      	sub	sp, #16
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002afa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002afc:	f7ff f81e 	bl	8001b3c <HAL_GetTick>
 8002b00:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d008      	beq.n	8002b20 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2280      	movs	r2, #128	; 0x80
 8002b12:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e052      	b.n	8002bc6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f022 0216 	bic.w	r2, r2, #22
 8002b2e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	695a      	ldr	r2, [r3, #20]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b3e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d103      	bne.n	8002b50 <HAL_DMA_Abort+0x62>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d007      	beq.n	8002b60 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f022 0208 	bic.w	r2, r2, #8
 8002b5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f022 0201 	bic.w	r2, r2, #1
 8002b6e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b70:	e013      	b.n	8002b9a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b72:	f7fe ffe3 	bl	8001b3c <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b05      	cmp	r3, #5
 8002b7e:	d90c      	bls.n	8002b9a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2220      	movs	r2, #32
 8002b84:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2203      	movs	r2, #3
 8002b8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e015      	b.n	8002bc6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0301 	and.w	r3, r3, #1
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d1e4      	bne.n	8002b72 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bac:	223f      	movs	r2, #63	; 0x3f
 8002bae:	409a      	lsls	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	b083      	sub	sp, #12
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d004      	beq.n	8002bec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2280      	movs	r2, #128	; 0x80
 8002be6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e00c      	b.n	8002c06 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2205      	movs	r2, #5
 8002bf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f022 0201 	bic.w	r2, r2, #1
 8002c02:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
	...

08002c14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b089      	sub	sp, #36	; 0x24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c22:	2300      	movs	r3, #0
 8002c24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c26:	2300      	movs	r3, #0
 8002c28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	61fb      	str	r3, [r7, #28]
 8002c2e:	e16b      	b.n	8002f08 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c30:	2201      	movs	r2, #1
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	4013      	ands	r3, r2
 8002c42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	f040 815a 	bne.w	8002f02 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f003 0303 	and.w	r3, r3, #3
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d005      	beq.n	8002c66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d130      	bne.n	8002cc8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	2203      	movs	r2, #3
 8002c72:	fa02 f303 	lsl.w	r3, r2, r3
 8002c76:	43db      	mvns	r3, r3
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	68da      	ldr	r2, [r3, #12]
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	091b      	lsrs	r3, r3, #4
 8002cb2:	f003 0201 	and.w	r2, r3, #1
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f003 0303 	and.w	r3, r3, #3
 8002cd0:	2b03      	cmp	r3, #3
 8002cd2:	d017      	beq.n	8002d04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	2203      	movs	r2, #3
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	689a      	ldr	r2, [r3, #8]
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f003 0303 	and.w	r3, r3, #3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d123      	bne.n	8002d58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	08da      	lsrs	r2, r3, #3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	3208      	adds	r2, #8
 8002d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	f003 0307 	and.w	r3, r3, #7
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	220f      	movs	r2, #15
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	4013      	ands	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	691a      	ldr	r2, [r3, #16]
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	f003 0307 	and.w	r3, r3, #7
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	fa02 f303 	lsl.w	r3, r2, r3
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	08da      	lsrs	r2, r3, #3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	3208      	adds	r2, #8
 8002d52:	69b9      	ldr	r1, [r7, #24]
 8002d54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	2203      	movs	r2, #3
 8002d64:	fa02 f303 	lsl.w	r3, r2, r3
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f003 0203 	and.w	r2, r3, #3
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f000 80b4 	beq.w	8002f02 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	60fb      	str	r3, [r7, #12]
 8002d9e:	4b60      	ldr	r3, [pc, #384]	; (8002f20 <HAL_GPIO_Init+0x30c>)
 8002da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da2:	4a5f      	ldr	r2, [pc, #380]	; (8002f20 <HAL_GPIO_Init+0x30c>)
 8002da4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002da8:	6453      	str	r3, [r2, #68]	; 0x44
 8002daa:	4b5d      	ldr	r3, [pc, #372]	; (8002f20 <HAL_GPIO_Init+0x30c>)
 8002dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002db2:	60fb      	str	r3, [r7, #12]
 8002db4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002db6:	4a5b      	ldr	r2, [pc, #364]	; (8002f24 <HAL_GPIO_Init+0x310>)
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	089b      	lsrs	r3, r3, #2
 8002dbc:	3302      	adds	r3, #2
 8002dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	f003 0303 	and.w	r3, r3, #3
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	220f      	movs	r2, #15
 8002dce:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd2:	43db      	mvns	r3, r3
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a52      	ldr	r2, [pc, #328]	; (8002f28 <HAL_GPIO_Init+0x314>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d02b      	beq.n	8002e3a <HAL_GPIO_Init+0x226>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a51      	ldr	r2, [pc, #324]	; (8002f2c <HAL_GPIO_Init+0x318>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d025      	beq.n	8002e36 <HAL_GPIO_Init+0x222>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a50      	ldr	r2, [pc, #320]	; (8002f30 <HAL_GPIO_Init+0x31c>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d01f      	beq.n	8002e32 <HAL_GPIO_Init+0x21e>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a4f      	ldr	r2, [pc, #316]	; (8002f34 <HAL_GPIO_Init+0x320>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d019      	beq.n	8002e2e <HAL_GPIO_Init+0x21a>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a4e      	ldr	r2, [pc, #312]	; (8002f38 <HAL_GPIO_Init+0x324>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d013      	beq.n	8002e2a <HAL_GPIO_Init+0x216>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a4d      	ldr	r2, [pc, #308]	; (8002f3c <HAL_GPIO_Init+0x328>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d00d      	beq.n	8002e26 <HAL_GPIO_Init+0x212>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a4c      	ldr	r2, [pc, #304]	; (8002f40 <HAL_GPIO_Init+0x32c>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d007      	beq.n	8002e22 <HAL_GPIO_Init+0x20e>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a4b      	ldr	r2, [pc, #300]	; (8002f44 <HAL_GPIO_Init+0x330>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d101      	bne.n	8002e1e <HAL_GPIO_Init+0x20a>
 8002e1a:	2307      	movs	r3, #7
 8002e1c:	e00e      	b.n	8002e3c <HAL_GPIO_Init+0x228>
 8002e1e:	2308      	movs	r3, #8
 8002e20:	e00c      	b.n	8002e3c <HAL_GPIO_Init+0x228>
 8002e22:	2306      	movs	r3, #6
 8002e24:	e00a      	b.n	8002e3c <HAL_GPIO_Init+0x228>
 8002e26:	2305      	movs	r3, #5
 8002e28:	e008      	b.n	8002e3c <HAL_GPIO_Init+0x228>
 8002e2a:	2304      	movs	r3, #4
 8002e2c:	e006      	b.n	8002e3c <HAL_GPIO_Init+0x228>
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e004      	b.n	8002e3c <HAL_GPIO_Init+0x228>
 8002e32:	2302      	movs	r3, #2
 8002e34:	e002      	b.n	8002e3c <HAL_GPIO_Init+0x228>
 8002e36:	2301      	movs	r3, #1
 8002e38:	e000      	b.n	8002e3c <HAL_GPIO_Init+0x228>
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	69fa      	ldr	r2, [r7, #28]
 8002e3e:	f002 0203 	and.w	r2, r2, #3
 8002e42:	0092      	lsls	r2, r2, #2
 8002e44:	4093      	lsls	r3, r2
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e4c:	4935      	ldr	r1, [pc, #212]	; (8002f24 <HAL_GPIO_Init+0x310>)
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	089b      	lsrs	r3, r3, #2
 8002e52:	3302      	adds	r3, #2
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e5a:	4b3b      	ldr	r3, [pc, #236]	; (8002f48 <HAL_GPIO_Init+0x334>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	43db      	mvns	r3, r3
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	4013      	ands	r3, r2
 8002e68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d003      	beq.n	8002e7e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e7e:	4a32      	ldr	r2, [pc, #200]	; (8002f48 <HAL_GPIO_Init+0x334>)
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e84:	4b30      	ldr	r3, [pc, #192]	; (8002f48 <HAL_GPIO_Init+0x334>)
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	4013      	ands	r3, r2
 8002e92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d003      	beq.n	8002ea8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ea8:	4a27      	ldr	r2, [pc, #156]	; (8002f48 <HAL_GPIO_Init+0x334>)
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002eae:	4b26      	ldr	r3, [pc, #152]	; (8002f48 <HAL_GPIO_Init+0x334>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	43db      	mvns	r3, r3
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	4013      	ands	r3, r2
 8002ebc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d003      	beq.n	8002ed2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002eca:	69ba      	ldr	r2, [r7, #24]
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ed2:	4a1d      	ldr	r2, [pc, #116]	; (8002f48 <HAL_GPIO_Init+0x334>)
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ed8:	4b1b      	ldr	r3, [pc, #108]	; (8002f48 <HAL_GPIO_Init+0x334>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	43db      	mvns	r3, r3
 8002ee2:	69ba      	ldr	r2, [r7, #24]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d003      	beq.n	8002efc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002ef4:	69ba      	ldr	r2, [r7, #24]
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002efc:	4a12      	ldr	r2, [pc, #72]	; (8002f48 <HAL_GPIO_Init+0x334>)
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	3301      	adds	r3, #1
 8002f06:	61fb      	str	r3, [r7, #28]
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	2b0f      	cmp	r3, #15
 8002f0c:	f67f ae90 	bls.w	8002c30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f10:	bf00      	nop
 8002f12:	bf00      	nop
 8002f14:	3724      	adds	r7, #36	; 0x24
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	40023800 	.word	0x40023800
 8002f24:	40013800 	.word	0x40013800
 8002f28:	40020000 	.word	0x40020000
 8002f2c:	40020400 	.word	0x40020400
 8002f30:	40020800 	.word	0x40020800
 8002f34:	40020c00 	.word	0x40020c00
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	40021400 	.word	0x40021400
 8002f40:	40021800 	.word	0x40021800
 8002f44:	40021c00 	.word	0x40021c00
 8002f48:	40013c00 	.word	0x40013c00

08002f4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	460b      	mov	r3, r1
 8002f56:	807b      	strh	r3, [r7, #2]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f5c:	787b      	ldrb	r3, [r7, #1]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d003      	beq.n	8002f6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f62:	887a      	ldrh	r2, [r7, #2]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f68:	e003      	b.n	8002f72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f6a:	887b      	ldrh	r3, [r7, #2]
 8002f6c:	041a      	lsls	r2, r3, #16
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	619a      	str	r2, [r3, #24]
}
 8002f72:	bf00      	nop
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
	...

08002f80 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	4603      	mov	r3, r0
 8002f88:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002f8a:	4b08      	ldr	r3, [pc, #32]	; (8002fac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f8c:	695a      	ldr	r2, [r3, #20]
 8002f8e:	88fb      	ldrh	r3, [r7, #6]
 8002f90:	4013      	ands	r3, r2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d006      	beq.n	8002fa4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f96:	4a05      	ldr	r2, [pc, #20]	; (8002fac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f98:	88fb      	ldrh	r3, [r7, #6]
 8002f9a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f9c:	88fb      	ldrh	r3, [r7, #6]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f000 f806 	bl	8002fb0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002fa4:	bf00      	nop
 8002fa6:	3708      	adds	r7, #8
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	40013c00 	.word	0x40013c00

08002fb0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002fba:	bf00      	nop
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
	...

08002fc8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b086      	sub	sp, #24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d101      	bne.n	8002fda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e267      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d075      	beq.n	80030d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fe6:	4b88      	ldr	r3, [pc, #544]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f003 030c 	and.w	r3, r3, #12
 8002fee:	2b04      	cmp	r3, #4
 8002ff0:	d00c      	beq.n	800300c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ff2:	4b85      	ldr	r3, [pc, #532]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ffa:	2b08      	cmp	r3, #8
 8002ffc:	d112      	bne.n	8003024 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ffe:	4b82      	ldr	r3, [pc, #520]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003006:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800300a:	d10b      	bne.n	8003024 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800300c:	4b7e      	ldr	r3, [pc, #504]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d05b      	beq.n	80030d0 <HAL_RCC_OscConfig+0x108>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d157      	bne.n	80030d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e242      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800302c:	d106      	bne.n	800303c <HAL_RCC_OscConfig+0x74>
 800302e:	4b76      	ldr	r3, [pc, #472]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a75      	ldr	r2, [pc, #468]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 8003034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003038:	6013      	str	r3, [r2, #0]
 800303a:	e01d      	b.n	8003078 <HAL_RCC_OscConfig+0xb0>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003044:	d10c      	bne.n	8003060 <HAL_RCC_OscConfig+0x98>
 8003046:	4b70      	ldr	r3, [pc, #448]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a6f      	ldr	r2, [pc, #444]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 800304c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003050:	6013      	str	r3, [r2, #0]
 8003052:	4b6d      	ldr	r3, [pc, #436]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a6c      	ldr	r2, [pc, #432]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 8003058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800305c:	6013      	str	r3, [r2, #0]
 800305e:	e00b      	b.n	8003078 <HAL_RCC_OscConfig+0xb0>
 8003060:	4b69      	ldr	r3, [pc, #420]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a68      	ldr	r2, [pc, #416]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 8003066:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800306a:	6013      	str	r3, [r2, #0]
 800306c:	4b66      	ldr	r3, [pc, #408]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a65      	ldr	r2, [pc, #404]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 8003072:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003076:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d013      	beq.n	80030a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003080:	f7fe fd5c 	bl	8001b3c <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003088:	f7fe fd58 	bl	8001b3c <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b64      	cmp	r3, #100	; 0x64
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e207      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800309a:	4b5b      	ldr	r3, [pc, #364]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d0f0      	beq.n	8003088 <HAL_RCC_OscConfig+0xc0>
 80030a6:	e014      	b.n	80030d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a8:	f7fe fd48 	bl	8001b3c <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030b0:	f7fe fd44 	bl	8001b3c <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b64      	cmp	r3, #100	; 0x64
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e1f3      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030c2:	4b51      	ldr	r3, [pc, #324]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1f0      	bne.n	80030b0 <HAL_RCC_OscConfig+0xe8>
 80030ce:	e000      	b.n	80030d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d063      	beq.n	80031a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030de:	4b4a      	ldr	r3, [pc, #296]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f003 030c 	and.w	r3, r3, #12
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00b      	beq.n	8003102 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030ea:	4b47      	ldr	r3, [pc, #284]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030f2:	2b08      	cmp	r3, #8
 80030f4:	d11c      	bne.n	8003130 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030f6:	4b44      	ldr	r3, [pc, #272]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d116      	bne.n	8003130 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003102:	4b41      	ldr	r3, [pc, #260]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d005      	beq.n	800311a <HAL_RCC_OscConfig+0x152>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d001      	beq.n	800311a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e1c7      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800311a:	4b3b      	ldr	r3, [pc, #236]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	4937      	ldr	r1, [pc, #220]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 800312a:	4313      	orrs	r3, r2
 800312c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800312e:	e03a      	b.n	80031a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d020      	beq.n	800317a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003138:	4b34      	ldr	r3, [pc, #208]	; (800320c <HAL_RCC_OscConfig+0x244>)
 800313a:	2201      	movs	r2, #1
 800313c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800313e:	f7fe fcfd 	bl	8001b3c <HAL_GetTick>
 8003142:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003144:	e008      	b.n	8003158 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003146:	f7fe fcf9 	bl	8001b3c <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d901      	bls.n	8003158 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e1a8      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003158:	4b2b      	ldr	r3, [pc, #172]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d0f0      	beq.n	8003146 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003164:	4b28      	ldr	r3, [pc, #160]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	4925      	ldr	r1, [pc, #148]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 8003174:	4313      	orrs	r3, r2
 8003176:	600b      	str	r3, [r1, #0]
 8003178:	e015      	b.n	80031a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800317a:	4b24      	ldr	r3, [pc, #144]	; (800320c <HAL_RCC_OscConfig+0x244>)
 800317c:	2200      	movs	r2, #0
 800317e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003180:	f7fe fcdc 	bl	8001b3c <HAL_GetTick>
 8003184:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003186:	e008      	b.n	800319a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003188:	f7fe fcd8 	bl	8001b3c <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b02      	cmp	r3, #2
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e187      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800319a:	4b1b      	ldr	r3, [pc, #108]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1f0      	bne.n	8003188 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0308 	and.w	r3, r3, #8
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d036      	beq.n	8003220 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d016      	beq.n	80031e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031ba:	4b15      	ldr	r3, [pc, #84]	; (8003210 <HAL_RCC_OscConfig+0x248>)
 80031bc:	2201      	movs	r2, #1
 80031be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c0:	f7fe fcbc 	bl	8001b3c <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031c6:	e008      	b.n	80031da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031c8:	f7fe fcb8 	bl	8001b3c <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e167      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031da:	4b0b      	ldr	r3, [pc, #44]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 80031dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d0f0      	beq.n	80031c8 <HAL_RCC_OscConfig+0x200>
 80031e6:	e01b      	b.n	8003220 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031e8:	4b09      	ldr	r3, [pc, #36]	; (8003210 <HAL_RCC_OscConfig+0x248>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ee:	f7fe fca5 	bl	8001b3c <HAL_GetTick>
 80031f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031f4:	e00e      	b.n	8003214 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031f6:	f7fe fca1 	bl	8001b3c <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	2b02      	cmp	r3, #2
 8003202:	d907      	bls.n	8003214 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e150      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
 8003208:	40023800 	.word	0x40023800
 800320c:	42470000 	.word	0x42470000
 8003210:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003214:	4b88      	ldr	r3, [pc, #544]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 8003216:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1ea      	bne.n	80031f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b00      	cmp	r3, #0
 800322a:	f000 8097 	beq.w	800335c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800322e:	2300      	movs	r3, #0
 8003230:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003232:	4b81      	ldr	r3, [pc, #516]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10f      	bne.n	800325e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800323e:	2300      	movs	r3, #0
 8003240:	60bb      	str	r3, [r7, #8]
 8003242:	4b7d      	ldr	r3, [pc, #500]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 8003244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003246:	4a7c      	ldr	r2, [pc, #496]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 8003248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800324c:	6413      	str	r3, [r2, #64]	; 0x40
 800324e:	4b7a      	ldr	r3, [pc, #488]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 8003250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003256:	60bb      	str	r3, [r7, #8]
 8003258:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800325a:	2301      	movs	r3, #1
 800325c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800325e:	4b77      	ldr	r3, [pc, #476]	; (800343c <HAL_RCC_OscConfig+0x474>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003266:	2b00      	cmp	r3, #0
 8003268:	d118      	bne.n	800329c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800326a:	4b74      	ldr	r3, [pc, #464]	; (800343c <HAL_RCC_OscConfig+0x474>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a73      	ldr	r2, [pc, #460]	; (800343c <HAL_RCC_OscConfig+0x474>)
 8003270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003274:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003276:	f7fe fc61 	bl	8001b3c <HAL_GetTick>
 800327a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800327c:	e008      	b.n	8003290 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800327e:	f7fe fc5d 	bl	8001b3c <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b02      	cmp	r3, #2
 800328a:	d901      	bls.n	8003290 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e10c      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003290:	4b6a      	ldr	r3, [pc, #424]	; (800343c <HAL_RCC_OscConfig+0x474>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003298:	2b00      	cmp	r3, #0
 800329a:	d0f0      	beq.n	800327e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d106      	bne.n	80032b2 <HAL_RCC_OscConfig+0x2ea>
 80032a4:	4b64      	ldr	r3, [pc, #400]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 80032a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a8:	4a63      	ldr	r2, [pc, #396]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 80032aa:	f043 0301 	orr.w	r3, r3, #1
 80032ae:	6713      	str	r3, [r2, #112]	; 0x70
 80032b0:	e01c      	b.n	80032ec <HAL_RCC_OscConfig+0x324>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	2b05      	cmp	r3, #5
 80032b8:	d10c      	bne.n	80032d4 <HAL_RCC_OscConfig+0x30c>
 80032ba:	4b5f      	ldr	r3, [pc, #380]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 80032bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032be:	4a5e      	ldr	r2, [pc, #376]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 80032c0:	f043 0304 	orr.w	r3, r3, #4
 80032c4:	6713      	str	r3, [r2, #112]	; 0x70
 80032c6:	4b5c      	ldr	r3, [pc, #368]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 80032c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ca:	4a5b      	ldr	r2, [pc, #364]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 80032cc:	f043 0301 	orr.w	r3, r3, #1
 80032d0:	6713      	str	r3, [r2, #112]	; 0x70
 80032d2:	e00b      	b.n	80032ec <HAL_RCC_OscConfig+0x324>
 80032d4:	4b58      	ldr	r3, [pc, #352]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 80032d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d8:	4a57      	ldr	r2, [pc, #348]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 80032da:	f023 0301 	bic.w	r3, r3, #1
 80032de:	6713      	str	r3, [r2, #112]	; 0x70
 80032e0:	4b55      	ldr	r3, [pc, #340]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 80032e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e4:	4a54      	ldr	r2, [pc, #336]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 80032e6:	f023 0304 	bic.w	r3, r3, #4
 80032ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d015      	beq.n	8003320 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f4:	f7fe fc22 	bl	8001b3c <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032fa:	e00a      	b.n	8003312 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032fc:	f7fe fc1e 	bl	8001b3c <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	f241 3288 	movw	r2, #5000	; 0x1388
 800330a:	4293      	cmp	r3, r2
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e0cb      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003312:	4b49      	ldr	r3, [pc, #292]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 8003314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d0ee      	beq.n	80032fc <HAL_RCC_OscConfig+0x334>
 800331e:	e014      	b.n	800334a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003320:	f7fe fc0c 	bl	8001b3c <HAL_GetTick>
 8003324:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003326:	e00a      	b.n	800333e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003328:	f7fe fc08 	bl	8001b3c <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	f241 3288 	movw	r2, #5000	; 0x1388
 8003336:	4293      	cmp	r3, r2
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e0b5      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800333e:	4b3e      	ldr	r3, [pc, #248]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 8003340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1ee      	bne.n	8003328 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800334a:	7dfb      	ldrb	r3, [r7, #23]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d105      	bne.n	800335c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003350:	4b39      	ldr	r3, [pc, #228]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 8003352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003354:	4a38      	ldr	r2, [pc, #224]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 8003356:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800335a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	2b00      	cmp	r3, #0
 8003362:	f000 80a1 	beq.w	80034a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003366:	4b34      	ldr	r3, [pc, #208]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f003 030c 	and.w	r3, r3, #12
 800336e:	2b08      	cmp	r3, #8
 8003370:	d05c      	beq.n	800342c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	2b02      	cmp	r3, #2
 8003378:	d141      	bne.n	80033fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800337a:	4b31      	ldr	r3, [pc, #196]	; (8003440 <HAL_RCC_OscConfig+0x478>)
 800337c:	2200      	movs	r2, #0
 800337e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003380:	f7fe fbdc 	bl	8001b3c <HAL_GetTick>
 8003384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003386:	e008      	b.n	800339a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003388:	f7fe fbd8 	bl	8001b3c <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e087      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800339a:	4b27      	ldr	r3, [pc, #156]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1f0      	bne.n	8003388 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	69da      	ldr	r2, [r3, #28]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	431a      	orrs	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b4:	019b      	lsls	r3, r3, #6
 80033b6:	431a      	orrs	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033bc:	085b      	lsrs	r3, r3, #1
 80033be:	3b01      	subs	r3, #1
 80033c0:	041b      	lsls	r3, r3, #16
 80033c2:	431a      	orrs	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c8:	061b      	lsls	r3, r3, #24
 80033ca:	491b      	ldr	r1, [pc, #108]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033d0:	4b1b      	ldr	r3, [pc, #108]	; (8003440 <HAL_RCC_OscConfig+0x478>)
 80033d2:	2201      	movs	r2, #1
 80033d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d6:	f7fe fbb1 	bl	8001b3c <HAL_GetTick>
 80033da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033dc:	e008      	b.n	80033f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033de:	f7fe fbad 	bl	8001b3c <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d901      	bls.n	80033f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e05c      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033f0:	4b11      	ldr	r3, [pc, #68]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d0f0      	beq.n	80033de <HAL_RCC_OscConfig+0x416>
 80033fc:	e054      	b.n	80034a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033fe:	4b10      	ldr	r3, [pc, #64]	; (8003440 <HAL_RCC_OscConfig+0x478>)
 8003400:	2200      	movs	r2, #0
 8003402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003404:	f7fe fb9a 	bl	8001b3c <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800340c:	f7fe fb96 	bl	8001b3c <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e045      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800341e:	4b06      	ldr	r3, [pc, #24]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1f0      	bne.n	800340c <HAL_RCC_OscConfig+0x444>
 800342a:	e03d      	b.n	80034a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d107      	bne.n	8003444 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e038      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
 8003438:	40023800 	.word	0x40023800
 800343c:	40007000 	.word	0x40007000
 8003440:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003444:	4b1b      	ldr	r3, [pc, #108]	; (80034b4 <HAL_RCC_OscConfig+0x4ec>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d028      	beq.n	80034a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800345c:	429a      	cmp	r2, r3
 800345e:	d121      	bne.n	80034a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800346a:	429a      	cmp	r2, r3
 800346c:	d11a      	bne.n	80034a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003474:	4013      	ands	r3, r2
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800347a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800347c:	4293      	cmp	r3, r2
 800347e:	d111      	bne.n	80034a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800348a:	085b      	lsrs	r3, r3, #1
 800348c:	3b01      	subs	r3, #1
 800348e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003490:	429a      	cmp	r2, r3
 8003492:	d107      	bne.n	80034a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d001      	beq.n	80034a8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e000      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3718      	adds	r7, #24
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	40023800 	.word	0x40023800

080034b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d101      	bne.n	80034cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e0cc      	b.n	8003666 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034cc:	4b68      	ldr	r3, [pc, #416]	; (8003670 <HAL_RCC_ClockConfig+0x1b8>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0307 	and.w	r3, r3, #7
 80034d4:	683a      	ldr	r2, [r7, #0]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d90c      	bls.n	80034f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034da:	4b65      	ldr	r3, [pc, #404]	; (8003670 <HAL_RCC_ClockConfig+0x1b8>)
 80034dc:	683a      	ldr	r2, [r7, #0]
 80034de:	b2d2      	uxtb	r2, r2
 80034e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034e2:	4b63      	ldr	r3, [pc, #396]	; (8003670 <HAL_RCC_ClockConfig+0x1b8>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0307 	and.w	r3, r3, #7
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d001      	beq.n	80034f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e0b8      	b.n	8003666 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d020      	beq.n	8003542 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0304 	and.w	r3, r3, #4
 8003508:	2b00      	cmp	r3, #0
 800350a:	d005      	beq.n	8003518 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800350c:	4b59      	ldr	r3, [pc, #356]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	4a58      	ldr	r2, [pc, #352]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 8003512:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003516:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0308 	and.w	r3, r3, #8
 8003520:	2b00      	cmp	r3, #0
 8003522:	d005      	beq.n	8003530 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003524:	4b53      	ldr	r3, [pc, #332]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	4a52      	ldr	r2, [pc, #328]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 800352a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800352e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003530:	4b50      	ldr	r3, [pc, #320]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	494d      	ldr	r1, [pc, #308]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 800353e:	4313      	orrs	r3, r2
 8003540:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b00      	cmp	r3, #0
 800354c:	d044      	beq.n	80035d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d107      	bne.n	8003566 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003556:	4b47      	ldr	r3, [pc, #284]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d119      	bne.n	8003596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e07f      	b.n	8003666 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2b02      	cmp	r3, #2
 800356c:	d003      	beq.n	8003576 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003572:	2b03      	cmp	r3, #3
 8003574:	d107      	bne.n	8003586 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003576:	4b3f      	ldr	r3, [pc, #252]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d109      	bne.n	8003596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e06f      	b.n	8003666 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003586:	4b3b      	ldr	r3, [pc, #236]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d101      	bne.n	8003596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e067      	b.n	8003666 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003596:	4b37      	ldr	r3, [pc, #220]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f023 0203 	bic.w	r2, r3, #3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	4934      	ldr	r1, [pc, #208]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035a8:	f7fe fac8 	bl	8001b3c <HAL_GetTick>
 80035ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ae:	e00a      	b.n	80035c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035b0:	f7fe fac4 	bl	8001b3c <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80035be:	4293      	cmp	r3, r2
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e04f      	b.n	8003666 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035c6:	4b2b      	ldr	r3, [pc, #172]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f003 020c 	and.w	r2, r3, #12
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d1eb      	bne.n	80035b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035d8:	4b25      	ldr	r3, [pc, #148]	; (8003670 <HAL_RCC_ClockConfig+0x1b8>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0307 	and.w	r3, r3, #7
 80035e0:	683a      	ldr	r2, [r7, #0]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d20c      	bcs.n	8003600 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035e6:	4b22      	ldr	r3, [pc, #136]	; (8003670 <HAL_RCC_ClockConfig+0x1b8>)
 80035e8:	683a      	ldr	r2, [r7, #0]
 80035ea:	b2d2      	uxtb	r2, r2
 80035ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ee:	4b20      	ldr	r3, [pc, #128]	; (8003670 <HAL_RCC_ClockConfig+0x1b8>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0307 	and.w	r3, r3, #7
 80035f6:	683a      	ldr	r2, [r7, #0]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d001      	beq.n	8003600 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e032      	b.n	8003666 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0304 	and.w	r3, r3, #4
 8003608:	2b00      	cmp	r3, #0
 800360a:	d008      	beq.n	800361e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800360c:	4b19      	ldr	r3, [pc, #100]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	4916      	ldr	r1, [pc, #88]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 800361a:	4313      	orrs	r3, r2
 800361c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0308 	and.w	r3, r3, #8
 8003626:	2b00      	cmp	r3, #0
 8003628:	d009      	beq.n	800363e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800362a:	4b12      	ldr	r3, [pc, #72]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	490e      	ldr	r1, [pc, #56]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 800363a:	4313      	orrs	r3, r2
 800363c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800363e:	f000 f821 	bl	8003684 <HAL_RCC_GetSysClockFreq>
 8003642:	4602      	mov	r2, r0
 8003644:	4b0b      	ldr	r3, [pc, #44]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	091b      	lsrs	r3, r3, #4
 800364a:	f003 030f 	and.w	r3, r3, #15
 800364e:	490a      	ldr	r1, [pc, #40]	; (8003678 <HAL_RCC_ClockConfig+0x1c0>)
 8003650:	5ccb      	ldrb	r3, [r1, r3]
 8003652:	fa22 f303 	lsr.w	r3, r2, r3
 8003656:	4a09      	ldr	r2, [pc, #36]	; (800367c <HAL_RCC_ClockConfig+0x1c4>)
 8003658:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800365a:	4b09      	ldr	r3, [pc, #36]	; (8003680 <HAL_RCC_ClockConfig+0x1c8>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4618      	mov	r0, r3
 8003660:	f7fe fa28 	bl	8001ab4 <HAL_InitTick>

  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	40023c00 	.word	0x40023c00
 8003674:	40023800 	.word	0x40023800
 8003678:	08007534 	.word	0x08007534
 800367c:	20000008 	.word	0x20000008
 8003680:	2000000c 	.word	0x2000000c

08003684 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003684:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003688:	b090      	sub	sp, #64	; 0x40
 800368a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800368c:	2300      	movs	r3, #0
 800368e:	637b      	str	r3, [r7, #52]	; 0x34
 8003690:	2300      	movs	r3, #0
 8003692:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003694:	2300      	movs	r3, #0
 8003696:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003698:	2300      	movs	r3, #0
 800369a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800369c:	4b59      	ldr	r3, [pc, #356]	; (8003804 <HAL_RCC_GetSysClockFreq+0x180>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f003 030c 	and.w	r3, r3, #12
 80036a4:	2b08      	cmp	r3, #8
 80036a6:	d00d      	beq.n	80036c4 <HAL_RCC_GetSysClockFreq+0x40>
 80036a8:	2b08      	cmp	r3, #8
 80036aa:	f200 80a1 	bhi.w	80037f0 <HAL_RCC_GetSysClockFreq+0x16c>
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d002      	beq.n	80036b8 <HAL_RCC_GetSysClockFreq+0x34>
 80036b2:	2b04      	cmp	r3, #4
 80036b4:	d003      	beq.n	80036be <HAL_RCC_GetSysClockFreq+0x3a>
 80036b6:	e09b      	b.n	80037f0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036b8:	4b53      	ldr	r3, [pc, #332]	; (8003808 <HAL_RCC_GetSysClockFreq+0x184>)
 80036ba:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80036bc:	e09b      	b.n	80037f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036be:	4b53      	ldr	r3, [pc, #332]	; (800380c <HAL_RCC_GetSysClockFreq+0x188>)
 80036c0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80036c2:	e098      	b.n	80037f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036c4:	4b4f      	ldr	r3, [pc, #316]	; (8003804 <HAL_RCC_GetSysClockFreq+0x180>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036cc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036ce:	4b4d      	ldr	r3, [pc, #308]	; (8003804 <HAL_RCC_GetSysClockFreq+0x180>)
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d028      	beq.n	800372c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036da:	4b4a      	ldr	r3, [pc, #296]	; (8003804 <HAL_RCC_GetSysClockFreq+0x180>)
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	099b      	lsrs	r3, r3, #6
 80036e0:	2200      	movs	r2, #0
 80036e2:	623b      	str	r3, [r7, #32]
 80036e4:	627a      	str	r2, [r7, #36]	; 0x24
 80036e6:	6a3b      	ldr	r3, [r7, #32]
 80036e8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80036ec:	2100      	movs	r1, #0
 80036ee:	4b47      	ldr	r3, [pc, #284]	; (800380c <HAL_RCC_GetSysClockFreq+0x188>)
 80036f0:	fb03 f201 	mul.w	r2, r3, r1
 80036f4:	2300      	movs	r3, #0
 80036f6:	fb00 f303 	mul.w	r3, r0, r3
 80036fa:	4413      	add	r3, r2
 80036fc:	4a43      	ldr	r2, [pc, #268]	; (800380c <HAL_RCC_GetSysClockFreq+0x188>)
 80036fe:	fba0 1202 	umull	r1, r2, r0, r2
 8003702:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003704:	460a      	mov	r2, r1
 8003706:	62ba      	str	r2, [r7, #40]	; 0x28
 8003708:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800370a:	4413      	add	r3, r2
 800370c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800370e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003710:	2200      	movs	r2, #0
 8003712:	61bb      	str	r3, [r7, #24]
 8003714:	61fa      	str	r2, [r7, #28]
 8003716:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800371a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800371e:	f7fc fda7 	bl	8000270 <__aeabi_uldivmod>
 8003722:	4602      	mov	r2, r0
 8003724:	460b      	mov	r3, r1
 8003726:	4613      	mov	r3, r2
 8003728:	63fb      	str	r3, [r7, #60]	; 0x3c
 800372a:	e053      	b.n	80037d4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800372c:	4b35      	ldr	r3, [pc, #212]	; (8003804 <HAL_RCC_GetSysClockFreq+0x180>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	099b      	lsrs	r3, r3, #6
 8003732:	2200      	movs	r2, #0
 8003734:	613b      	str	r3, [r7, #16]
 8003736:	617a      	str	r2, [r7, #20]
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800373e:	f04f 0b00 	mov.w	fp, #0
 8003742:	4652      	mov	r2, sl
 8003744:	465b      	mov	r3, fp
 8003746:	f04f 0000 	mov.w	r0, #0
 800374a:	f04f 0100 	mov.w	r1, #0
 800374e:	0159      	lsls	r1, r3, #5
 8003750:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003754:	0150      	lsls	r0, r2, #5
 8003756:	4602      	mov	r2, r0
 8003758:	460b      	mov	r3, r1
 800375a:	ebb2 080a 	subs.w	r8, r2, sl
 800375e:	eb63 090b 	sbc.w	r9, r3, fp
 8003762:	f04f 0200 	mov.w	r2, #0
 8003766:	f04f 0300 	mov.w	r3, #0
 800376a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800376e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003772:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003776:	ebb2 0408 	subs.w	r4, r2, r8
 800377a:	eb63 0509 	sbc.w	r5, r3, r9
 800377e:	f04f 0200 	mov.w	r2, #0
 8003782:	f04f 0300 	mov.w	r3, #0
 8003786:	00eb      	lsls	r3, r5, #3
 8003788:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800378c:	00e2      	lsls	r2, r4, #3
 800378e:	4614      	mov	r4, r2
 8003790:	461d      	mov	r5, r3
 8003792:	eb14 030a 	adds.w	r3, r4, sl
 8003796:	603b      	str	r3, [r7, #0]
 8003798:	eb45 030b 	adc.w	r3, r5, fp
 800379c:	607b      	str	r3, [r7, #4]
 800379e:	f04f 0200 	mov.w	r2, #0
 80037a2:	f04f 0300 	mov.w	r3, #0
 80037a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037aa:	4629      	mov	r1, r5
 80037ac:	028b      	lsls	r3, r1, #10
 80037ae:	4621      	mov	r1, r4
 80037b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037b4:	4621      	mov	r1, r4
 80037b6:	028a      	lsls	r2, r1, #10
 80037b8:	4610      	mov	r0, r2
 80037ba:	4619      	mov	r1, r3
 80037bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037be:	2200      	movs	r2, #0
 80037c0:	60bb      	str	r3, [r7, #8]
 80037c2:	60fa      	str	r2, [r7, #12]
 80037c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037c8:	f7fc fd52 	bl	8000270 <__aeabi_uldivmod>
 80037cc:	4602      	mov	r2, r0
 80037ce:	460b      	mov	r3, r1
 80037d0:	4613      	mov	r3, r2
 80037d2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037d4:	4b0b      	ldr	r3, [pc, #44]	; (8003804 <HAL_RCC_GetSysClockFreq+0x180>)
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	0c1b      	lsrs	r3, r3, #16
 80037da:	f003 0303 	and.w	r3, r3, #3
 80037de:	3301      	adds	r3, #1
 80037e0:	005b      	lsls	r3, r3, #1
 80037e2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80037e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80037e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80037ee:	e002      	b.n	80037f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037f0:	4b05      	ldr	r3, [pc, #20]	; (8003808 <HAL_RCC_GetSysClockFreq+0x184>)
 80037f2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80037f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3740      	adds	r7, #64	; 0x40
 80037fc:	46bd      	mov	sp, r7
 80037fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003802:	bf00      	nop
 8003804:	40023800 	.word	0x40023800
 8003808:	00f42400 	.word	0x00f42400
 800380c:	017d7840 	.word	0x017d7840

08003810 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003810:	b480      	push	{r7}
 8003812:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003814:	4b03      	ldr	r3, [pc, #12]	; (8003824 <HAL_RCC_GetHCLKFreq+0x14>)
 8003816:	681b      	ldr	r3, [r3, #0]
}
 8003818:	4618      	mov	r0, r3
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	20000008 	.word	0x20000008

08003828 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800382c:	f7ff fff0 	bl	8003810 <HAL_RCC_GetHCLKFreq>
 8003830:	4602      	mov	r2, r0
 8003832:	4b05      	ldr	r3, [pc, #20]	; (8003848 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	0a9b      	lsrs	r3, r3, #10
 8003838:	f003 0307 	and.w	r3, r3, #7
 800383c:	4903      	ldr	r1, [pc, #12]	; (800384c <HAL_RCC_GetPCLK1Freq+0x24>)
 800383e:	5ccb      	ldrb	r3, [r1, r3]
 8003840:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003844:	4618      	mov	r0, r3
 8003846:	bd80      	pop	{r7, pc}
 8003848:	40023800 	.word	0x40023800
 800384c:	08007544 	.word	0x08007544

08003850 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003854:	f7ff ffdc 	bl	8003810 <HAL_RCC_GetHCLKFreq>
 8003858:	4602      	mov	r2, r0
 800385a:	4b05      	ldr	r3, [pc, #20]	; (8003870 <HAL_RCC_GetPCLK2Freq+0x20>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	0b5b      	lsrs	r3, r3, #13
 8003860:	f003 0307 	and.w	r3, r3, #7
 8003864:	4903      	ldr	r1, [pc, #12]	; (8003874 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003866:	5ccb      	ldrb	r3, [r1, r3]
 8003868:	fa22 f303 	lsr.w	r3, r2, r3
}
 800386c:	4618      	mov	r0, r3
 800386e:	bd80      	pop	{r7, pc}
 8003870:	40023800 	.word	0x40023800
 8003874:	08007544 	.word	0x08007544

08003878 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e07b      	b.n	8003982 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388e:	2b00      	cmp	r3, #0
 8003890:	d108      	bne.n	80038a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800389a:	d009      	beq.n	80038b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	61da      	str	r2, [r3, #28]
 80038a2:	e005      	b.n	80038b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d106      	bne.n	80038d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f7fd fed0 	bl	8001670 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2202      	movs	r2, #2
 80038d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80038f8:	431a      	orrs	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003902:	431a      	orrs	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	431a      	orrs	r2, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	431a      	orrs	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003920:	431a      	orrs	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	69db      	ldr	r3, [r3, #28]
 8003926:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800392a:	431a      	orrs	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a1b      	ldr	r3, [r3, #32]
 8003930:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003934:	ea42 0103 	orr.w	r1, r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	430a      	orrs	r2, r1
 8003946:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	0c1b      	lsrs	r3, r3, #16
 800394e:	f003 0104 	and.w	r1, r3, #4
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003956:	f003 0210 	and.w	r2, r3, #16
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	430a      	orrs	r2, r1
 8003960:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	69da      	ldr	r2, [r3, #28]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003970:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3708      	adds	r7, #8
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800398a:	b580      	push	{r7, lr}
 800398c:	b088      	sub	sp, #32
 800398e:	af00      	add	r7, sp, #0
 8003990:	60f8      	str	r0, [r7, #12]
 8003992:	60b9      	str	r1, [r7, #8]
 8003994:	603b      	str	r3, [r7, #0]
 8003996:	4613      	mov	r3, r2
 8003998:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800399a:	2300      	movs	r3, #0
 800399c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d101      	bne.n	80039ac <HAL_SPI_Transmit+0x22>
 80039a8:	2302      	movs	r3, #2
 80039aa:	e126      	b.n	8003bfa <HAL_SPI_Transmit+0x270>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039b4:	f7fe f8c2 	bl	8001b3c <HAL_GetTick>
 80039b8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80039ba:	88fb      	ldrh	r3, [r7, #6]
 80039bc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d002      	beq.n	80039d0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80039ca:	2302      	movs	r3, #2
 80039cc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80039ce:	e10b      	b.n	8003be8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d002      	beq.n	80039dc <HAL_SPI_Transmit+0x52>
 80039d6:	88fb      	ldrh	r3, [r7, #6]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d102      	bne.n	80039e2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	77fb      	strb	r3, [r7, #31]
    goto error;
 80039e0:	e102      	b.n	8003be8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2203      	movs	r2, #3
 80039e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	68ba      	ldr	r2, [r7, #8]
 80039f4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	88fa      	ldrh	r2, [r7, #6]
 80039fa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	88fa      	ldrh	r2, [r7, #6]
 8003a00:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2200      	movs	r2, #0
 8003a18:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a28:	d10f      	bne.n	8003a4a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a38:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a48:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a54:	2b40      	cmp	r3, #64	; 0x40
 8003a56:	d007      	beq.n	8003a68 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a66:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a70:	d14b      	bne.n	8003b0a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d002      	beq.n	8003a80 <HAL_SPI_Transmit+0xf6>
 8003a7a:	8afb      	ldrh	r3, [r7, #22]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d13e      	bne.n	8003afe <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a84:	881a      	ldrh	r2, [r3, #0]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a90:	1c9a      	adds	r2, r3, #2
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	b29a      	uxth	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003aa4:	e02b      	b.n	8003afe <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f003 0302 	and.w	r3, r3, #2
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d112      	bne.n	8003ada <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab8:	881a      	ldrh	r2, [r3, #0]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac4:	1c9a      	adds	r2, r3, #2
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	b29a      	uxth	r2, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	86da      	strh	r2, [r3, #54]	; 0x36
 8003ad8:	e011      	b.n	8003afe <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ada:	f7fe f82f 	bl	8001b3c <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	683a      	ldr	r2, [r7, #0]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d803      	bhi.n	8003af2 <HAL_SPI_Transmit+0x168>
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af0:	d102      	bne.n	8003af8 <HAL_SPI_Transmit+0x16e>
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d102      	bne.n	8003afe <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003afc:	e074      	b.n	8003be8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1ce      	bne.n	8003aa6 <HAL_SPI_Transmit+0x11c>
 8003b08:	e04c      	b.n	8003ba4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d002      	beq.n	8003b18 <HAL_SPI_Transmit+0x18e>
 8003b12:	8afb      	ldrh	r3, [r7, #22]
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d140      	bne.n	8003b9a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	330c      	adds	r3, #12
 8003b22:	7812      	ldrb	r2, [r2, #0]
 8003b24:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2a:	1c5a      	adds	r2, r3, #1
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	3b01      	subs	r3, #1
 8003b38:	b29a      	uxth	r2, r3
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003b3e:	e02c      	b.n	8003b9a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d113      	bne.n	8003b76 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	330c      	adds	r3, #12
 8003b58:	7812      	ldrb	r2, [r2, #0]
 8003b5a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b60:	1c5a      	adds	r2, r3, #1
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	86da      	strh	r2, [r3, #54]	; 0x36
 8003b74:	e011      	b.n	8003b9a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b76:	f7fd ffe1 	bl	8001b3c <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	683a      	ldr	r2, [r7, #0]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d803      	bhi.n	8003b8e <HAL_SPI_Transmit+0x204>
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b8c:	d102      	bne.n	8003b94 <HAL_SPI_Transmit+0x20a>
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d102      	bne.n	8003b9a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003b98:	e026      	b.n	8003be8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d1cd      	bne.n	8003b40 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ba4:	69ba      	ldr	r2, [r7, #24]
 8003ba6:	6839      	ldr	r1, [r7, #0]
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f000 fbd9 	bl	8004360 <SPI_EndRxTxTransaction>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d002      	beq.n	8003bba <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2220      	movs	r2, #32
 8003bb8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d10a      	bne.n	8003bd8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	613b      	str	r3, [r7, #16]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	613b      	str	r3, [r7, #16]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	613b      	str	r3, [r7, #16]
 8003bd6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d002      	beq.n	8003be6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	77fb      	strb	r3, [r7, #31]
 8003be4:	e000      	b.n	8003be8 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003be6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003bf8:	7ffb      	ldrb	r3, [r7, #31]
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3720      	adds	r7, #32
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b088      	sub	sp, #32
 8003c06:	af02      	add	r7, sp, #8
 8003c08:	60f8      	str	r0, [r7, #12]
 8003c0a:	60b9      	str	r1, [r7, #8]
 8003c0c:	603b      	str	r3, [r7, #0]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c12:	2300      	movs	r3, #0
 8003c14:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c1e:	d112      	bne.n	8003c46 <HAL_SPI_Receive+0x44>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d10e      	bne.n	8003c46 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2204      	movs	r2, #4
 8003c2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003c30:	88fa      	ldrh	r2, [r7, #6]
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	9300      	str	r3, [sp, #0]
 8003c36:	4613      	mov	r3, r2
 8003c38:	68ba      	ldr	r2, [r7, #8]
 8003c3a:	68b9      	ldr	r1, [r7, #8]
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	f000 f8f1 	bl	8003e24 <HAL_SPI_TransmitReceive>
 8003c42:	4603      	mov	r3, r0
 8003c44:	e0ea      	b.n	8003e1c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d101      	bne.n	8003c54 <HAL_SPI_Receive+0x52>
 8003c50:	2302      	movs	r3, #2
 8003c52:	e0e3      	b.n	8003e1c <HAL_SPI_Receive+0x21a>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c5c:	f7fd ff6e 	bl	8001b3c <HAL_GetTick>
 8003c60:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d002      	beq.n	8003c74 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003c6e:	2302      	movs	r3, #2
 8003c70:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003c72:	e0ca      	b.n	8003e0a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d002      	beq.n	8003c80 <HAL_SPI_Receive+0x7e>
 8003c7a:	88fb      	ldrh	r3, [r7, #6]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d102      	bne.n	8003c86 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003c84:	e0c1      	b.n	8003e0a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2204      	movs	r2, #4
 8003c8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	68ba      	ldr	r2, [r7, #8]
 8003c98:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	88fa      	ldrh	r2, [r7, #6]
 8003c9e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	88fa      	ldrh	r2, [r7, #6]
 8003ca4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ccc:	d10f      	bne.n	8003cee <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cdc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003cec:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf8:	2b40      	cmp	r3, #64	; 0x40
 8003cfa:	d007      	beq.n	8003d0c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d0a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d162      	bne.n	8003dda <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003d14:	e02e      	b.n	8003d74 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f003 0301 	and.w	r3, r3, #1
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d115      	bne.n	8003d50 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f103 020c 	add.w	r2, r3, #12
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d30:	7812      	ldrb	r2, [r2, #0]
 8003d32:	b2d2      	uxtb	r2, r2
 8003d34:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3a:	1c5a      	adds	r2, r3, #1
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	3b01      	subs	r3, #1
 8003d48:	b29a      	uxth	r2, r3
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d4e:	e011      	b.n	8003d74 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d50:	f7fd fef4 	bl	8001b3c <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	683a      	ldr	r2, [r7, #0]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d803      	bhi.n	8003d68 <HAL_SPI_Receive+0x166>
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d66:	d102      	bne.n	8003d6e <HAL_SPI_Receive+0x16c>
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d102      	bne.n	8003d74 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003d72:	e04a      	b.n	8003e0a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1cb      	bne.n	8003d16 <HAL_SPI_Receive+0x114>
 8003d7e:	e031      	b.n	8003de4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f003 0301 	and.w	r3, r3, #1
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d113      	bne.n	8003db6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68da      	ldr	r2, [r3, #12]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d98:	b292      	uxth	r2, r2
 8003d9a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da0:	1c9a      	adds	r2, r3, #2
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	3b01      	subs	r3, #1
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003db4:	e011      	b.n	8003dda <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003db6:	f7fd fec1 	bl	8001b3c <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d803      	bhi.n	8003dce <HAL_SPI_Receive+0x1cc>
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dcc:	d102      	bne.n	8003dd4 <HAL_SPI_Receive+0x1d2>
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d102      	bne.n	8003dda <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003dd8:	e017      	b.n	8003e0a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1cd      	bne.n	8003d80 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	6839      	ldr	r1, [r7, #0]
 8003de8:	68f8      	ldr	r0, [r7, #12]
 8003dea:	f000 fa53 	bl	8004294 <SPI_EndRxTransaction>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d002      	beq.n	8003dfa <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2220      	movs	r2, #32
 8003df8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d002      	beq.n	8003e08 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	75fb      	strb	r3, [r7, #23]
 8003e06:	e000      	b.n	8003e0a <HAL_SPI_Receive+0x208>
  }

error :
 8003e08:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003e1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3718      	adds	r7, #24
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b08c      	sub	sp, #48	; 0x30
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	607a      	str	r2, [r7, #4]
 8003e30:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003e32:	2301      	movs	r3, #1
 8003e34:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003e36:	2300      	movs	r3, #0
 8003e38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d101      	bne.n	8003e4a <HAL_SPI_TransmitReceive+0x26>
 8003e46:	2302      	movs	r3, #2
 8003e48:	e18a      	b.n	8004160 <HAL_SPI_TransmitReceive+0x33c>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e52:	f7fd fe73 	bl	8001b3c <HAL_GetTick>
 8003e56:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003e68:	887b      	ldrh	r3, [r7, #2]
 8003e6a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003e6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d00f      	beq.n	8003e94 <HAL_SPI_TransmitReceive+0x70>
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e7a:	d107      	bne.n	8003e8c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d103      	bne.n	8003e8c <HAL_SPI_TransmitReceive+0x68>
 8003e84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e88:	2b04      	cmp	r3, #4
 8003e8a:	d003      	beq.n	8003e94 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003e92:	e15b      	b.n	800414c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d005      	beq.n	8003ea6 <HAL_SPI_TransmitReceive+0x82>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d002      	beq.n	8003ea6 <HAL_SPI_TransmitReceive+0x82>
 8003ea0:	887b      	ldrh	r3, [r7, #2]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d103      	bne.n	8003eae <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003eac:	e14e      	b.n	800414c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b04      	cmp	r3, #4
 8003eb8:	d003      	beq.n	8003ec2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2205      	movs	r2, #5
 8003ebe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	887a      	ldrh	r2, [r7, #2]
 8003ed2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	887a      	ldrh	r2, [r7, #2]
 8003ed8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	68ba      	ldr	r2, [r7, #8]
 8003ede:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	887a      	ldrh	r2, [r7, #2]
 8003ee4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	887a      	ldrh	r2, [r7, #2]
 8003eea:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f02:	2b40      	cmp	r3, #64	; 0x40
 8003f04:	d007      	beq.n	8003f16 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f14:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f1e:	d178      	bne.n	8004012 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d002      	beq.n	8003f2e <HAL_SPI_TransmitReceive+0x10a>
 8003f28:	8b7b      	ldrh	r3, [r7, #26]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d166      	bne.n	8003ffc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f32:	881a      	ldrh	r2, [r3, #0]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3e:	1c9a      	adds	r2, r3, #2
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	b29a      	uxth	r2, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f52:	e053      	b.n	8003ffc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d11b      	bne.n	8003f9a <HAL_SPI_TransmitReceive+0x176>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d016      	beq.n	8003f9a <HAL_SPI_TransmitReceive+0x176>
 8003f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d113      	bne.n	8003f9a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f76:	881a      	ldrh	r2, [r3, #0]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f82:	1c9a      	adds	r2, r3, #2
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	b29a      	uxth	r2, r3
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f96:	2300      	movs	r3, #0
 8003f98:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f003 0301 	and.w	r3, r3, #1
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d119      	bne.n	8003fdc <HAL_SPI_TransmitReceive+0x1b8>
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d014      	beq.n	8003fdc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68da      	ldr	r2, [r3, #12]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fbc:	b292      	uxth	r2, r2
 8003fbe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc4:	1c9a      	adds	r2, r3, #2
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003fdc:	f7fd fdae 	bl	8001b3c <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d807      	bhi.n	8003ffc <HAL_SPI_TransmitReceive+0x1d8>
 8003fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff2:	d003      	beq.n	8003ffc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003ffa:	e0a7      	b.n	800414c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004000:	b29b      	uxth	r3, r3
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1a6      	bne.n	8003f54 <HAL_SPI_TransmitReceive+0x130>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800400a:	b29b      	uxth	r3, r3
 800400c:	2b00      	cmp	r3, #0
 800400e:	d1a1      	bne.n	8003f54 <HAL_SPI_TransmitReceive+0x130>
 8004010:	e07c      	b.n	800410c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d002      	beq.n	8004020 <HAL_SPI_TransmitReceive+0x1fc>
 800401a:	8b7b      	ldrh	r3, [r7, #26]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d16b      	bne.n	80040f8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	330c      	adds	r3, #12
 800402a:	7812      	ldrb	r2, [r2, #0]
 800402c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004032:	1c5a      	adds	r2, r3, #1
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800403c:	b29b      	uxth	r3, r3
 800403e:	3b01      	subs	r3, #1
 8004040:	b29a      	uxth	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004046:	e057      	b.n	80040f8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f003 0302 	and.w	r3, r3, #2
 8004052:	2b02      	cmp	r3, #2
 8004054:	d11c      	bne.n	8004090 <HAL_SPI_TransmitReceive+0x26c>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800405a:	b29b      	uxth	r3, r3
 800405c:	2b00      	cmp	r3, #0
 800405e:	d017      	beq.n	8004090 <HAL_SPI_TransmitReceive+0x26c>
 8004060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004062:	2b01      	cmp	r3, #1
 8004064:	d114      	bne.n	8004090 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	330c      	adds	r3, #12
 8004070:	7812      	ldrb	r2, [r2, #0]
 8004072:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004078:	1c5a      	adds	r2, r3, #1
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004082:	b29b      	uxth	r3, r3
 8004084:	3b01      	subs	r3, #1
 8004086:	b29a      	uxth	r2, r3
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800408c:	2300      	movs	r3, #0
 800408e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	2b01      	cmp	r3, #1
 800409c:	d119      	bne.n	80040d2 <HAL_SPI_TransmitReceive+0x2ae>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d014      	beq.n	80040d2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68da      	ldr	r2, [r3, #12]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b2:	b2d2      	uxtb	r2, r2
 80040b4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ba:	1c5a      	adds	r2, r3, #1
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	3b01      	subs	r3, #1
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040ce:	2301      	movs	r3, #1
 80040d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80040d2:	f7fd fd33 	bl	8001b3c <HAL_GetTick>
 80040d6:	4602      	mov	r2, r0
 80040d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040de:	429a      	cmp	r2, r3
 80040e0:	d803      	bhi.n	80040ea <HAL_SPI_TransmitReceive+0x2c6>
 80040e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e8:	d102      	bne.n	80040f0 <HAL_SPI_TransmitReceive+0x2cc>
 80040ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d103      	bne.n	80040f8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80040f6:	e029      	b.n	800414c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1a2      	bne.n	8004048 <HAL_SPI_TransmitReceive+0x224>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004106:	b29b      	uxth	r3, r3
 8004108:	2b00      	cmp	r3, #0
 800410a:	d19d      	bne.n	8004048 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800410c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800410e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004110:	68f8      	ldr	r0, [r7, #12]
 8004112:	f000 f925 	bl	8004360 <SPI_EndRxTxTransaction>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d006      	beq.n	800412a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2220      	movs	r2, #32
 8004126:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004128:	e010      	b.n	800414c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10b      	bne.n	800414a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004132:	2300      	movs	r3, #0
 8004134:	617b      	str	r3, [r7, #20]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	617b      	str	r3, [r7, #20]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	617b      	str	r3, [r7, #20]
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	e000      	b.n	800414c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800414a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800415c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004160:	4618      	mov	r0, r3
 8004162:	3730      	adds	r7, #48	; 0x30
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004176:	b2db      	uxtb	r3, r3
}
 8004178:	4618      	mov	r0, r3
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b088      	sub	sp, #32
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	603b      	str	r3, [r7, #0]
 8004190:	4613      	mov	r3, r2
 8004192:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004194:	f7fd fcd2 	bl	8001b3c <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800419c:	1a9b      	subs	r3, r3, r2
 800419e:	683a      	ldr	r2, [r7, #0]
 80041a0:	4413      	add	r3, r2
 80041a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80041a4:	f7fd fcca 	bl	8001b3c <HAL_GetTick>
 80041a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80041aa:	4b39      	ldr	r3, [pc, #228]	; (8004290 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	015b      	lsls	r3, r3, #5
 80041b0:	0d1b      	lsrs	r3, r3, #20
 80041b2:	69fa      	ldr	r2, [r7, #28]
 80041b4:	fb02 f303 	mul.w	r3, r2, r3
 80041b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041ba:	e054      	b.n	8004266 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c2:	d050      	beq.n	8004266 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80041c4:	f7fd fcba 	bl	8001b3c <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	69fa      	ldr	r2, [r7, #28]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d902      	bls.n	80041da <SPI_WaitFlagStateUntilTimeout+0x56>
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d13d      	bne.n	8004256 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	685a      	ldr	r2, [r3, #4]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80041e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041f2:	d111      	bne.n	8004218 <SPI_WaitFlagStateUntilTimeout+0x94>
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041fc:	d004      	beq.n	8004208 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004206:	d107      	bne.n	8004218 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004216:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800421c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004220:	d10f      	bne.n	8004242 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004230:	601a      	str	r2, [r3, #0]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004240:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2201      	movs	r2, #1
 8004246:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e017      	b.n	8004286 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d101      	bne.n	8004260 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800425c:	2300      	movs	r3, #0
 800425e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	3b01      	subs	r3, #1
 8004264:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	689a      	ldr	r2, [r3, #8]
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	4013      	ands	r3, r2
 8004270:	68ba      	ldr	r2, [r7, #8]
 8004272:	429a      	cmp	r2, r3
 8004274:	bf0c      	ite	eq
 8004276:	2301      	moveq	r3, #1
 8004278:	2300      	movne	r3, #0
 800427a:	b2db      	uxtb	r3, r3
 800427c:	461a      	mov	r2, r3
 800427e:	79fb      	ldrb	r3, [r7, #7]
 8004280:	429a      	cmp	r2, r3
 8004282:	d19b      	bne.n	80041bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3720      	adds	r7, #32
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	20000008 	.word	0x20000008

08004294 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b086      	sub	sp, #24
 8004298:	af02      	add	r7, sp, #8
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042a8:	d111      	bne.n	80042ce <SPI_EndRxTransaction+0x3a>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042b2:	d004      	beq.n	80042be <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042bc:	d107      	bne.n	80042ce <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042cc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042d6:	d12a      	bne.n	800432e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042e0:	d012      	beq.n	8004308 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	9300      	str	r3, [sp, #0]
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	2200      	movs	r2, #0
 80042ea:	2180      	movs	r1, #128	; 0x80
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f7ff ff49 	bl	8004184 <SPI_WaitFlagStateUntilTimeout>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d02d      	beq.n	8004354 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042fc:	f043 0220 	orr.w	r2, r3, #32
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e026      	b.n	8004356 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	9300      	str	r3, [sp, #0]
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	2200      	movs	r2, #0
 8004310:	2101      	movs	r1, #1
 8004312:	68f8      	ldr	r0, [r7, #12]
 8004314:	f7ff ff36 	bl	8004184 <SPI_WaitFlagStateUntilTimeout>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d01a      	beq.n	8004354 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004322:	f043 0220 	orr.w	r2, r3, #32
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e013      	b.n	8004356 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	9300      	str	r3, [sp, #0]
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	2200      	movs	r2, #0
 8004336:	2101      	movs	r1, #1
 8004338:	68f8      	ldr	r0, [r7, #12]
 800433a:	f7ff ff23 	bl	8004184 <SPI_WaitFlagStateUntilTimeout>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d007      	beq.n	8004354 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004348:	f043 0220 	orr.w	r2, r3, #32
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e000      	b.n	8004356 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
	...

08004360 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b088      	sub	sp, #32
 8004364:	af02      	add	r7, sp, #8
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800436c:	4b1b      	ldr	r3, [pc, #108]	; (80043dc <SPI_EndRxTxTransaction+0x7c>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a1b      	ldr	r2, [pc, #108]	; (80043e0 <SPI_EndRxTxTransaction+0x80>)
 8004372:	fba2 2303 	umull	r2, r3, r2, r3
 8004376:	0d5b      	lsrs	r3, r3, #21
 8004378:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800437c:	fb02 f303 	mul.w	r3, r2, r3
 8004380:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800438a:	d112      	bne.n	80043b2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	9300      	str	r3, [sp, #0]
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	2200      	movs	r2, #0
 8004394:	2180      	movs	r1, #128	; 0x80
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	f7ff fef4 	bl	8004184 <SPI_WaitFlagStateUntilTimeout>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d016      	beq.n	80043d0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a6:	f043 0220 	orr.w	r2, r3, #32
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e00f      	b.n	80043d2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d00a      	beq.n	80043ce <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	3b01      	subs	r3, #1
 80043bc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043c8:	2b80      	cmp	r3, #128	; 0x80
 80043ca:	d0f2      	beq.n	80043b2 <SPI_EndRxTxTransaction+0x52>
 80043cc:	e000      	b.n	80043d0 <SPI_EndRxTxTransaction+0x70>
        break;
 80043ce:	bf00      	nop
  }

  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3718      	adds	r7, #24
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	20000008 	.word	0x20000008
 80043e0:	165e9f81 	.word	0x165e9f81

080043e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e041      	b.n	800447a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d106      	bne.n	8004410 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f7fd f998 	bl	8001740 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2202      	movs	r2, #2
 8004414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	3304      	adds	r3, #4
 8004420:	4619      	mov	r1, r3
 8004422:	4610      	mov	r0, r2
 8004424:	f000 fa96 	bl	8004954 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3708      	adds	r7, #8
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
	...

08004484 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004492:	b2db      	uxtb	r3, r3
 8004494:	2b01      	cmp	r3, #1
 8004496:	d001      	beq.n	800449c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e04e      	b.n	800453a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2202      	movs	r2, #2
 80044a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68da      	ldr	r2, [r3, #12]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f042 0201 	orr.w	r2, r2, #1
 80044b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a23      	ldr	r2, [pc, #140]	; (8004548 <HAL_TIM_Base_Start_IT+0xc4>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d022      	beq.n	8004504 <HAL_TIM_Base_Start_IT+0x80>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044c6:	d01d      	beq.n	8004504 <HAL_TIM_Base_Start_IT+0x80>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a1f      	ldr	r2, [pc, #124]	; (800454c <HAL_TIM_Base_Start_IT+0xc8>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d018      	beq.n	8004504 <HAL_TIM_Base_Start_IT+0x80>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a1e      	ldr	r2, [pc, #120]	; (8004550 <HAL_TIM_Base_Start_IT+0xcc>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d013      	beq.n	8004504 <HAL_TIM_Base_Start_IT+0x80>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a1c      	ldr	r2, [pc, #112]	; (8004554 <HAL_TIM_Base_Start_IT+0xd0>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d00e      	beq.n	8004504 <HAL_TIM_Base_Start_IT+0x80>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a1b      	ldr	r2, [pc, #108]	; (8004558 <HAL_TIM_Base_Start_IT+0xd4>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d009      	beq.n	8004504 <HAL_TIM_Base_Start_IT+0x80>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a19      	ldr	r2, [pc, #100]	; (800455c <HAL_TIM_Base_Start_IT+0xd8>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d004      	beq.n	8004504 <HAL_TIM_Base_Start_IT+0x80>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a18      	ldr	r2, [pc, #96]	; (8004560 <HAL_TIM_Base_Start_IT+0xdc>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d111      	bne.n	8004528 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f003 0307 	and.w	r3, r3, #7
 800450e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2b06      	cmp	r3, #6
 8004514:	d010      	beq.n	8004538 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f042 0201 	orr.w	r2, r2, #1
 8004524:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004526:	e007      	b.n	8004538 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f042 0201 	orr.w	r2, r2, #1
 8004536:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3714      	adds	r7, #20
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	40010000 	.word	0x40010000
 800454c:	40000400 	.word	0x40000400
 8004550:	40000800 	.word	0x40000800
 8004554:	40000c00 	.word	0x40000c00
 8004558:	40010400 	.word	0x40010400
 800455c:	40014000 	.word	0x40014000
 8004560:	40001800 	.word	0x40001800

08004564 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	2b02      	cmp	r3, #2
 8004578:	d122      	bne.n	80045c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	f003 0302 	and.w	r3, r3, #2
 8004584:	2b02      	cmp	r3, #2
 8004586:	d11b      	bne.n	80045c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f06f 0202 	mvn.w	r2, #2
 8004590:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2201      	movs	r2, #1
 8004596:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	f003 0303 	and.w	r3, r3, #3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d003      	beq.n	80045ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f9b5 	bl	8004916 <HAL_TIM_IC_CaptureCallback>
 80045ac:	e005      	b.n	80045ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 f9a7 	bl	8004902 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 f9b8 	bl	800492a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	f003 0304 	and.w	r3, r3, #4
 80045ca:	2b04      	cmp	r3, #4
 80045cc:	d122      	bne.n	8004614 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	f003 0304 	and.w	r3, r3, #4
 80045d8:	2b04      	cmp	r3, #4
 80045da:	d11b      	bne.n	8004614 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f06f 0204 	mvn.w	r2, #4
 80045e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2202      	movs	r2, #2
 80045ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d003      	beq.n	8004602 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 f98b 	bl	8004916 <HAL_TIM_IC_CaptureCallback>
 8004600:	e005      	b.n	800460e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f97d 	bl	8004902 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 f98e 	bl	800492a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	f003 0308 	and.w	r3, r3, #8
 800461e:	2b08      	cmp	r3, #8
 8004620:	d122      	bne.n	8004668 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	f003 0308 	and.w	r3, r3, #8
 800462c:	2b08      	cmp	r3, #8
 800462e:	d11b      	bne.n	8004668 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f06f 0208 	mvn.w	r2, #8
 8004638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2204      	movs	r2, #4
 800463e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	69db      	ldr	r3, [r3, #28]
 8004646:	f003 0303 	and.w	r3, r3, #3
 800464a:	2b00      	cmp	r3, #0
 800464c:	d003      	beq.n	8004656 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 f961 	bl	8004916 <HAL_TIM_IC_CaptureCallback>
 8004654:	e005      	b.n	8004662 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 f953 	bl	8004902 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 f964 	bl	800492a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	f003 0310 	and.w	r3, r3, #16
 8004672:	2b10      	cmp	r3, #16
 8004674:	d122      	bne.n	80046bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	f003 0310 	and.w	r3, r3, #16
 8004680:	2b10      	cmp	r3, #16
 8004682:	d11b      	bne.n	80046bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f06f 0210 	mvn.w	r2, #16
 800468c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2208      	movs	r2, #8
 8004692:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	69db      	ldr	r3, [r3, #28]
 800469a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d003      	beq.n	80046aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 f937 	bl	8004916 <HAL_TIM_IC_CaptureCallback>
 80046a8:	e005      	b.n	80046b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 f929 	bl	8004902 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f000 f93a 	bl	800492a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d10e      	bne.n	80046e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	f003 0301 	and.w	r3, r3, #1
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d107      	bne.n	80046e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f06f 0201 	mvn.w	r2, #1
 80046e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f7fc fc84 	bl	8000ff0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f2:	2b80      	cmp	r3, #128	; 0x80
 80046f4:	d10e      	bne.n	8004714 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004700:	2b80      	cmp	r3, #128	; 0x80
 8004702:	d107      	bne.n	8004714 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800470c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 fae0 	bl	8004cd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800471e:	2b40      	cmp	r3, #64	; 0x40
 8004720:	d10e      	bne.n	8004740 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800472c:	2b40      	cmp	r3, #64	; 0x40
 800472e:	d107      	bne.n	8004740 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f8ff 	bl	800493e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	f003 0320 	and.w	r3, r3, #32
 800474a:	2b20      	cmp	r3, #32
 800474c:	d10e      	bne.n	800476c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	f003 0320 	and.w	r3, r3, #32
 8004758:	2b20      	cmp	r3, #32
 800475a:	d107      	bne.n	800476c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f06f 0220 	mvn.w	r2, #32
 8004764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 faaa 	bl	8004cc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800476c:	bf00      	nop
 800476e:	3708      	adds	r7, #8
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800477e:	2300      	movs	r3, #0
 8004780:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004788:	2b01      	cmp	r3, #1
 800478a:	d101      	bne.n	8004790 <HAL_TIM_ConfigClockSource+0x1c>
 800478c:	2302      	movs	r3, #2
 800478e:	e0b4      	b.n	80048fa <HAL_TIM_ConfigClockSource+0x186>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2202      	movs	r2, #2
 800479c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80047ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68ba      	ldr	r2, [r7, #8]
 80047be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047c8:	d03e      	beq.n	8004848 <HAL_TIM_ConfigClockSource+0xd4>
 80047ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047ce:	f200 8087 	bhi.w	80048e0 <HAL_TIM_ConfigClockSource+0x16c>
 80047d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047d6:	f000 8086 	beq.w	80048e6 <HAL_TIM_ConfigClockSource+0x172>
 80047da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047de:	d87f      	bhi.n	80048e0 <HAL_TIM_ConfigClockSource+0x16c>
 80047e0:	2b70      	cmp	r3, #112	; 0x70
 80047e2:	d01a      	beq.n	800481a <HAL_TIM_ConfigClockSource+0xa6>
 80047e4:	2b70      	cmp	r3, #112	; 0x70
 80047e6:	d87b      	bhi.n	80048e0 <HAL_TIM_ConfigClockSource+0x16c>
 80047e8:	2b60      	cmp	r3, #96	; 0x60
 80047ea:	d050      	beq.n	800488e <HAL_TIM_ConfigClockSource+0x11a>
 80047ec:	2b60      	cmp	r3, #96	; 0x60
 80047ee:	d877      	bhi.n	80048e0 <HAL_TIM_ConfigClockSource+0x16c>
 80047f0:	2b50      	cmp	r3, #80	; 0x50
 80047f2:	d03c      	beq.n	800486e <HAL_TIM_ConfigClockSource+0xfa>
 80047f4:	2b50      	cmp	r3, #80	; 0x50
 80047f6:	d873      	bhi.n	80048e0 <HAL_TIM_ConfigClockSource+0x16c>
 80047f8:	2b40      	cmp	r3, #64	; 0x40
 80047fa:	d058      	beq.n	80048ae <HAL_TIM_ConfigClockSource+0x13a>
 80047fc:	2b40      	cmp	r3, #64	; 0x40
 80047fe:	d86f      	bhi.n	80048e0 <HAL_TIM_ConfigClockSource+0x16c>
 8004800:	2b30      	cmp	r3, #48	; 0x30
 8004802:	d064      	beq.n	80048ce <HAL_TIM_ConfigClockSource+0x15a>
 8004804:	2b30      	cmp	r3, #48	; 0x30
 8004806:	d86b      	bhi.n	80048e0 <HAL_TIM_ConfigClockSource+0x16c>
 8004808:	2b20      	cmp	r3, #32
 800480a:	d060      	beq.n	80048ce <HAL_TIM_ConfigClockSource+0x15a>
 800480c:	2b20      	cmp	r3, #32
 800480e:	d867      	bhi.n	80048e0 <HAL_TIM_ConfigClockSource+0x16c>
 8004810:	2b00      	cmp	r3, #0
 8004812:	d05c      	beq.n	80048ce <HAL_TIM_ConfigClockSource+0x15a>
 8004814:	2b10      	cmp	r3, #16
 8004816:	d05a      	beq.n	80048ce <HAL_TIM_ConfigClockSource+0x15a>
 8004818:	e062      	b.n	80048e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6818      	ldr	r0, [r3, #0]
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	6899      	ldr	r1, [r3, #8]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	685a      	ldr	r2, [r3, #4]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	f000 f9ad 	bl	8004b88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800483c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68ba      	ldr	r2, [r7, #8]
 8004844:	609a      	str	r2, [r3, #8]
      break;
 8004846:	e04f      	b.n	80048e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6818      	ldr	r0, [r3, #0]
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	6899      	ldr	r1, [r3, #8]
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	685a      	ldr	r2, [r3, #4]
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	f000 f996 	bl	8004b88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	689a      	ldr	r2, [r3, #8]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800486a:	609a      	str	r2, [r3, #8]
      break;
 800486c:	e03c      	b.n	80048e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6818      	ldr	r0, [r3, #0]
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	6859      	ldr	r1, [r3, #4]
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	461a      	mov	r2, r3
 800487c:	f000 f90a 	bl	8004a94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2150      	movs	r1, #80	; 0x50
 8004886:	4618      	mov	r0, r3
 8004888:	f000 f963 	bl	8004b52 <TIM_ITRx_SetConfig>
      break;
 800488c:	e02c      	b.n	80048e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6818      	ldr	r0, [r3, #0]
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	6859      	ldr	r1, [r3, #4]
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	461a      	mov	r2, r3
 800489c:	f000 f929 	bl	8004af2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2160      	movs	r1, #96	; 0x60
 80048a6:	4618      	mov	r0, r3
 80048a8:	f000 f953 	bl	8004b52 <TIM_ITRx_SetConfig>
      break;
 80048ac:	e01c      	b.n	80048e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6818      	ldr	r0, [r3, #0]
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	6859      	ldr	r1, [r3, #4]
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	461a      	mov	r2, r3
 80048bc:	f000 f8ea 	bl	8004a94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2140      	movs	r1, #64	; 0x40
 80048c6:	4618      	mov	r0, r3
 80048c8:	f000 f943 	bl	8004b52 <TIM_ITRx_SetConfig>
      break;
 80048cc:	e00c      	b.n	80048e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4619      	mov	r1, r3
 80048d8:	4610      	mov	r0, r2
 80048da:	f000 f93a 	bl	8004b52 <TIM_ITRx_SetConfig>
      break;
 80048de:	e003      	b.n	80048e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	73fb      	strb	r3, [r7, #15]
      break;
 80048e4:	e000      	b.n	80048e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80048e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80048f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3710      	adds	r7, #16
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}

08004902 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004902:	b480      	push	{r7}
 8004904:	b083      	sub	sp, #12
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800490a:	bf00      	nop
 800490c:	370c      	adds	r7, #12
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr

08004916 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004916:	b480      	push	{r7}
 8004918:	b083      	sub	sp, #12
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800491e:	bf00      	nop
 8004920:	370c      	adds	r7, #12
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr

0800492a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800492a:	b480      	push	{r7}
 800492c:	b083      	sub	sp, #12
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004932:	bf00      	nop
 8004934:	370c      	adds	r7, #12
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800493e:	b480      	push	{r7}
 8004940:	b083      	sub	sp, #12
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004946:	bf00      	nop
 8004948:	370c      	adds	r7, #12
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
	...

08004954 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004954:	b480      	push	{r7}
 8004956:	b085      	sub	sp, #20
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a40      	ldr	r2, [pc, #256]	; (8004a68 <TIM_Base_SetConfig+0x114>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d013      	beq.n	8004994 <TIM_Base_SetConfig+0x40>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004972:	d00f      	beq.n	8004994 <TIM_Base_SetConfig+0x40>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a3d      	ldr	r2, [pc, #244]	; (8004a6c <TIM_Base_SetConfig+0x118>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d00b      	beq.n	8004994 <TIM_Base_SetConfig+0x40>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a3c      	ldr	r2, [pc, #240]	; (8004a70 <TIM_Base_SetConfig+0x11c>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d007      	beq.n	8004994 <TIM_Base_SetConfig+0x40>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a3b      	ldr	r2, [pc, #236]	; (8004a74 <TIM_Base_SetConfig+0x120>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d003      	beq.n	8004994 <TIM_Base_SetConfig+0x40>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a3a      	ldr	r2, [pc, #232]	; (8004a78 <TIM_Base_SetConfig+0x124>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d108      	bne.n	80049a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800499a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a2f      	ldr	r2, [pc, #188]	; (8004a68 <TIM_Base_SetConfig+0x114>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d02b      	beq.n	8004a06 <TIM_Base_SetConfig+0xb2>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049b4:	d027      	beq.n	8004a06 <TIM_Base_SetConfig+0xb2>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a2c      	ldr	r2, [pc, #176]	; (8004a6c <TIM_Base_SetConfig+0x118>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d023      	beq.n	8004a06 <TIM_Base_SetConfig+0xb2>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a2b      	ldr	r2, [pc, #172]	; (8004a70 <TIM_Base_SetConfig+0x11c>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d01f      	beq.n	8004a06 <TIM_Base_SetConfig+0xb2>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a2a      	ldr	r2, [pc, #168]	; (8004a74 <TIM_Base_SetConfig+0x120>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d01b      	beq.n	8004a06 <TIM_Base_SetConfig+0xb2>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a29      	ldr	r2, [pc, #164]	; (8004a78 <TIM_Base_SetConfig+0x124>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d017      	beq.n	8004a06 <TIM_Base_SetConfig+0xb2>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a28      	ldr	r2, [pc, #160]	; (8004a7c <TIM_Base_SetConfig+0x128>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d013      	beq.n	8004a06 <TIM_Base_SetConfig+0xb2>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a27      	ldr	r2, [pc, #156]	; (8004a80 <TIM_Base_SetConfig+0x12c>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d00f      	beq.n	8004a06 <TIM_Base_SetConfig+0xb2>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a26      	ldr	r2, [pc, #152]	; (8004a84 <TIM_Base_SetConfig+0x130>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d00b      	beq.n	8004a06 <TIM_Base_SetConfig+0xb2>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a25      	ldr	r2, [pc, #148]	; (8004a88 <TIM_Base_SetConfig+0x134>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d007      	beq.n	8004a06 <TIM_Base_SetConfig+0xb2>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a24      	ldr	r2, [pc, #144]	; (8004a8c <TIM_Base_SetConfig+0x138>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d003      	beq.n	8004a06 <TIM_Base_SetConfig+0xb2>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a23      	ldr	r2, [pc, #140]	; (8004a90 <TIM_Base_SetConfig+0x13c>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d108      	bne.n	8004a18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	689a      	ldr	r2, [r3, #8]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a0a      	ldr	r2, [pc, #40]	; (8004a68 <TIM_Base_SetConfig+0x114>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d003      	beq.n	8004a4c <TIM_Base_SetConfig+0xf8>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a0c      	ldr	r2, [pc, #48]	; (8004a78 <TIM_Base_SetConfig+0x124>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d103      	bne.n	8004a54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	691a      	ldr	r2, [r3, #16]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	615a      	str	r2, [r3, #20]
}
 8004a5a:	bf00      	nop
 8004a5c:	3714      	adds	r7, #20
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	40010000 	.word	0x40010000
 8004a6c:	40000400 	.word	0x40000400
 8004a70:	40000800 	.word	0x40000800
 8004a74:	40000c00 	.word	0x40000c00
 8004a78:	40010400 	.word	0x40010400
 8004a7c:	40014000 	.word	0x40014000
 8004a80:	40014400 	.word	0x40014400
 8004a84:	40014800 	.word	0x40014800
 8004a88:	40001800 	.word	0x40001800
 8004a8c:	40001c00 	.word	0x40001c00
 8004a90:	40002000 	.word	0x40002000

08004a94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b087      	sub	sp, #28
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6a1b      	ldr	r3, [r3, #32]
 8004aa4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6a1b      	ldr	r3, [r3, #32]
 8004aaa:	f023 0201 	bic.w	r2, r3, #1
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004abe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	011b      	lsls	r3, r3, #4
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	f023 030a 	bic.w	r3, r3, #10
 8004ad0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	693a      	ldr	r2, [r7, #16]
 8004ade:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	621a      	str	r2, [r3, #32]
}
 8004ae6:	bf00      	nop
 8004ae8:	371c      	adds	r7, #28
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr

08004af2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004af2:	b480      	push	{r7}
 8004af4:	b087      	sub	sp, #28
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	60f8      	str	r0, [r7, #12]
 8004afa:	60b9      	str	r1, [r7, #8]
 8004afc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6a1b      	ldr	r3, [r3, #32]
 8004b02:	f023 0210 	bic.w	r2, r3, #16
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6a1b      	ldr	r3, [r3, #32]
 8004b14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	031b      	lsls	r3, r3, #12
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b2e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	011b      	lsls	r3, r3, #4
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	697a      	ldr	r2, [r7, #20]
 8004b3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	693a      	ldr	r2, [r7, #16]
 8004b44:	621a      	str	r2, [r3, #32]
}
 8004b46:	bf00      	nop
 8004b48:	371c      	adds	r7, #28
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr

08004b52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b52:	b480      	push	{r7}
 8004b54:	b085      	sub	sp, #20
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
 8004b5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b6a:	683a      	ldr	r2, [r7, #0]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	f043 0307 	orr.w	r3, r3, #7
 8004b74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	609a      	str	r2, [r3, #8]
}
 8004b7c:	bf00      	nop
 8004b7e:	3714      	adds	r7, #20
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b087      	sub	sp, #28
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	607a      	str	r2, [r7, #4]
 8004b94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ba2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	021a      	lsls	r2, r3, #8
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	431a      	orrs	r2, r3
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	697a      	ldr	r2, [r7, #20]
 8004bba:	609a      	str	r2, [r3, #8]
}
 8004bbc:	bf00      	nop
 8004bbe:	371c      	adds	r7, #28
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d101      	bne.n	8004be0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bdc:	2302      	movs	r3, #2
 8004bde:	e05a      	b.n	8004c96 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2202      	movs	r2, #2
 8004bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a21      	ldr	r2, [pc, #132]	; (8004ca4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d022      	beq.n	8004c6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c2c:	d01d      	beq.n	8004c6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a1d      	ldr	r2, [pc, #116]	; (8004ca8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d018      	beq.n	8004c6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a1b      	ldr	r2, [pc, #108]	; (8004cac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d013      	beq.n	8004c6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a1a      	ldr	r2, [pc, #104]	; (8004cb0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d00e      	beq.n	8004c6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a18      	ldr	r2, [pc, #96]	; (8004cb4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d009      	beq.n	8004c6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a17      	ldr	r2, [pc, #92]	; (8004cb8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d004      	beq.n	8004c6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a15      	ldr	r2, [pc, #84]	; (8004cbc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d10c      	bne.n	8004c84 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	68ba      	ldr	r2, [r7, #8]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68ba      	ldr	r2, [r7, #8]
 8004c82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3714      	adds	r7, #20
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	40010000 	.word	0x40010000
 8004ca8:	40000400 	.word	0x40000400
 8004cac:	40000800 	.word	0x40000800
 8004cb0:	40000c00 	.word	0x40000c00
 8004cb4:	40010400 	.word	0x40010400
 8004cb8:	40014000 	.word	0x40014000
 8004cbc:	40001800 	.word	0x40001800

08004cc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004cc8:	bf00      	nop
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr

08004cd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cdc:	bf00      	nop
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d101      	bne.n	8004cfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e03f      	b.n	8004d7a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d106      	bne.n	8004d14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f7fc fd3c 	bl	800178c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2224      	movs	r2, #36	; 0x24
 8004d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68da      	ldr	r2, [r3, #12]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f000 fddf 	bl	80058f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	691a      	ldr	r2, [r3, #16]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	695a      	ldr	r2, [r3, #20]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68da      	ldr	r2, [r3, #12]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2220      	movs	r2, #32
 8004d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2220      	movs	r2, #32
 8004d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3708      	adds	r7, #8
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b08a      	sub	sp, #40	; 0x28
 8004d86:	af02      	add	r7, sp, #8
 8004d88:	60f8      	str	r0, [r7, #12]
 8004d8a:	60b9      	str	r1, [r7, #8]
 8004d8c:	603b      	str	r3, [r7, #0]
 8004d8e:	4613      	mov	r3, r2
 8004d90:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d92:	2300      	movs	r3, #0
 8004d94:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b20      	cmp	r3, #32
 8004da0:	d17c      	bne.n	8004e9c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d002      	beq.n	8004dae <HAL_UART_Transmit+0x2c>
 8004da8:	88fb      	ldrh	r3, [r7, #6]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d101      	bne.n	8004db2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e075      	b.n	8004e9e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d101      	bne.n	8004dc0 <HAL_UART_Transmit+0x3e>
 8004dbc:	2302      	movs	r3, #2
 8004dbe:	e06e      	b.n	8004e9e <HAL_UART_Transmit+0x11c>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2221      	movs	r2, #33	; 0x21
 8004dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004dd6:	f7fc feb1 	bl	8001b3c <HAL_GetTick>
 8004dda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	88fa      	ldrh	r2, [r7, #6]
 8004de0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	88fa      	ldrh	r2, [r7, #6]
 8004de6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004df0:	d108      	bne.n	8004e04 <HAL_UART_Transmit+0x82>
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d104      	bne.n	8004e04 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	61bb      	str	r3, [r7, #24]
 8004e02:	e003      	b.n	8004e0c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004e14:	e02a      	b.n	8004e6c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	9300      	str	r3, [sp, #0]
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	2180      	movs	r1, #128	; 0x80
 8004e20:	68f8      	ldr	r0, [r7, #12]
 8004e22:	f000 fb1f 	bl	8005464 <UART_WaitOnFlagUntilTimeout>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d001      	beq.n	8004e30 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e036      	b.n	8004e9e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d10b      	bne.n	8004e4e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	881b      	ldrh	r3, [r3, #0]
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	3302      	adds	r3, #2
 8004e4a:	61bb      	str	r3, [r7, #24]
 8004e4c:	e007      	b.n	8004e5e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	781a      	ldrb	r2, [r3, #0]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	3b01      	subs	r3, #1
 8004e66:	b29a      	uxth	r2, r3
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1cf      	bne.n	8004e16 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	9300      	str	r3, [sp, #0]
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	2140      	movs	r1, #64	; 0x40
 8004e80:	68f8      	ldr	r0, [r7, #12]
 8004e82:	f000 faef 	bl	8005464 <UART_WaitOnFlagUntilTimeout>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d001      	beq.n	8004e90 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e006      	b.n	8004e9e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2220      	movs	r2, #32
 8004e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	e000      	b.n	8004e9e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004e9c:	2302      	movs	r3, #2
  }
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3720      	adds	r7, #32
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}

08004ea6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	b084      	sub	sp, #16
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	60f8      	str	r0, [r7, #12]
 8004eae:	60b9      	str	r1, [r7, #8]
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	2b20      	cmp	r3, #32
 8004ebe:	d11d      	bne.n	8004efc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d002      	beq.n	8004ecc <HAL_UART_Receive_IT+0x26>
 8004ec6:	88fb      	ldrh	r3, [r7, #6]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d101      	bne.n	8004ed0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e016      	b.n	8004efe <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d101      	bne.n	8004ede <HAL_UART_Receive_IT+0x38>
 8004eda:	2302      	movs	r3, #2
 8004edc:	e00f      	b.n	8004efe <HAL_UART_Receive_IT+0x58>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004eec:	88fb      	ldrh	r3, [r7, #6]
 8004eee:	461a      	mov	r2, r3
 8004ef0:	68b9      	ldr	r1, [r7, #8]
 8004ef2:	68f8      	ldr	r0, [r7, #12]
 8004ef4:	f000 fb24 	bl	8005540 <UART_Start_Receive_IT>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	e000      	b.n	8004efe <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004efc:	2302      	movs	r3, #2
  }
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
	...

08004f08 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b0ba      	sub	sp, #232	; 0xe8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004f34:	2300      	movs	r3, #0
 8004f36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f3e:	f003 030f 	and.w	r3, r3, #15
 8004f42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004f46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d10f      	bne.n	8004f6e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f52:	f003 0320 	and.w	r3, r3, #32
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d009      	beq.n	8004f6e <HAL_UART_IRQHandler+0x66>
 8004f5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f5e:	f003 0320 	and.w	r3, r3, #32
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d003      	beq.n	8004f6e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 fc07 	bl	800577a <UART_Receive_IT>
      return;
 8004f6c:	e256      	b.n	800541c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004f6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	f000 80de 	beq.w	8005134 <HAL_UART_IRQHandler+0x22c>
 8004f78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f7c:	f003 0301 	and.w	r3, r3, #1
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d106      	bne.n	8004f92 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004f84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f88:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	f000 80d1 	beq.w	8005134 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00b      	beq.n	8004fb6 <HAL_UART_IRQHandler+0xae>
 8004f9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d005      	beq.n	8004fb6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fae:	f043 0201 	orr.w	r2, r3, #1
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fba:	f003 0304 	and.w	r3, r3, #4
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00b      	beq.n	8004fda <HAL_UART_IRQHandler+0xd2>
 8004fc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fc6:	f003 0301 	and.w	r3, r3, #1
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d005      	beq.n	8004fda <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd2:	f043 0202 	orr.w	r2, r3, #2
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fde:	f003 0302 	and.w	r3, r3, #2
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00b      	beq.n	8004ffe <HAL_UART_IRQHandler+0xf6>
 8004fe6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fea:	f003 0301 	and.w	r3, r3, #1
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d005      	beq.n	8004ffe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff6:	f043 0204 	orr.w	r2, r3, #4
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005002:	f003 0308 	and.w	r3, r3, #8
 8005006:	2b00      	cmp	r3, #0
 8005008:	d011      	beq.n	800502e <HAL_UART_IRQHandler+0x126>
 800500a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800500e:	f003 0320 	and.w	r3, r3, #32
 8005012:	2b00      	cmp	r3, #0
 8005014:	d105      	bne.n	8005022 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005016:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	2b00      	cmp	r3, #0
 8005020:	d005      	beq.n	800502e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005026:	f043 0208 	orr.w	r2, r3, #8
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005032:	2b00      	cmp	r3, #0
 8005034:	f000 81ed 	beq.w	8005412 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005038:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800503c:	f003 0320 	and.w	r3, r3, #32
 8005040:	2b00      	cmp	r3, #0
 8005042:	d008      	beq.n	8005056 <HAL_UART_IRQHandler+0x14e>
 8005044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005048:	f003 0320 	and.w	r3, r3, #32
 800504c:	2b00      	cmp	r3, #0
 800504e:	d002      	beq.n	8005056 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f000 fb92 	bl	800577a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	695b      	ldr	r3, [r3, #20]
 800505c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005060:	2b40      	cmp	r3, #64	; 0x40
 8005062:	bf0c      	ite	eq
 8005064:	2301      	moveq	r3, #1
 8005066:	2300      	movne	r3, #0
 8005068:	b2db      	uxtb	r3, r3
 800506a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005072:	f003 0308 	and.w	r3, r3, #8
 8005076:	2b00      	cmp	r3, #0
 8005078:	d103      	bne.n	8005082 <HAL_UART_IRQHandler+0x17a>
 800507a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800507e:	2b00      	cmp	r3, #0
 8005080:	d04f      	beq.n	8005122 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 fa9a 	bl	80055bc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	695b      	ldr	r3, [r3, #20]
 800508e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005092:	2b40      	cmp	r3, #64	; 0x40
 8005094:	d141      	bne.n	800511a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	3314      	adds	r3, #20
 800509c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80050a4:	e853 3f00 	ldrex	r3, [r3]
 80050a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80050ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80050b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	3314      	adds	r3, #20
 80050be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80050c2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80050c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80050ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80050d2:	e841 2300 	strex	r3, r2, [r1]
 80050d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80050da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1d9      	bne.n	8005096 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d013      	beq.n	8005112 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ee:	4a7d      	ldr	r2, [pc, #500]	; (80052e4 <HAL_UART_IRQHandler+0x3dc>)
 80050f0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f6:	4618      	mov	r0, r3
 80050f8:	f7fd fd69 	bl	8002bce <HAL_DMA_Abort_IT>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d016      	beq.n	8005130 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005106:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800510c:	4610      	mov	r0, r2
 800510e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005110:	e00e      	b.n	8005130 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 f990 	bl	8005438 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005118:	e00a      	b.n	8005130 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 f98c 	bl	8005438 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005120:	e006      	b.n	8005130 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 f988 	bl	8005438 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800512e:	e170      	b.n	8005412 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005130:	bf00      	nop
    return;
 8005132:	e16e      	b.n	8005412 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005138:	2b01      	cmp	r3, #1
 800513a:	f040 814a 	bne.w	80053d2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800513e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005142:	f003 0310 	and.w	r3, r3, #16
 8005146:	2b00      	cmp	r3, #0
 8005148:	f000 8143 	beq.w	80053d2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800514c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005150:	f003 0310 	and.w	r3, r3, #16
 8005154:	2b00      	cmp	r3, #0
 8005156:	f000 813c 	beq.w	80053d2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800515a:	2300      	movs	r3, #0
 800515c:	60bb      	str	r3, [r7, #8]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	60bb      	str	r3, [r7, #8]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	60bb      	str	r3, [r7, #8]
 800516e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	695b      	ldr	r3, [r3, #20]
 8005176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800517a:	2b40      	cmp	r3, #64	; 0x40
 800517c:	f040 80b4 	bne.w	80052e8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800518c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005190:	2b00      	cmp	r3, #0
 8005192:	f000 8140 	beq.w	8005416 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800519a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800519e:	429a      	cmp	r2, r3
 80051a0:	f080 8139 	bcs.w	8005416 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80051aa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b0:	69db      	ldr	r3, [r3, #28]
 80051b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051b6:	f000 8088 	beq.w	80052ca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	330c      	adds	r3, #12
 80051c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051c8:	e853 3f00 	ldrex	r3, [r3]
 80051cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80051d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	330c      	adds	r3, #12
 80051e2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80051e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80051ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80051f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80051f6:	e841 2300 	strex	r3, r2, [r1]
 80051fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80051fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1d9      	bne.n	80051ba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	3314      	adds	r3, #20
 800520c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005210:	e853 3f00 	ldrex	r3, [r3]
 8005214:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005216:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005218:	f023 0301 	bic.w	r3, r3, #1
 800521c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	3314      	adds	r3, #20
 8005226:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800522a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800522e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005230:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005232:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005236:	e841 2300 	strex	r3, r2, [r1]
 800523a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800523c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800523e:	2b00      	cmp	r3, #0
 8005240:	d1e1      	bne.n	8005206 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	3314      	adds	r3, #20
 8005248:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800524a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800524c:	e853 3f00 	ldrex	r3, [r3]
 8005250:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005252:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005254:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005258:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	3314      	adds	r3, #20
 8005262:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005266:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005268:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800526a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800526c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800526e:	e841 2300 	strex	r3, r2, [r1]
 8005272:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005274:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005276:	2b00      	cmp	r3, #0
 8005278:	d1e3      	bne.n	8005242 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2220      	movs	r2, #32
 800527e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	330c      	adds	r3, #12
 800528e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005290:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005292:	e853 3f00 	ldrex	r3, [r3]
 8005296:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005298:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800529a:	f023 0310 	bic.w	r3, r3, #16
 800529e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	330c      	adds	r3, #12
 80052a8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80052ac:	65ba      	str	r2, [r7, #88]	; 0x58
 80052ae:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80052b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80052b4:	e841 2300 	strex	r3, r2, [r1]
 80052b8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80052ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d1e3      	bne.n	8005288 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c4:	4618      	mov	r0, r3
 80052c6:	f7fd fc12 	bl	8002aee <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	4619      	mov	r1, r3
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 f8b6 	bl	800544c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80052e0:	e099      	b.n	8005416 <HAL_UART_IRQHandler+0x50e>
 80052e2:	bf00      	nop
 80052e4:	08005683 	.word	0x08005683
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	f000 808b 	beq.w	800541a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005304:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005308:	2b00      	cmp	r3, #0
 800530a:	f000 8086 	beq.w	800541a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	330c      	adds	r3, #12
 8005314:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005318:	e853 3f00 	ldrex	r3, [r3]
 800531c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800531e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005320:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005324:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	330c      	adds	r3, #12
 800532e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005332:	647a      	str	r2, [r7, #68]	; 0x44
 8005334:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005336:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005338:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800533a:	e841 2300 	strex	r3, r2, [r1]
 800533e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005342:	2b00      	cmp	r3, #0
 8005344:	d1e3      	bne.n	800530e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	3314      	adds	r3, #20
 800534c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005350:	e853 3f00 	ldrex	r3, [r3]
 8005354:	623b      	str	r3, [r7, #32]
   return(result);
 8005356:	6a3b      	ldr	r3, [r7, #32]
 8005358:	f023 0301 	bic.w	r3, r3, #1
 800535c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	3314      	adds	r3, #20
 8005366:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800536a:	633a      	str	r2, [r7, #48]	; 0x30
 800536c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005370:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005372:	e841 2300 	strex	r3, r2, [r1]
 8005376:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1e3      	bne.n	8005346 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2220      	movs	r2, #32
 8005382:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	330c      	adds	r3, #12
 8005392:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	e853 3f00 	ldrex	r3, [r3]
 800539a:	60fb      	str	r3, [r7, #12]
   return(result);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f023 0310 	bic.w	r3, r3, #16
 80053a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	330c      	adds	r3, #12
 80053ac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80053b0:	61fa      	str	r2, [r7, #28]
 80053b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b4:	69b9      	ldr	r1, [r7, #24]
 80053b6:	69fa      	ldr	r2, [r7, #28]
 80053b8:	e841 2300 	strex	r3, r2, [r1]
 80053bc:	617b      	str	r3, [r7, #20]
   return(result);
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d1e3      	bne.n	800538c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80053c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80053c8:	4619      	mov	r1, r3
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 f83e 	bl	800544c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80053d0:	e023      	b.n	800541a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80053d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d009      	beq.n	80053f2 <HAL_UART_IRQHandler+0x4ea>
 80053de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d003      	beq.n	80053f2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 f95d 	bl	80056aa <UART_Transmit_IT>
    return;
 80053f0:	e014      	b.n	800541c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80053f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00e      	beq.n	800541c <HAL_UART_IRQHandler+0x514>
 80053fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005406:	2b00      	cmp	r3, #0
 8005408:	d008      	beq.n	800541c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 f99d 	bl	800574a <UART_EndTransmit_IT>
    return;
 8005410:	e004      	b.n	800541c <HAL_UART_IRQHandler+0x514>
    return;
 8005412:	bf00      	nop
 8005414:	e002      	b.n	800541c <HAL_UART_IRQHandler+0x514>
      return;
 8005416:	bf00      	nop
 8005418:	e000      	b.n	800541c <HAL_UART_IRQHandler+0x514>
      return;
 800541a:	bf00      	nop
  }
}
 800541c:	37e8      	adds	r7, #232	; 0xe8
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop

08005424 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800542c:	bf00      	nop
 800542e:	370c      	adds	r7, #12
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005440:	bf00      	nop
 8005442:	370c      	adds	r7, #12
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	460b      	mov	r3, r1
 8005456:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005458:	bf00      	nop
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b090      	sub	sp, #64	; 0x40
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	603b      	str	r3, [r7, #0]
 8005470:	4613      	mov	r3, r2
 8005472:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005474:	e050      	b.n	8005518 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005476:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800547c:	d04c      	beq.n	8005518 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800547e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005480:	2b00      	cmp	r3, #0
 8005482:	d007      	beq.n	8005494 <UART_WaitOnFlagUntilTimeout+0x30>
 8005484:	f7fc fb5a 	bl	8001b3c <HAL_GetTick>
 8005488:	4602      	mov	r2, r0
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005490:	429a      	cmp	r2, r3
 8005492:	d241      	bcs.n	8005518 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	330c      	adds	r3, #12
 800549a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549e:	e853 3f00 	ldrex	r3, [r3]
 80054a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80054aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	330c      	adds	r3, #12
 80054b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80054b4:	637a      	str	r2, [r7, #52]	; 0x34
 80054b6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80054ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054bc:	e841 2300 	strex	r3, r2, [r1]
 80054c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80054c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1e5      	bne.n	8005494 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	3314      	adds	r3, #20
 80054ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	e853 3f00 	ldrex	r3, [r3]
 80054d6:	613b      	str	r3, [r7, #16]
   return(result);
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	f023 0301 	bic.w	r3, r3, #1
 80054de:	63bb      	str	r3, [r7, #56]	; 0x38
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	3314      	adds	r3, #20
 80054e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054e8:	623a      	str	r2, [r7, #32]
 80054ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ec:	69f9      	ldr	r1, [r7, #28]
 80054ee:	6a3a      	ldr	r2, [r7, #32]
 80054f0:	e841 2300 	strex	r3, r2, [r1]
 80054f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d1e5      	bne.n	80054c8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2220      	movs	r2, #32
 8005500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2220      	movs	r2, #32
 8005508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2200      	movs	r2, #0
 8005510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005514:	2303      	movs	r3, #3
 8005516:	e00f      	b.n	8005538 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	4013      	ands	r3, r2
 8005522:	68ba      	ldr	r2, [r7, #8]
 8005524:	429a      	cmp	r2, r3
 8005526:	bf0c      	ite	eq
 8005528:	2301      	moveq	r3, #1
 800552a:	2300      	movne	r3, #0
 800552c:	b2db      	uxtb	r3, r3
 800552e:	461a      	mov	r2, r3
 8005530:	79fb      	ldrb	r3, [r7, #7]
 8005532:	429a      	cmp	r2, r3
 8005534:	d09f      	beq.n	8005476 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	3740      	adds	r7, #64	; 0x40
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005540:	b480      	push	{r7}
 8005542:	b085      	sub	sp, #20
 8005544:	af00      	add	r7, sp, #0
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	4613      	mov	r3, r2
 800554c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	68ba      	ldr	r2, [r7, #8]
 8005552:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	88fa      	ldrh	r2, [r7, #6]
 8005558:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	88fa      	ldrh	r2, [r7, #6]
 800555e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2200      	movs	r2, #0
 8005564:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2222      	movs	r2, #34	; 0x22
 800556a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d007      	beq.n	800558e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68da      	ldr	r2, [r3, #12]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800558c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	695a      	ldr	r2, [r3, #20]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f042 0201 	orr.w	r2, r2, #1
 800559c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68da      	ldr	r2, [r3, #12]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f042 0220 	orr.w	r2, r2, #32
 80055ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80055ae:	2300      	movs	r3, #0
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3714      	adds	r7, #20
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055bc:	b480      	push	{r7}
 80055be:	b095      	sub	sp, #84	; 0x54
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	330c      	adds	r3, #12
 80055ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ce:	e853 3f00 	ldrex	r3, [r3]
 80055d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80055d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	330c      	adds	r3, #12
 80055e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80055e4:	643a      	str	r2, [r7, #64]	; 0x40
 80055e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80055ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055ec:	e841 2300 	strex	r3, r2, [r1]
 80055f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d1e5      	bne.n	80055c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	3314      	adds	r3, #20
 80055fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005600:	6a3b      	ldr	r3, [r7, #32]
 8005602:	e853 3f00 	ldrex	r3, [r3]
 8005606:	61fb      	str	r3, [r7, #28]
   return(result);
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	f023 0301 	bic.w	r3, r3, #1
 800560e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	3314      	adds	r3, #20
 8005616:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005618:	62fa      	str	r2, [r7, #44]	; 0x2c
 800561a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800561e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005620:	e841 2300 	strex	r3, r2, [r1]
 8005624:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005628:	2b00      	cmp	r3, #0
 800562a:	d1e5      	bne.n	80055f8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005630:	2b01      	cmp	r3, #1
 8005632:	d119      	bne.n	8005668 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	330c      	adds	r3, #12
 800563a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	e853 3f00 	ldrex	r3, [r3]
 8005642:	60bb      	str	r3, [r7, #8]
   return(result);
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	f023 0310 	bic.w	r3, r3, #16
 800564a:	647b      	str	r3, [r7, #68]	; 0x44
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	330c      	adds	r3, #12
 8005652:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005654:	61ba      	str	r2, [r7, #24]
 8005656:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005658:	6979      	ldr	r1, [r7, #20]
 800565a:	69ba      	ldr	r2, [r7, #24]
 800565c:	e841 2300 	strex	r3, r2, [r1]
 8005660:	613b      	str	r3, [r7, #16]
   return(result);
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d1e5      	bne.n	8005634 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2220      	movs	r2, #32
 800566c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005676:	bf00      	nop
 8005678:	3754      	adds	r7, #84	; 0x54
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr

08005682 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005682:	b580      	push	{r7, lr}
 8005684:	b084      	sub	sp, #16
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800568e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2200      	movs	r2, #0
 8005694:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800569c:	68f8      	ldr	r0, [r7, #12]
 800569e:	f7ff fecb 	bl	8005438 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056a2:	bf00      	nop
 80056a4:	3710      	adds	r7, #16
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}

080056aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b085      	sub	sp, #20
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	2b21      	cmp	r3, #33	; 0x21
 80056bc:	d13e      	bne.n	800573c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056c6:	d114      	bne.n	80056f2 <UART_Transmit_IT+0x48>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d110      	bne.n	80056f2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6a1b      	ldr	r3, [r3, #32]
 80056d4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	881b      	ldrh	r3, [r3, #0]
 80056da:	461a      	mov	r2, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056e4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a1b      	ldr	r3, [r3, #32]
 80056ea:	1c9a      	adds	r2, r3, #2
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	621a      	str	r2, [r3, #32]
 80056f0:	e008      	b.n	8005704 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a1b      	ldr	r3, [r3, #32]
 80056f6:	1c59      	adds	r1, r3, #1
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	6211      	str	r1, [r2, #32]
 80056fc:	781a      	ldrb	r2, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005708:	b29b      	uxth	r3, r3
 800570a:	3b01      	subs	r3, #1
 800570c:	b29b      	uxth	r3, r3
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	4619      	mov	r1, r3
 8005712:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005714:	2b00      	cmp	r3, #0
 8005716:	d10f      	bne.n	8005738 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68da      	ldr	r2, [r3, #12]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005726:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68da      	ldr	r2, [r3, #12]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005736:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005738:	2300      	movs	r3, #0
 800573a:	e000      	b.n	800573e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800573c:	2302      	movs	r3, #2
  }
}
 800573e:	4618      	mov	r0, r3
 8005740:	3714      	adds	r7, #20
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr

0800574a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800574a:	b580      	push	{r7, lr}
 800574c:	b082      	sub	sp, #8
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68da      	ldr	r2, [r3, #12]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005760:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2220      	movs	r2, #32
 8005766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f7ff fe5a 	bl	8005424 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3708      	adds	r7, #8
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}

0800577a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800577a:	b580      	push	{r7, lr}
 800577c:	b08c      	sub	sp, #48	; 0x30
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005788:	b2db      	uxtb	r3, r3
 800578a:	2b22      	cmp	r3, #34	; 0x22
 800578c:	f040 80ab 	bne.w	80058e6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005798:	d117      	bne.n	80057ca <UART_Receive_IT+0x50>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d113      	bne.n	80057ca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80057a2:	2300      	movs	r3, #0
 80057a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057aa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057b8:	b29a      	uxth	r2, r3
 80057ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057bc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c2:	1c9a      	adds	r2, r3, #2
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	629a      	str	r2, [r3, #40]	; 0x28
 80057c8:	e026      	b.n	8005818 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80057d0:	2300      	movs	r3, #0
 80057d2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057dc:	d007      	beq.n	80057ee <UART_Receive_IT+0x74>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d10a      	bne.n	80057fc <UART_Receive_IT+0x82>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d106      	bne.n	80057fc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	b2da      	uxtb	r2, r3
 80057f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f8:	701a      	strb	r2, [r3, #0]
 80057fa:	e008      	b.n	800580e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	b2db      	uxtb	r3, r3
 8005804:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005808:	b2da      	uxtb	r2, r3
 800580a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800580c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005812:	1c5a      	adds	r2, r3, #1
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800581c:	b29b      	uxth	r3, r3
 800581e:	3b01      	subs	r3, #1
 8005820:	b29b      	uxth	r3, r3
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	4619      	mov	r1, r3
 8005826:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005828:	2b00      	cmp	r3, #0
 800582a:	d15a      	bne.n	80058e2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68da      	ldr	r2, [r3, #12]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f022 0220 	bic.w	r2, r2, #32
 800583a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68da      	ldr	r2, [r3, #12]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800584a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	695a      	ldr	r2, [r3, #20]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f022 0201 	bic.w	r2, r2, #1
 800585a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2220      	movs	r2, #32
 8005860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005868:	2b01      	cmp	r3, #1
 800586a:	d135      	bne.n	80058d8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	330c      	adds	r3, #12
 8005878:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	e853 3f00 	ldrex	r3, [r3]
 8005880:	613b      	str	r3, [r7, #16]
   return(result);
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	f023 0310 	bic.w	r3, r3, #16
 8005888:	627b      	str	r3, [r7, #36]	; 0x24
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	330c      	adds	r3, #12
 8005890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005892:	623a      	str	r2, [r7, #32]
 8005894:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005896:	69f9      	ldr	r1, [r7, #28]
 8005898:	6a3a      	ldr	r2, [r7, #32]
 800589a:	e841 2300 	strex	r3, r2, [r1]
 800589e:	61bb      	str	r3, [r7, #24]
   return(result);
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d1e5      	bne.n	8005872 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0310 	and.w	r3, r3, #16
 80058b0:	2b10      	cmp	r3, #16
 80058b2:	d10a      	bne.n	80058ca <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80058b4:	2300      	movs	r3, #0
 80058b6:	60fb      	str	r3, [r7, #12]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	60fb      	str	r3, [r7, #12]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	60fb      	str	r3, [r7, #12]
 80058c8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80058ce:	4619      	mov	r1, r3
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f7ff fdbb 	bl	800544c <HAL_UARTEx_RxEventCallback>
 80058d6:	e002      	b.n	80058de <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f7fb f87b 	bl	80009d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80058de:	2300      	movs	r3, #0
 80058e0:	e002      	b.n	80058e8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80058e2:	2300      	movs	r3, #0
 80058e4:	e000      	b.n	80058e8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80058e6:	2302      	movs	r3, #2
  }
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3730      	adds	r7, #48	; 0x30
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058f4:	b0c0      	sub	sp, #256	; 0x100
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	691b      	ldr	r3, [r3, #16]
 8005904:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800590c:	68d9      	ldr	r1, [r3, #12]
 800590e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	ea40 0301 	orr.w	r3, r0, r1
 8005918:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800591a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800591e:	689a      	ldr	r2, [r3, #8]
 8005920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	431a      	orrs	r2, r3
 8005928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800592c:	695b      	ldr	r3, [r3, #20]
 800592e:	431a      	orrs	r2, r3
 8005930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005934:	69db      	ldr	r3, [r3, #28]
 8005936:	4313      	orrs	r3, r2
 8005938:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800593c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005948:	f021 010c 	bic.w	r1, r1, #12
 800594c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005956:	430b      	orrs	r3, r1
 8005958:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800595a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800596a:	6999      	ldr	r1, [r3, #24]
 800596c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	ea40 0301 	orr.w	r3, r0, r1
 8005976:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	4b8f      	ldr	r3, [pc, #572]	; (8005bbc <UART_SetConfig+0x2cc>)
 8005980:	429a      	cmp	r2, r3
 8005982:	d005      	beq.n	8005990 <UART_SetConfig+0xa0>
 8005984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	4b8d      	ldr	r3, [pc, #564]	; (8005bc0 <UART_SetConfig+0x2d0>)
 800598c:	429a      	cmp	r2, r3
 800598e:	d104      	bne.n	800599a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005990:	f7fd ff5e 	bl	8003850 <HAL_RCC_GetPCLK2Freq>
 8005994:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005998:	e003      	b.n	80059a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800599a:	f7fd ff45 	bl	8003828 <HAL_RCC_GetPCLK1Freq>
 800599e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059a6:	69db      	ldr	r3, [r3, #28]
 80059a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059ac:	f040 810c 	bne.w	8005bc8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80059b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059b4:	2200      	movs	r2, #0
 80059b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80059ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80059be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80059c2:	4622      	mov	r2, r4
 80059c4:	462b      	mov	r3, r5
 80059c6:	1891      	adds	r1, r2, r2
 80059c8:	65b9      	str	r1, [r7, #88]	; 0x58
 80059ca:	415b      	adcs	r3, r3
 80059cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80059d2:	4621      	mov	r1, r4
 80059d4:	eb12 0801 	adds.w	r8, r2, r1
 80059d8:	4629      	mov	r1, r5
 80059da:	eb43 0901 	adc.w	r9, r3, r1
 80059de:	f04f 0200 	mov.w	r2, #0
 80059e2:	f04f 0300 	mov.w	r3, #0
 80059e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80059ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059f2:	4690      	mov	r8, r2
 80059f4:	4699      	mov	r9, r3
 80059f6:	4623      	mov	r3, r4
 80059f8:	eb18 0303 	adds.w	r3, r8, r3
 80059fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005a00:	462b      	mov	r3, r5
 8005a02:	eb49 0303 	adc.w	r3, r9, r3
 8005a06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005a16:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005a1a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005a1e:	460b      	mov	r3, r1
 8005a20:	18db      	adds	r3, r3, r3
 8005a22:	653b      	str	r3, [r7, #80]	; 0x50
 8005a24:	4613      	mov	r3, r2
 8005a26:	eb42 0303 	adc.w	r3, r2, r3
 8005a2a:	657b      	str	r3, [r7, #84]	; 0x54
 8005a2c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005a30:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005a34:	f7fa fc1c 	bl	8000270 <__aeabi_uldivmod>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	460b      	mov	r3, r1
 8005a3c:	4b61      	ldr	r3, [pc, #388]	; (8005bc4 <UART_SetConfig+0x2d4>)
 8005a3e:	fba3 2302 	umull	r2, r3, r3, r2
 8005a42:	095b      	lsrs	r3, r3, #5
 8005a44:	011c      	lsls	r4, r3, #4
 8005a46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a50:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005a54:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005a58:	4642      	mov	r2, r8
 8005a5a:	464b      	mov	r3, r9
 8005a5c:	1891      	adds	r1, r2, r2
 8005a5e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005a60:	415b      	adcs	r3, r3
 8005a62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a64:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005a68:	4641      	mov	r1, r8
 8005a6a:	eb12 0a01 	adds.w	sl, r2, r1
 8005a6e:	4649      	mov	r1, r9
 8005a70:	eb43 0b01 	adc.w	fp, r3, r1
 8005a74:	f04f 0200 	mov.w	r2, #0
 8005a78:	f04f 0300 	mov.w	r3, #0
 8005a7c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005a80:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005a84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a88:	4692      	mov	sl, r2
 8005a8a:	469b      	mov	fp, r3
 8005a8c:	4643      	mov	r3, r8
 8005a8e:	eb1a 0303 	adds.w	r3, sl, r3
 8005a92:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a96:	464b      	mov	r3, r9
 8005a98:	eb4b 0303 	adc.w	r3, fp, r3
 8005a9c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005aac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005ab0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	18db      	adds	r3, r3, r3
 8005ab8:	643b      	str	r3, [r7, #64]	; 0x40
 8005aba:	4613      	mov	r3, r2
 8005abc:	eb42 0303 	adc.w	r3, r2, r3
 8005ac0:	647b      	str	r3, [r7, #68]	; 0x44
 8005ac2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005ac6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005aca:	f7fa fbd1 	bl	8000270 <__aeabi_uldivmod>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	4611      	mov	r1, r2
 8005ad4:	4b3b      	ldr	r3, [pc, #236]	; (8005bc4 <UART_SetConfig+0x2d4>)
 8005ad6:	fba3 2301 	umull	r2, r3, r3, r1
 8005ada:	095b      	lsrs	r3, r3, #5
 8005adc:	2264      	movs	r2, #100	; 0x64
 8005ade:	fb02 f303 	mul.w	r3, r2, r3
 8005ae2:	1acb      	subs	r3, r1, r3
 8005ae4:	00db      	lsls	r3, r3, #3
 8005ae6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005aea:	4b36      	ldr	r3, [pc, #216]	; (8005bc4 <UART_SetConfig+0x2d4>)
 8005aec:	fba3 2302 	umull	r2, r3, r3, r2
 8005af0:	095b      	lsrs	r3, r3, #5
 8005af2:	005b      	lsls	r3, r3, #1
 8005af4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005af8:	441c      	add	r4, r3
 8005afa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005afe:	2200      	movs	r2, #0
 8005b00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b04:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005b08:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005b0c:	4642      	mov	r2, r8
 8005b0e:	464b      	mov	r3, r9
 8005b10:	1891      	adds	r1, r2, r2
 8005b12:	63b9      	str	r1, [r7, #56]	; 0x38
 8005b14:	415b      	adcs	r3, r3
 8005b16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005b1c:	4641      	mov	r1, r8
 8005b1e:	1851      	adds	r1, r2, r1
 8005b20:	6339      	str	r1, [r7, #48]	; 0x30
 8005b22:	4649      	mov	r1, r9
 8005b24:	414b      	adcs	r3, r1
 8005b26:	637b      	str	r3, [r7, #52]	; 0x34
 8005b28:	f04f 0200 	mov.w	r2, #0
 8005b2c:	f04f 0300 	mov.w	r3, #0
 8005b30:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005b34:	4659      	mov	r1, fp
 8005b36:	00cb      	lsls	r3, r1, #3
 8005b38:	4651      	mov	r1, sl
 8005b3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b3e:	4651      	mov	r1, sl
 8005b40:	00ca      	lsls	r2, r1, #3
 8005b42:	4610      	mov	r0, r2
 8005b44:	4619      	mov	r1, r3
 8005b46:	4603      	mov	r3, r0
 8005b48:	4642      	mov	r2, r8
 8005b4a:	189b      	adds	r3, r3, r2
 8005b4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b50:	464b      	mov	r3, r9
 8005b52:	460a      	mov	r2, r1
 8005b54:	eb42 0303 	adc.w	r3, r2, r3
 8005b58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005b68:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005b6c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005b70:	460b      	mov	r3, r1
 8005b72:	18db      	adds	r3, r3, r3
 8005b74:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b76:	4613      	mov	r3, r2
 8005b78:	eb42 0303 	adc.w	r3, r2, r3
 8005b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b82:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005b86:	f7fa fb73 	bl	8000270 <__aeabi_uldivmod>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	460b      	mov	r3, r1
 8005b8e:	4b0d      	ldr	r3, [pc, #52]	; (8005bc4 <UART_SetConfig+0x2d4>)
 8005b90:	fba3 1302 	umull	r1, r3, r3, r2
 8005b94:	095b      	lsrs	r3, r3, #5
 8005b96:	2164      	movs	r1, #100	; 0x64
 8005b98:	fb01 f303 	mul.w	r3, r1, r3
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	00db      	lsls	r3, r3, #3
 8005ba0:	3332      	adds	r3, #50	; 0x32
 8005ba2:	4a08      	ldr	r2, [pc, #32]	; (8005bc4 <UART_SetConfig+0x2d4>)
 8005ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba8:	095b      	lsrs	r3, r3, #5
 8005baa:	f003 0207 	and.w	r2, r3, #7
 8005bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4422      	add	r2, r4
 8005bb6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005bb8:	e105      	b.n	8005dc6 <UART_SetConfig+0x4d6>
 8005bba:	bf00      	nop
 8005bbc:	40011000 	.word	0x40011000
 8005bc0:	40011400 	.word	0x40011400
 8005bc4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005bc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005bd2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005bd6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005bda:	4642      	mov	r2, r8
 8005bdc:	464b      	mov	r3, r9
 8005bde:	1891      	adds	r1, r2, r2
 8005be0:	6239      	str	r1, [r7, #32]
 8005be2:	415b      	adcs	r3, r3
 8005be4:	627b      	str	r3, [r7, #36]	; 0x24
 8005be6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005bea:	4641      	mov	r1, r8
 8005bec:	1854      	adds	r4, r2, r1
 8005bee:	4649      	mov	r1, r9
 8005bf0:	eb43 0501 	adc.w	r5, r3, r1
 8005bf4:	f04f 0200 	mov.w	r2, #0
 8005bf8:	f04f 0300 	mov.w	r3, #0
 8005bfc:	00eb      	lsls	r3, r5, #3
 8005bfe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c02:	00e2      	lsls	r2, r4, #3
 8005c04:	4614      	mov	r4, r2
 8005c06:	461d      	mov	r5, r3
 8005c08:	4643      	mov	r3, r8
 8005c0a:	18e3      	adds	r3, r4, r3
 8005c0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005c10:	464b      	mov	r3, r9
 8005c12:	eb45 0303 	adc.w	r3, r5, r3
 8005c16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005c26:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005c2a:	f04f 0200 	mov.w	r2, #0
 8005c2e:	f04f 0300 	mov.w	r3, #0
 8005c32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005c36:	4629      	mov	r1, r5
 8005c38:	008b      	lsls	r3, r1, #2
 8005c3a:	4621      	mov	r1, r4
 8005c3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c40:	4621      	mov	r1, r4
 8005c42:	008a      	lsls	r2, r1, #2
 8005c44:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005c48:	f7fa fb12 	bl	8000270 <__aeabi_uldivmod>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	460b      	mov	r3, r1
 8005c50:	4b60      	ldr	r3, [pc, #384]	; (8005dd4 <UART_SetConfig+0x4e4>)
 8005c52:	fba3 2302 	umull	r2, r3, r3, r2
 8005c56:	095b      	lsrs	r3, r3, #5
 8005c58:	011c      	lsls	r4, r3, #4
 8005c5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005c64:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005c68:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005c6c:	4642      	mov	r2, r8
 8005c6e:	464b      	mov	r3, r9
 8005c70:	1891      	adds	r1, r2, r2
 8005c72:	61b9      	str	r1, [r7, #24]
 8005c74:	415b      	adcs	r3, r3
 8005c76:	61fb      	str	r3, [r7, #28]
 8005c78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c7c:	4641      	mov	r1, r8
 8005c7e:	1851      	adds	r1, r2, r1
 8005c80:	6139      	str	r1, [r7, #16]
 8005c82:	4649      	mov	r1, r9
 8005c84:	414b      	adcs	r3, r1
 8005c86:	617b      	str	r3, [r7, #20]
 8005c88:	f04f 0200 	mov.w	r2, #0
 8005c8c:	f04f 0300 	mov.w	r3, #0
 8005c90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c94:	4659      	mov	r1, fp
 8005c96:	00cb      	lsls	r3, r1, #3
 8005c98:	4651      	mov	r1, sl
 8005c9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c9e:	4651      	mov	r1, sl
 8005ca0:	00ca      	lsls	r2, r1, #3
 8005ca2:	4610      	mov	r0, r2
 8005ca4:	4619      	mov	r1, r3
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	4642      	mov	r2, r8
 8005caa:	189b      	adds	r3, r3, r2
 8005cac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005cb0:	464b      	mov	r3, r9
 8005cb2:	460a      	mov	r2, r1
 8005cb4:	eb42 0303 	adc.w	r3, r2, r3
 8005cb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	67bb      	str	r3, [r7, #120]	; 0x78
 8005cc6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005cc8:	f04f 0200 	mov.w	r2, #0
 8005ccc:	f04f 0300 	mov.w	r3, #0
 8005cd0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005cd4:	4649      	mov	r1, r9
 8005cd6:	008b      	lsls	r3, r1, #2
 8005cd8:	4641      	mov	r1, r8
 8005cda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cde:	4641      	mov	r1, r8
 8005ce0:	008a      	lsls	r2, r1, #2
 8005ce2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005ce6:	f7fa fac3 	bl	8000270 <__aeabi_uldivmod>
 8005cea:	4602      	mov	r2, r0
 8005cec:	460b      	mov	r3, r1
 8005cee:	4b39      	ldr	r3, [pc, #228]	; (8005dd4 <UART_SetConfig+0x4e4>)
 8005cf0:	fba3 1302 	umull	r1, r3, r3, r2
 8005cf4:	095b      	lsrs	r3, r3, #5
 8005cf6:	2164      	movs	r1, #100	; 0x64
 8005cf8:	fb01 f303 	mul.w	r3, r1, r3
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	011b      	lsls	r3, r3, #4
 8005d00:	3332      	adds	r3, #50	; 0x32
 8005d02:	4a34      	ldr	r2, [pc, #208]	; (8005dd4 <UART_SetConfig+0x4e4>)
 8005d04:	fba2 2303 	umull	r2, r3, r2, r3
 8005d08:	095b      	lsrs	r3, r3, #5
 8005d0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d0e:	441c      	add	r4, r3
 8005d10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d14:	2200      	movs	r2, #0
 8005d16:	673b      	str	r3, [r7, #112]	; 0x70
 8005d18:	677a      	str	r2, [r7, #116]	; 0x74
 8005d1a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005d1e:	4642      	mov	r2, r8
 8005d20:	464b      	mov	r3, r9
 8005d22:	1891      	adds	r1, r2, r2
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	415b      	adcs	r3, r3
 8005d28:	60fb      	str	r3, [r7, #12]
 8005d2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d2e:	4641      	mov	r1, r8
 8005d30:	1851      	adds	r1, r2, r1
 8005d32:	6039      	str	r1, [r7, #0]
 8005d34:	4649      	mov	r1, r9
 8005d36:	414b      	adcs	r3, r1
 8005d38:	607b      	str	r3, [r7, #4]
 8005d3a:	f04f 0200 	mov.w	r2, #0
 8005d3e:	f04f 0300 	mov.w	r3, #0
 8005d42:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005d46:	4659      	mov	r1, fp
 8005d48:	00cb      	lsls	r3, r1, #3
 8005d4a:	4651      	mov	r1, sl
 8005d4c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d50:	4651      	mov	r1, sl
 8005d52:	00ca      	lsls	r2, r1, #3
 8005d54:	4610      	mov	r0, r2
 8005d56:	4619      	mov	r1, r3
 8005d58:	4603      	mov	r3, r0
 8005d5a:	4642      	mov	r2, r8
 8005d5c:	189b      	adds	r3, r3, r2
 8005d5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d60:	464b      	mov	r3, r9
 8005d62:	460a      	mov	r2, r1
 8005d64:	eb42 0303 	adc.w	r3, r2, r3
 8005d68:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	663b      	str	r3, [r7, #96]	; 0x60
 8005d74:	667a      	str	r2, [r7, #100]	; 0x64
 8005d76:	f04f 0200 	mov.w	r2, #0
 8005d7a:	f04f 0300 	mov.w	r3, #0
 8005d7e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005d82:	4649      	mov	r1, r9
 8005d84:	008b      	lsls	r3, r1, #2
 8005d86:	4641      	mov	r1, r8
 8005d88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d8c:	4641      	mov	r1, r8
 8005d8e:	008a      	lsls	r2, r1, #2
 8005d90:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005d94:	f7fa fa6c 	bl	8000270 <__aeabi_uldivmod>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	460b      	mov	r3, r1
 8005d9c:	4b0d      	ldr	r3, [pc, #52]	; (8005dd4 <UART_SetConfig+0x4e4>)
 8005d9e:	fba3 1302 	umull	r1, r3, r3, r2
 8005da2:	095b      	lsrs	r3, r3, #5
 8005da4:	2164      	movs	r1, #100	; 0x64
 8005da6:	fb01 f303 	mul.w	r3, r1, r3
 8005daa:	1ad3      	subs	r3, r2, r3
 8005dac:	011b      	lsls	r3, r3, #4
 8005dae:	3332      	adds	r3, #50	; 0x32
 8005db0:	4a08      	ldr	r2, [pc, #32]	; (8005dd4 <UART_SetConfig+0x4e4>)
 8005db2:	fba2 2303 	umull	r2, r3, r2, r3
 8005db6:	095b      	lsrs	r3, r3, #5
 8005db8:	f003 020f 	and.w	r2, r3, #15
 8005dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4422      	add	r2, r4
 8005dc4:	609a      	str	r2, [r3, #8]
}
 8005dc6:	bf00      	nop
 8005dc8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005dd2:	bf00      	nop
 8005dd4:	51eb851f 	.word	0x51eb851f

08005dd8 <__errno>:
 8005dd8:	4b01      	ldr	r3, [pc, #4]	; (8005de0 <__errno+0x8>)
 8005dda:	6818      	ldr	r0, [r3, #0]
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	20000014 	.word	0x20000014

08005de4 <__libc_init_array>:
 8005de4:	b570      	push	{r4, r5, r6, lr}
 8005de6:	4d0d      	ldr	r5, [pc, #52]	; (8005e1c <__libc_init_array+0x38>)
 8005de8:	4c0d      	ldr	r4, [pc, #52]	; (8005e20 <__libc_init_array+0x3c>)
 8005dea:	1b64      	subs	r4, r4, r5
 8005dec:	10a4      	asrs	r4, r4, #2
 8005dee:	2600      	movs	r6, #0
 8005df0:	42a6      	cmp	r6, r4
 8005df2:	d109      	bne.n	8005e08 <__libc_init_array+0x24>
 8005df4:	4d0b      	ldr	r5, [pc, #44]	; (8005e24 <__libc_init_array+0x40>)
 8005df6:	4c0c      	ldr	r4, [pc, #48]	; (8005e28 <__libc_init_array+0x44>)
 8005df8:	f000 fc8e 	bl	8006718 <_init>
 8005dfc:	1b64      	subs	r4, r4, r5
 8005dfe:	10a4      	asrs	r4, r4, #2
 8005e00:	2600      	movs	r6, #0
 8005e02:	42a6      	cmp	r6, r4
 8005e04:	d105      	bne.n	8005e12 <__libc_init_array+0x2e>
 8005e06:	bd70      	pop	{r4, r5, r6, pc}
 8005e08:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e0c:	4798      	blx	r3
 8005e0e:	3601      	adds	r6, #1
 8005e10:	e7ee      	b.n	8005df0 <__libc_init_array+0xc>
 8005e12:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e16:	4798      	blx	r3
 8005e18:	3601      	adds	r6, #1
 8005e1a:	e7f2      	b.n	8005e02 <__libc_init_array+0x1e>
 8005e1c:	08007588 	.word	0x08007588
 8005e20:	08007588 	.word	0x08007588
 8005e24:	08007588 	.word	0x08007588
 8005e28:	0800758c 	.word	0x0800758c

08005e2c <memset>:
 8005e2c:	4402      	add	r2, r0
 8005e2e:	4603      	mov	r3, r0
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d100      	bne.n	8005e36 <memset+0xa>
 8005e34:	4770      	bx	lr
 8005e36:	f803 1b01 	strb.w	r1, [r3], #1
 8005e3a:	e7f9      	b.n	8005e30 <memset+0x4>

08005e3c <siprintf>:
 8005e3c:	b40e      	push	{r1, r2, r3}
 8005e3e:	b500      	push	{lr}
 8005e40:	b09c      	sub	sp, #112	; 0x70
 8005e42:	ab1d      	add	r3, sp, #116	; 0x74
 8005e44:	9002      	str	r0, [sp, #8]
 8005e46:	9006      	str	r0, [sp, #24]
 8005e48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005e4c:	4809      	ldr	r0, [pc, #36]	; (8005e74 <siprintf+0x38>)
 8005e4e:	9107      	str	r1, [sp, #28]
 8005e50:	9104      	str	r1, [sp, #16]
 8005e52:	4909      	ldr	r1, [pc, #36]	; (8005e78 <siprintf+0x3c>)
 8005e54:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e58:	9105      	str	r1, [sp, #20]
 8005e5a:	6800      	ldr	r0, [r0, #0]
 8005e5c:	9301      	str	r3, [sp, #4]
 8005e5e:	a902      	add	r1, sp, #8
 8005e60:	f000 f868 	bl	8005f34 <_svfiprintf_r>
 8005e64:	9b02      	ldr	r3, [sp, #8]
 8005e66:	2200      	movs	r2, #0
 8005e68:	701a      	strb	r2, [r3, #0]
 8005e6a:	b01c      	add	sp, #112	; 0x70
 8005e6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e70:	b003      	add	sp, #12
 8005e72:	4770      	bx	lr
 8005e74:	20000014 	.word	0x20000014
 8005e78:	ffff0208 	.word	0xffff0208

08005e7c <__ssputs_r>:
 8005e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e80:	688e      	ldr	r6, [r1, #8]
 8005e82:	429e      	cmp	r6, r3
 8005e84:	4682      	mov	sl, r0
 8005e86:	460c      	mov	r4, r1
 8005e88:	4690      	mov	r8, r2
 8005e8a:	461f      	mov	r7, r3
 8005e8c:	d838      	bhi.n	8005f00 <__ssputs_r+0x84>
 8005e8e:	898a      	ldrh	r2, [r1, #12]
 8005e90:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005e94:	d032      	beq.n	8005efc <__ssputs_r+0x80>
 8005e96:	6825      	ldr	r5, [r4, #0]
 8005e98:	6909      	ldr	r1, [r1, #16]
 8005e9a:	eba5 0901 	sub.w	r9, r5, r1
 8005e9e:	6965      	ldr	r5, [r4, #20]
 8005ea0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005ea4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005ea8:	3301      	adds	r3, #1
 8005eaa:	444b      	add	r3, r9
 8005eac:	106d      	asrs	r5, r5, #1
 8005eae:	429d      	cmp	r5, r3
 8005eb0:	bf38      	it	cc
 8005eb2:	461d      	movcc	r5, r3
 8005eb4:	0553      	lsls	r3, r2, #21
 8005eb6:	d531      	bpl.n	8005f1c <__ssputs_r+0xa0>
 8005eb8:	4629      	mov	r1, r5
 8005eba:	f000 fb63 	bl	8006584 <_malloc_r>
 8005ebe:	4606      	mov	r6, r0
 8005ec0:	b950      	cbnz	r0, 8005ed8 <__ssputs_r+0x5c>
 8005ec2:	230c      	movs	r3, #12
 8005ec4:	f8ca 3000 	str.w	r3, [sl]
 8005ec8:	89a3      	ldrh	r3, [r4, #12]
 8005eca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ece:	81a3      	strh	r3, [r4, #12]
 8005ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ed8:	6921      	ldr	r1, [r4, #16]
 8005eda:	464a      	mov	r2, r9
 8005edc:	f000 fabe 	bl	800645c <memcpy>
 8005ee0:	89a3      	ldrh	r3, [r4, #12]
 8005ee2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005ee6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eea:	81a3      	strh	r3, [r4, #12]
 8005eec:	6126      	str	r6, [r4, #16]
 8005eee:	6165      	str	r5, [r4, #20]
 8005ef0:	444e      	add	r6, r9
 8005ef2:	eba5 0509 	sub.w	r5, r5, r9
 8005ef6:	6026      	str	r6, [r4, #0]
 8005ef8:	60a5      	str	r5, [r4, #8]
 8005efa:	463e      	mov	r6, r7
 8005efc:	42be      	cmp	r6, r7
 8005efe:	d900      	bls.n	8005f02 <__ssputs_r+0x86>
 8005f00:	463e      	mov	r6, r7
 8005f02:	6820      	ldr	r0, [r4, #0]
 8005f04:	4632      	mov	r2, r6
 8005f06:	4641      	mov	r1, r8
 8005f08:	f000 fab6 	bl	8006478 <memmove>
 8005f0c:	68a3      	ldr	r3, [r4, #8]
 8005f0e:	1b9b      	subs	r3, r3, r6
 8005f10:	60a3      	str	r3, [r4, #8]
 8005f12:	6823      	ldr	r3, [r4, #0]
 8005f14:	4433      	add	r3, r6
 8005f16:	6023      	str	r3, [r4, #0]
 8005f18:	2000      	movs	r0, #0
 8005f1a:	e7db      	b.n	8005ed4 <__ssputs_r+0x58>
 8005f1c:	462a      	mov	r2, r5
 8005f1e:	f000 fba5 	bl	800666c <_realloc_r>
 8005f22:	4606      	mov	r6, r0
 8005f24:	2800      	cmp	r0, #0
 8005f26:	d1e1      	bne.n	8005eec <__ssputs_r+0x70>
 8005f28:	6921      	ldr	r1, [r4, #16]
 8005f2a:	4650      	mov	r0, sl
 8005f2c:	f000 fabe 	bl	80064ac <_free_r>
 8005f30:	e7c7      	b.n	8005ec2 <__ssputs_r+0x46>
	...

08005f34 <_svfiprintf_r>:
 8005f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f38:	4698      	mov	r8, r3
 8005f3a:	898b      	ldrh	r3, [r1, #12]
 8005f3c:	061b      	lsls	r3, r3, #24
 8005f3e:	b09d      	sub	sp, #116	; 0x74
 8005f40:	4607      	mov	r7, r0
 8005f42:	460d      	mov	r5, r1
 8005f44:	4614      	mov	r4, r2
 8005f46:	d50e      	bpl.n	8005f66 <_svfiprintf_r+0x32>
 8005f48:	690b      	ldr	r3, [r1, #16]
 8005f4a:	b963      	cbnz	r3, 8005f66 <_svfiprintf_r+0x32>
 8005f4c:	2140      	movs	r1, #64	; 0x40
 8005f4e:	f000 fb19 	bl	8006584 <_malloc_r>
 8005f52:	6028      	str	r0, [r5, #0]
 8005f54:	6128      	str	r0, [r5, #16]
 8005f56:	b920      	cbnz	r0, 8005f62 <_svfiprintf_r+0x2e>
 8005f58:	230c      	movs	r3, #12
 8005f5a:	603b      	str	r3, [r7, #0]
 8005f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f60:	e0d1      	b.n	8006106 <_svfiprintf_r+0x1d2>
 8005f62:	2340      	movs	r3, #64	; 0x40
 8005f64:	616b      	str	r3, [r5, #20]
 8005f66:	2300      	movs	r3, #0
 8005f68:	9309      	str	r3, [sp, #36]	; 0x24
 8005f6a:	2320      	movs	r3, #32
 8005f6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f70:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f74:	2330      	movs	r3, #48	; 0x30
 8005f76:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006120 <_svfiprintf_r+0x1ec>
 8005f7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f7e:	f04f 0901 	mov.w	r9, #1
 8005f82:	4623      	mov	r3, r4
 8005f84:	469a      	mov	sl, r3
 8005f86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f8a:	b10a      	cbz	r2, 8005f90 <_svfiprintf_r+0x5c>
 8005f8c:	2a25      	cmp	r2, #37	; 0x25
 8005f8e:	d1f9      	bne.n	8005f84 <_svfiprintf_r+0x50>
 8005f90:	ebba 0b04 	subs.w	fp, sl, r4
 8005f94:	d00b      	beq.n	8005fae <_svfiprintf_r+0x7a>
 8005f96:	465b      	mov	r3, fp
 8005f98:	4622      	mov	r2, r4
 8005f9a:	4629      	mov	r1, r5
 8005f9c:	4638      	mov	r0, r7
 8005f9e:	f7ff ff6d 	bl	8005e7c <__ssputs_r>
 8005fa2:	3001      	adds	r0, #1
 8005fa4:	f000 80aa 	beq.w	80060fc <_svfiprintf_r+0x1c8>
 8005fa8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005faa:	445a      	add	r2, fp
 8005fac:	9209      	str	r2, [sp, #36]	; 0x24
 8005fae:	f89a 3000 	ldrb.w	r3, [sl]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	f000 80a2 	beq.w	80060fc <_svfiprintf_r+0x1c8>
 8005fb8:	2300      	movs	r3, #0
 8005fba:	f04f 32ff 	mov.w	r2, #4294967295
 8005fbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005fc2:	f10a 0a01 	add.w	sl, sl, #1
 8005fc6:	9304      	str	r3, [sp, #16]
 8005fc8:	9307      	str	r3, [sp, #28]
 8005fca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005fce:	931a      	str	r3, [sp, #104]	; 0x68
 8005fd0:	4654      	mov	r4, sl
 8005fd2:	2205      	movs	r2, #5
 8005fd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fd8:	4851      	ldr	r0, [pc, #324]	; (8006120 <_svfiprintf_r+0x1ec>)
 8005fda:	f7fa f8f9 	bl	80001d0 <memchr>
 8005fde:	9a04      	ldr	r2, [sp, #16]
 8005fe0:	b9d8      	cbnz	r0, 800601a <_svfiprintf_r+0xe6>
 8005fe2:	06d0      	lsls	r0, r2, #27
 8005fe4:	bf44      	itt	mi
 8005fe6:	2320      	movmi	r3, #32
 8005fe8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005fec:	0711      	lsls	r1, r2, #28
 8005fee:	bf44      	itt	mi
 8005ff0:	232b      	movmi	r3, #43	; 0x2b
 8005ff2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ff6:	f89a 3000 	ldrb.w	r3, [sl]
 8005ffa:	2b2a      	cmp	r3, #42	; 0x2a
 8005ffc:	d015      	beq.n	800602a <_svfiprintf_r+0xf6>
 8005ffe:	9a07      	ldr	r2, [sp, #28]
 8006000:	4654      	mov	r4, sl
 8006002:	2000      	movs	r0, #0
 8006004:	f04f 0c0a 	mov.w	ip, #10
 8006008:	4621      	mov	r1, r4
 800600a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800600e:	3b30      	subs	r3, #48	; 0x30
 8006010:	2b09      	cmp	r3, #9
 8006012:	d94e      	bls.n	80060b2 <_svfiprintf_r+0x17e>
 8006014:	b1b0      	cbz	r0, 8006044 <_svfiprintf_r+0x110>
 8006016:	9207      	str	r2, [sp, #28]
 8006018:	e014      	b.n	8006044 <_svfiprintf_r+0x110>
 800601a:	eba0 0308 	sub.w	r3, r0, r8
 800601e:	fa09 f303 	lsl.w	r3, r9, r3
 8006022:	4313      	orrs	r3, r2
 8006024:	9304      	str	r3, [sp, #16]
 8006026:	46a2      	mov	sl, r4
 8006028:	e7d2      	b.n	8005fd0 <_svfiprintf_r+0x9c>
 800602a:	9b03      	ldr	r3, [sp, #12]
 800602c:	1d19      	adds	r1, r3, #4
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	9103      	str	r1, [sp, #12]
 8006032:	2b00      	cmp	r3, #0
 8006034:	bfbb      	ittet	lt
 8006036:	425b      	neglt	r3, r3
 8006038:	f042 0202 	orrlt.w	r2, r2, #2
 800603c:	9307      	strge	r3, [sp, #28]
 800603e:	9307      	strlt	r3, [sp, #28]
 8006040:	bfb8      	it	lt
 8006042:	9204      	strlt	r2, [sp, #16]
 8006044:	7823      	ldrb	r3, [r4, #0]
 8006046:	2b2e      	cmp	r3, #46	; 0x2e
 8006048:	d10c      	bne.n	8006064 <_svfiprintf_r+0x130>
 800604a:	7863      	ldrb	r3, [r4, #1]
 800604c:	2b2a      	cmp	r3, #42	; 0x2a
 800604e:	d135      	bne.n	80060bc <_svfiprintf_r+0x188>
 8006050:	9b03      	ldr	r3, [sp, #12]
 8006052:	1d1a      	adds	r2, r3, #4
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	9203      	str	r2, [sp, #12]
 8006058:	2b00      	cmp	r3, #0
 800605a:	bfb8      	it	lt
 800605c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006060:	3402      	adds	r4, #2
 8006062:	9305      	str	r3, [sp, #20]
 8006064:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006130 <_svfiprintf_r+0x1fc>
 8006068:	7821      	ldrb	r1, [r4, #0]
 800606a:	2203      	movs	r2, #3
 800606c:	4650      	mov	r0, sl
 800606e:	f7fa f8af 	bl	80001d0 <memchr>
 8006072:	b140      	cbz	r0, 8006086 <_svfiprintf_r+0x152>
 8006074:	2340      	movs	r3, #64	; 0x40
 8006076:	eba0 000a 	sub.w	r0, r0, sl
 800607a:	fa03 f000 	lsl.w	r0, r3, r0
 800607e:	9b04      	ldr	r3, [sp, #16]
 8006080:	4303      	orrs	r3, r0
 8006082:	3401      	adds	r4, #1
 8006084:	9304      	str	r3, [sp, #16]
 8006086:	f814 1b01 	ldrb.w	r1, [r4], #1
 800608a:	4826      	ldr	r0, [pc, #152]	; (8006124 <_svfiprintf_r+0x1f0>)
 800608c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006090:	2206      	movs	r2, #6
 8006092:	f7fa f89d 	bl	80001d0 <memchr>
 8006096:	2800      	cmp	r0, #0
 8006098:	d038      	beq.n	800610c <_svfiprintf_r+0x1d8>
 800609a:	4b23      	ldr	r3, [pc, #140]	; (8006128 <_svfiprintf_r+0x1f4>)
 800609c:	bb1b      	cbnz	r3, 80060e6 <_svfiprintf_r+0x1b2>
 800609e:	9b03      	ldr	r3, [sp, #12]
 80060a0:	3307      	adds	r3, #7
 80060a2:	f023 0307 	bic.w	r3, r3, #7
 80060a6:	3308      	adds	r3, #8
 80060a8:	9303      	str	r3, [sp, #12]
 80060aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060ac:	4433      	add	r3, r6
 80060ae:	9309      	str	r3, [sp, #36]	; 0x24
 80060b0:	e767      	b.n	8005f82 <_svfiprintf_r+0x4e>
 80060b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80060b6:	460c      	mov	r4, r1
 80060b8:	2001      	movs	r0, #1
 80060ba:	e7a5      	b.n	8006008 <_svfiprintf_r+0xd4>
 80060bc:	2300      	movs	r3, #0
 80060be:	3401      	adds	r4, #1
 80060c0:	9305      	str	r3, [sp, #20]
 80060c2:	4619      	mov	r1, r3
 80060c4:	f04f 0c0a 	mov.w	ip, #10
 80060c8:	4620      	mov	r0, r4
 80060ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060ce:	3a30      	subs	r2, #48	; 0x30
 80060d0:	2a09      	cmp	r2, #9
 80060d2:	d903      	bls.n	80060dc <_svfiprintf_r+0x1a8>
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d0c5      	beq.n	8006064 <_svfiprintf_r+0x130>
 80060d8:	9105      	str	r1, [sp, #20]
 80060da:	e7c3      	b.n	8006064 <_svfiprintf_r+0x130>
 80060dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80060e0:	4604      	mov	r4, r0
 80060e2:	2301      	movs	r3, #1
 80060e4:	e7f0      	b.n	80060c8 <_svfiprintf_r+0x194>
 80060e6:	ab03      	add	r3, sp, #12
 80060e8:	9300      	str	r3, [sp, #0]
 80060ea:	462a      	mov	r2, r5
 80060ec:	4b0f      	ldr	r3, [pc, #60]	; (800612c <_svfiprintf_r+0x1f8>)
 80060ee:	a904      	add	r1, sp, #16
 80060f0:	4638      	mov	r0, r7
 80060f2:	f3af 8000 	nop.w
 80060f6:	1c42      	adds	r2, r0, #1
 80060f8:	4606      	mov	r6, r0
 80060fa:	d1d6      	bne.n	80060aa <_svfiprintf_r+0x176>
 80060fc:	89ab      	ldrh	r3, [r5, #12]
 80060fe:	065b      	lsls	r3, r3, #25
 8006100:	f53f af2c 	bmi.w	8005f5c <_svfiprintf_r+0x28>
 8006104:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006106:	b01d      	add	sp, #116	; 0x74
 8006108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800610c:	ab03      	add	r3, sp, #12
 800610e:	9300      	str	r3, [sp, #0]
 8006110:	462a      	mov	r2, r5
 8006112:	4b06      	ldr	r3, [pc, #24]	; (800612c <_svfiprintf_r+0x1f8>)
 8006114:	a904      	add	r1, sp, #16
 8006116:	4638      	mov	r0, r7
 8006118:	f000 f87a 	bl	8006210 <_printf_i>
 800611c:	e7eb      	b.n	80060f6 <_svfiprintf_r+0x1c2>
 800611e:	bf00      	nop
 8006120:	0800754c 	.word	0x0800754c
 8006124:	08007556 	.word	0x08007556
 8006128:	00000000 	.word	0x00000000
 800612c:	08005e7d 	.word	0x08005e7d
 8006130:	08007552 	.word	0x08007552

08006134 <_printf_common>:
 8006134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006138:	4616      	mov	r6, r2
 800613a:	4699      	mov	r9, r3
 800613c:	688a      	ldr	r2, [r1, #8]
 800613e:	690b      	ldr	r3, [r1, #16]
 8006140:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006144:	4293      	cmp	r3, r2
 8006146:	bfb8      	it	lt
 8006148:	4613      	movlt	r3, r2
 800614a:	6033      	str	r3, [r6, #0]
 800614c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006150:	4607      	mov	r7, r0
 8006152:	460c      	mov	r4, r1
 8006154:	b10a      	cbz	r2, 800615a <_printf_common+0x26>
 8006156:	3301      	adds	r3, #1
 8006158:	6033      	str	r3, [r6, #0]
 800615a:	6823      	ldr	r3, [r4, #0]
 800615c:	0699      	lsls	r1, r3, #26
 800615e:	bf42      	ittt	mi
 8006160:	6833      	ldrmi	r3, [r6, #0]
 8006162:	3302      	addmi	r3, #2
 8006164:	6033      	strmi	r3, [r6, #0]
 8006166:	6825      	ldr	r5, [r4, #0]
 8006168:	f015 0506 	ands.w	r5, r5, #6
 800616c:	d106      	bne.n	800617c <_printf_common+0x48>
 800616e:	f104 0a19 	add.w	sl, r4, #25
 8006172:	68e3      	ldr	r3, [r4, #12]
 8006174:	6832      	ldr	r2, [r6, #0]
 8006176:	1a9b      	subs	r3, r3, r2
 8006178:	42ab      	cmp	r3, r5
 800617a:	dc26      	bgt.n	80061ca <_printf_common+0x96>
 800617c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006180:	1e13      	subs	r3, r2, #0
 8006182:	6822      	ldr	r2, [r4, #0]
 8006184:	bf18      	it	ne
 8006186:	2301      	movne	r3, #1
 8006188:	0692      	lsls	r2, r2, #26
 800618a:	d42b      	bmi.n	80061e4 <_printf_common+0xb0>
 800618c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006190:	4649      	mov	r1, r9
 8006192:	4638      	mov	r0, r7
 8006194:	47c0      	blx	r8
 8006196:	3001      	adds	r0, #1
 8006198:	d01e      	beq.n	80061d8 <_printf_common+0xa4>
 800619a:	6823      	ldr	r3, [r4, #0]
 800619c:	68e5      	ldr	r5, [r4, #12]
 800619e:	6832      	ldr	r2, [r6, #0]
 80061a0:	f003 0306 	and.w	r3, r3, #6
 80061a4:	2b04      	cmp	r3, #4
 80061a6:	bf08      	it	eq
 80061a8:	1aad      	subeq	r5, r5, r2
 80061aa:	68a3      	ldr	r3, [r4, #8]
 80061ac:	6922      	ldr	r2, [r4, #16]
 80061ae:	bf0c      	ite	eq
 80061b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061b4:	2500      	movne	r5, #0
 80061b6:	4293      	cmp	r3, r2
 80061b8:	bfc4      	itt	gt
 80061ba:	1a9b      	subgt	r3, r3, r2
 80061bc:	18ed      	addgt	r5, r5, r3
 80061be:	2600      	movs	r6, #0
 80061c0:	341a      	adds	r4, #26
 80061c2:	42b5      	cmp	r5, r6
 80061c4:	d11a      	bne.n	80061fc <_printf_common+0xc8>
 80061c6:	2000      	movs	r0, #0
 80061c8:	e008      	b.n	80061dc <_printf_common+0xa8>
 80061ca:	2301      	movs	r3, #1
 80061cc:	4652      	mov	r2, sl
 80061ce:	4649      	mov	r1, r9
 80061d0:	4638      	mov	r0, r7
 80061d2:	47c0      	blx	r8
 80061d4:	3001      	adds	r0, #1
 80061d6:	d103      	bne.n	80061e0 <_printf_common+0xac>
 80061d8:	f04f 30ff 	mov.w	r0, #4294967295
 80061dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061e0:	3501      	adds	r5, #1
 80061e2:	e7c6      	b.n	8006172 <_printf_common+0x3e>
 80061e4:	18e1      	adds	r1, r4, r3
 80061e6:	1c5a      	adds	r2, r3, #1
 80061e8:	2030      	movs	r0, #48	; 0x30
 80061ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80061ee:	4422      	add	r2, r4
 80061f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80061f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80061f8:	3302      	adds	r3, #2
 80061fa:	e7c7      	b.n	800618c <_printf_common+0x58>
 80061fc:	2301      	movs	r3, #1
 80061fe:	4622      	mov	r2, r4
 8006200:	4649      	mov	r1, r9
 8006202:	4638      	mov	r0, r7
 8006204:	47c0      	blx	r8
 8006206:	3001      	adds	r0, #1
 8006208:	d0e6      	beq.n	80061d8 <_printf_common+0xa4>
 800620a:	3601      	adds	r6, #1
 800620c:	e7d9      	b.n	80061c2 <_printf_common+0x8e>
	...

08006210 <_printf_i>:
 8006210:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006214:	7e0f      	ldrb	r7, [r1, #24]
 8006216:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006218:	2f78      	cmp	r7, #120	; 0x78
 800621a:	4691      	mov	r9, r2
 800621c:	4680      	mov	r8, r0
 800621e:	460c      	mov	r4, r1
 8006220:	469a      	mov	sl, r3
 8006222:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006226:	d807      	bhi.n	8006238 <_printf_i+0x28>
 8006228:	2f62      	cmp	r7, #98	; 0x62
 800622a:	d80a      	bhi.n	8006242 <_printf_i+0x32>
 800622c:	2f00      	cmp	r7, #0
 800622e:	f000 80d8 	beq.w	80063e2 <_printf_i+0x1d2>
 8006232:	2f58      	cmp	r7, #88	; 0x58
 8006234:	f000 80a3 	beq.w	800637e <_printf_i+0x16e>
 8006238:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800623c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006240:	e03a      	b.n	80062b8 <_printf_i+0xa8>
 8006242:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006246:	2b15      	cmp	r3, #21
 8006248:	d8f6      	bhi.n	8006238 <_printf_i+0x28>
 800624a:	a101      	add	r1, pc, #4	; (adr r1, 8006250 <_printf_i+0x40>)
 800624c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006250:	080062a9 	.word	0x080062a9
 8006254:	080062bd 	.word	0x080062bd
 8006258:	08006239 	.word	0x08006239
 800625c:	08006239 	.word	0x08006239
 8006260:	08006239 	.word	0x08006239
 8006264:	08006239 	.word	0x08006239
 8006268:	080062bd 	.word	0x080062bd
 800626c:	08006239 	.word	0x08006239
 8006270:	08006239 	.word	0x08006239
 8006274:	08006239 	.word	0x08006239
 8006278:	08006239 	.word	0x08006239
 800627c:	080063c9 	.word	0x080063c9
 8006280:	080062ed 	.word	0x080062ed
 8006284:	080063ab 	.word	0x080063ab
 8006288:	08006239 	.word	0x08006239
 800628c:	08006239 	.word	0x08006239
 8006290:	080063eb 	.word	0x080063eb
 8006294:	08006239 	.word	0x08006239
 8006298:	080062ed 	.word	0x080062ed
 800629c:	08006239 	.word	0x08006239
 80062a0:	08006239 	.word	0x08006239
 80062a4:	080063b3 	.word	0x080063b3
 80062a8:	682b      	ldr	r3, [r5, #0]
 80062aa:	1d1a      	adds	r2, r3, #4
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	602a      	str	r2, [r5, #0]
 80062b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80062b8:	2301      	movs	r3, #1
 80062ba:	e0a3      	b.n	8006404 <_printf_i+0x1f4>
 80062bc:	6820      	ldr	r0, [r4, #0]
 80062be:	6829      	ldr	r1, [r5, #0]
 80062c0:	0606      	lsls	r6, r0, #24
 80062c2:	f101 0304 	add.w	r3, r1, #4
 80062c6:	d50a      	bpl.n	80062de <_printf_i+0xce>
 80062c8:	680e      	ldr	r6, [r1, #0]
 80062ca:	602b      	str	r3, [r5, #0]
 80062cc:	2e00      	cmp	r6, #0
 80062ce:	da03      	bge.n	80062d8 <_printf_i+0xc8>
 80062d0:	232d      	movs	r3, #45	; 0x2d
 80062d2:	4276      	negs	r6, r6
 80062d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062d8:	485e      	ldr	r0, [pc, #376]	; (8006454 <_printf_i+0x244>)
 80062da:	230a      	movs	r3, #10
 80062dc:	e019      	b.n	8006312 <_printf_i+0x102>
 80062de:	680e      	ldr	r6, [r1, #0]
 80062e0:	602b      	str	r3, [r5, #0]
 80062e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80062e6:	bf18      	it	ne
 80062e8:	b236      	sxthne	r6, r6
 80062ea:	e7ef      	b.n	80062cc <_printf_i+0xbc>
 80062ec:	682b      	ldr	r3, [r5, #0]
 80062ee:	6820      	ldr	r0, [r4, #0]
 80062f0:	1d19      	adds	r1, r3, #4
 80062f2:	6029      	str	r1, [r5, #0]
 80062f4:	0601      	lsls	r1, r0, #24
 80062f6:	d501      	bpl.n	80062fc <_printf_i+0xec>
 80062f8:	681e      	ldr	r6, [r3, #0]
 80062fa:	e002      	b.n	8006302 <_printf_i+0xf2>
 80062fc:	0646      	lsls	r6, r0, #25
 80062fe:	d5fb      	bpl.n	80062f8 <_printf_i+0xe8>
 8006300:	881e      	ldrh	r6, [r3, #0]
 8006302:	4854      	ldr	r0, [pc, #336]	; (8006454 <_printf_i+0x244>)
 8006304:	2f6f      	cmp	r7, #111	; 0x6f
 8006306:	bf0c      	ite	eq
 8006308:	2308      	moveq	r3, #8
 800630a:	230a      	movne	r3, #10
 800630c:	2100      	movs	r1, #0
 800630e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006312:	6865      	ldr	r5, [r4, #4]
 8006314:	60a5      	str	r5, [r4, #8]
 8006316:	2d00      	cmp	r5, #0
 8006318:	bfa2      	ittt	ge
 800631a:	6821      	ldrge	r1, [r4, #0]
 800631c:	f021 0104 	bicge.w	r1, r1, #4
 8006320:	6021      	strge	r1, [r4, #0]
 8006322:	b90e      	cbnz	r6, 8006328 <_printf_i+0x118>
 8006324:	2d00      	cmp	r5, #0
 8006326:	d04d      	beq.n	80063c4 <_printf_i+0x1b4>
 8006328:	4615      	mov	r5, r2
 800632a:	fbb6 f1f3 	udiv	r1, r6, r3
 800632e:	fb03 6711 	mls	r7, r3, r1, r6
 8006332:	5dc7      	ldrb	r7, [r0, r7]
 8006334:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006338:	4637      	mov	r7, r6
 800633a:	42bb      	cmp	r3, r7
 800633c:	460e      	mov	r6, r1
 800633e:	d9f4      	bls.n	800632a <_printf_i+0x11a>
 8006340:	2b08      	cmp	r3, #8
 8006342:	d10b      	bne.n	800635c <_printf_i+0x14c>
 8006344:	6823      	ldr	r3, [r4, #0]
 8006346:	07de      	lsls	r6, r3, #31
 8006348:	d508      	bpl.n	800635c <_printf_i+0x14c>
 800634a:	6923      	ldr	r3, [r4, #16]
 800634c:	6861      	ldr	r1, [r4, #4]
 800634e:	4299      	cmp	r1, r3
 8006350:	bfde      	ittt	le
 8006352:	2330      	movle	r3, #48	; 0x30
 8006354:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006358:	f105 35ff 	addle.w	r5, r5, #4294967295
 800635c:	1b52      	subs	r2, r2, r5
 800635e:	6122      	str	r2, [r4, #16]
 8006360:	f8cd a000 	str.w	sl, [sp]
 8006364:	464b      	mov	r3, r9
 8006366:	aa03      	add	r2, sp, #12
 8006368:	4621      	mov	r1, r4
 800636a:	4640      	mov	r0, r8
 800636c:	f7ff fee2 	bl	8006134 <_printf_common>
 8006370:	3001      	adds	r0, #1
 8006372:	d14c      	bne.n	800640e <_printf_i+0x1fe>
 8006374:	f04f 30ff 	mov.w	r0, #4294967295
 8006378:	b004      	add	sp, #16
 800637a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800637e:	4835      	ldr	r0, [pc, #212]	; (8006454 <_printf_i+0x244>)
 8006380:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006384:	6829      	ldr	r1, [r5, #0]
 8006386:	6823      	ldr	r3, [r4, #0]
 8006388:	f851 6b04 	ldr.w	r6, [r1], #4
 800638c:	6029      	str	r1, [r5, #0]
 800638e:	061d      	lsls	r5, r3, #24
 8006390:	d514      	bpl.n	80063bc <_printf_i+0x1ac>
 8006392:	07df      	lsls	r7, r3, #31
 8006394:	bf44      	itt	mi
 8006396:	f043 0320 	orrmi.w	r3, r3, #32
 800639a:	6023      	strmi	r3, [r4, #0]
 800639c:	b91e      	cbnz	r6, 80063a6 <_printf_i+0x196>
 800639e:	6823      	ldr	r3, [r4, #0]
 80063a0:	f023 0320 	bic.w	r3, r3, #32
 80063a4:	6023      	str	r3, [r4, #0]
 80063a6:	2310      	movs	r3, #16
 80063a8:	e7b0      	b.n	800630c <_printf_i+0xfc>
 80063aa:	6823      	ldr	r3, [r4, #0]
 80063ac:	f043 0320 	orr.w	r3, r3, #32
 80063b0:	6023      	str	r3, [r4, #0]
 80063b2:	2378      	movs	r3, #120	; 0x78
 80063b4:	4828      	ldr	r0, [pc, #160]	; (8006458 <_printf_i+0x248>)
 80063b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80063ba:	e7e3      	b.n	8006384 <_printf_i+0x174>
 80063bc:	0659      	lsls	r1, r3, #25
 80063be:	bf48      	it	mi
 80063c0:	b2b6      	uxthmi	r6, r6
 80063c2:	e7e6      	b.n	8006392 <_printf_i+0x182>
 80063c4:	4615      	mov	r5, r2
 80063c6:	e7bb      	b.n	8006340 <_printf_i+0x130>
 80063c8:	682b      	ldr	r3, [r5, #0]
 80063ca:	6826      	ldr	r6, [r4, #0]
 80063cc:	6961      	ldr	r1, [r4, #20]
 80063ce:	1d18      	adds	r0, r3, #4
 80063d0:	6028      	str	r0, [r5, #0]
 80063d2:	0635      	lsls	r5, r6, #24
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	d501      	bpl.n	80063dc <_printf_i+0x1cc>
 80063d8:	6019      	str	r1, [r3, #0]
 80063da:	e002      	b.n	80063e2 <_printf_i+0x1d2>
 80063dc:	0670      	lsls	r0, r6, #25
 80063de:	d5fb      	bpl.n	80063d8 <_printf_i+0x1c8>
 80063e0:	8019      	strh	r1, [r3, #0]
 80063e2:	2300      	movs	r3, #0
 80063e4:	6123      	str	r3, [r4, #16]
 80063e6:	4615      	mov	r5, r2
 80063e8:	e7ba      	b.n	8006360 <_printf_i+0x150>
 80063ea:	682b      	ldr	r3, [r5, #0]
 80063ec:	1d1a      	adds	r2, r3, #4
 80063ee:	602a      	str	r2, [r5, #0]
 80063f0:	681d      	ldr	r5, [r3, #0]
 80063f2:	6862      	ldr	r2, [r4, #4]
 80063f4:	2100      	movs	r1, #0
 80063f6:	4628      	mov	r0, r5
 80063f8:	f7f9 feea 	bl	80001d0 <memchr>
 80063fc:	b108      	cbz	r0, 8006402 <_printf_i+0x1f2>
 80063fe:	1b40      	subs	r0, r0, r5
 8006400:	6060      	str	r0, [r4, #4]
 8006402:	6863      	ldr	r3, [r4, #4]
 8006404:	6123      	str	r3, [r4, #16]
 8006406:	2300      	movs	r3, #0
 8006408:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800640c:	e7a8      	b.n	8006360 <_printf_i+0x150>
 800640e:	6923      	ldr	r3, [r4, #16]
 8006410:	462a      	mov	r2, r5
 8006412:	4649      	mov	r1, r9
 8006414:	4640      	mov	r0, r8
 8006416:	47d0      	blx	sl
 8006418:	3001      	adds	r0, #1
 800641a:	d0ab      	beq.n	8006374 <_printf_i+0x164>
 800641c:	6823      	ldr	r3, [r4, #0]
 800641e:	079b      	lsls	r3, r3, #30
 8006420:	d413      	bmi.n	800644a <_printf_i+0x23a>
 8006422:	68e0      	ldr	r0, [r4, #12]
 8006424:	9b03      	ldr	r3, [sp, #12]
 8006426:	4298      	cmp	r0, r3
 8006428:	bfb8      	it	lt
 800642a:	4618      	movlt	r0, r3
 800642c:	e7a4      	b.n	8006378 <_printf_i+0x168>
 800642e:	2301      	movs	r3, #1
 8006430:	4632      	mov	r2, r6
 8006432:	4649      	mov	r1, r9
 8006434:	4640      	mov	r0, r8
 8006436:	47d0      	blx	sl
 8006438:	3001      	adds	r0, #1
 800643a:	d09b      	beq.n	8006374 <_printf_i+0x164>
 800643c:	3501      	adds	r5, #1
 800643e:	68e3      	ldr	r3, [r4, #12]
 8006440:	9903      	ldr	r1, [sp, #12]
 8006442:	1a5b      	subs	r3, r3, r1
 8006444:	42ab      	cmp	r3, r5
 8006446:	dcf2      	bgt.n	800642e <_printf_i+0x21e>
 8006448:	e7eb      	b.n	8006422 <_printf_i+0x212>
 800644a:	2500      	movs	r5, #0
 800644c:	f104 0619 	add.w	r6, r4, #25
 8006450:	e7f5      	b.n	800643e <_printf_i+0x22e>
 8006452:	bf00      	nop
 8006454:	0800755d 	.word	0x0800755d
 8006458:	0800756e 	.word	0x0800756e

0800645c <memcpy>:
 800645c:	440a      	add	r2, r1
 800645e:	4291      	cmp	r1, r2
 8006460:	f100 33ff 	add.w	r3, r0, #4294967295
 8006464:	d100      	bne.n	8006468 <memcpy+0xc>
 8006466:	4770      	bx	lr
 8006468:	b510      	push	{r4, lr}
 800646a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800646e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006472:	4291      	cmp	r1, r2
 8006474:	d1f9      	bne.n	800646a <memcpy+0xe>
 8006476:	bd10      	pop	{r4, pc}

08006478 <memmove>:
 8006478:	4288      	cmp	r0, r1
 800647a:	b510      	push	{r4, lr}
 800647c:	eb01 0402 	add.w	r4, r1, r2
 8006480:	d902      	bls.n	8006488 <memmove+0x10>
 8006482:	4284      	cmp	r4, r0
 8006484:	4623      	mov	r3, r4
 8006486:	d807      	bhi.n	8006498 <memmove+0x20>
 8006488:	1e43      	subs	r3, r0, #1
 800648a:	42a1      	cmp	r1, r4
 800648c:	d008      	beq.n	80064a0 <memmove+0x28>
 800648e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006492:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006496:	e7f8      	b.n	800648a <memmove+0x12>
 8006498:	4402      	add	r2, r0
 800649a:	4601      	mov	r1, r0
 800649c:	428a      	cmp	r2, r1
 800649e:	d100      	bne.n	80064a2 <memmove+0x2a>
 80064a0:	bd10      	pop	{r4, pc}
 80064a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80064a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80064aa:	e7f7      	b.n	800649c <memmove+0x24>

080064ac <_free_r>:
 80064ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80064ae:	2900      	cmp	r1, #0
 80064b0:	d044      	beq.n	800653c <_free_r+0x90>
 80064b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064b6:	9001      	str	r0, [sp, #4]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	f1a1 0404 	sub.w	r4, r1, #4
 80064be:	bfb8      	it	lt
 80064c0:	18e4      	addlt	r4, r4, r3
 80064c2:	f000 f913 	bl	80066ec <__malloc_lock>
 80064c6:	4a1e      	ldr	r2, [pc, #120]	; (8006540 <_free_r+0x94>)
 80064c8:	9801      	ldr	r0, [sp, #4]
 80064ca:	6813      	ldr	r3, [r2, #0]
 80064cc:	b933      	cbnz	r3, 80064dc <_free_r+0x30>
 80064ce:	6063      	str	r3, [r4, #4]
 80064d0:	6014      	str	r4, [r2, #0]
 80064d2:	b003      	add	sp, #12
 80064d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80064d8:	f000 b90e 	b.w	80066f8 <__malloc_unlock>
 80064dc:	42a3      	cmp	r3, r4
 80064de:	d908      	bls.n	80064f2 <_free_r+0x46>
 80064e0:	6825      	ldr	r5, [r4, #0]
 80064e2:	1961      	adds	r1, r4, r5
 80064e4:	428b      	cmp	r3, r1
 80064e6:	bf01      	itttt	eq
 80064e8:	6819      	ldreq	r1, [r3, #0]
 80064ea:	685b      	ldreq	r3, [r3, #4]
 80064ec:	1949      	addeq	r1, r1, r5
 80064ee:	6021      	streq	r1, [r4, #0]
 80064f0:	e7ed      	b.n	80064ce <_free_r+0x22>
 80064f2:	461a      	mov	r2, r3
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	b10b      	cbz	r3, 80064fc <_free_r+0x50>
 80064f8:	42a3      	cmp	r3, r4
 80064fa:	d9fa      	bls.n	80064f2 <_free_r+0x46>
 80064fc:	6811      	ldr	r1, [r2, #0]
 80064fe:	1855      	adds	r5, r2, r1
 8006500:	42a5      	cmp	r5, r4
 8006502:	d10b      	bne.n	800651c <_free_r+0x70>
 8006504:	6824      	ldr	r4, [r4, #0]
 8006506:	4421      	add	r1, r4
 8006508:	1854      	adds	r4, r2, r1
 800650a:	42a3      	cmp	r3, r4
 800650c:	6011      	str	r1, [r2, #0]
 800650e:	d1e0      	bne.n	80064d2 <_free_r+0x26>
 8006510:	681c      	ldr	r4, [r3, #0]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	6053      	str	r3, [r2, #4]
 8006516:	4421      	add	r1, r4
 8006518:	6011      	str	r1, [r2, #0]
 800651a:	e7da      	b.n	80064d2 <_free_r+0x26>
 800651c:	d902      	bls.n	8006524 <_free_r+0x78>
 800651e:	230c      	movs	r3, #12
 8006520:	6003      	str	r3, [r0, #0]
 8006522:	e7d6      	b.n	80064d2 <_free_r+0x26>
 8006524:	6825      	ldr	r5, [r4, #0]
 8006526:	1961      	adds	r1, r4, r5
 8006528:	428b      	cmp	r3, r1
 800652a:	bf04      	itt	eq
 800652c:	6819      	ldreq	r1, [r3, #0]
 800652e:	685b      	ldreq	r3, [r3, #4]
 8006530:	6063      	str	r3, [r4, #4]
 8006532:	bf04      	itt	eq
 8006534:	1949      	addeq	r1, r1, r5
 8006536:	6021      	streq	r1, [r4, #0]
 8006538:	6054      	str	r4, [r2, #4]
 800653a:	e7ca      	b.n	80064d2 <_free_r+0x26>
 800653c:	b003      	add	sp, #12
 800653e:	bd30      	pop	{r4, r5, pc}
 8006540:	20000244 	.word	0x20000244

08006544 <sbrk_aligned>:
 8006544:	b570      	push	{r4, r5, r6, lr}
 8006546:	4e0e      	ldr	r6, [pc, #56]	; (8006580 <sbrk_aligned+0x3c>)
 8006548:	460c      	mov	r4, r1
 800654a:	6831      	ldr	r1, [r6, #0]
 800654c:	4605      	mov	r5, r0
 800654e:	b911      	cbnz	r1, 8006556 <sbrk_aligned+0x12>
 8006550:	f000 f8bc 	bl	80066cc <_sbrk_r>
 8006554:	6030      	str	r0, [r6, #0]
 8006556:	4621      	mov	r1, r4
 8006558:	4628      	mov	r0, r5
 800655a:	f000 f8b7 	bl	80066cc <_sbrk_r>
 800655e:	1c43      	adds	r3, r0, #1
 8006560:	d00a      	beq.n	8006578 <sbrk_aligned+0x34>
 8006562:	1cc4      	adds	r4, r0, #3
 8006564:	f024 0403 	bic.w	r4, r4, #3
 8006568:	42a0      	cmp	r0, r4
 800656a:	d007      	beq.n	800657c <sbrk_aligned+0x38>
 800656c:	1a21      	subs	r1, r4, r0
 800656e:	4628      	mov	r0, r5
 8006570:	f000 f8ac 	bl	80066cc <_sbrk_r>
 8006574:	3001      	adds	r0, #1
 8006576:	d101      	bne.n	800657c <sbrk_aligned+0x38>
 8006578:	f04f 34ff 	mov.w	r4, #4294967295
 800657c:	4620      	mov	r0, r4
 800657e:	bd70      	pop	{r4, r5, r6, pc}
 8006580:	20000248 	.word	0x20000248

08006584 <_malloc_r>:
 8006584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006588:	1ccd      	adds	r5, r1, #3
 800658a:	f025 0503 	bic.w	r5, r5, #3
 800658e:	3508      	adds	r5, #8
 8006590:	2d0c      	cmp	r5, #12
 8006592:	bf38      	it	cc
 8006594:	250c      	movcc	r5, #12
 8006596:	2d00      	cmp	r5, #0
 8006598:	4607      	mov	r7, r0
 800659a:	db01      	blt.n	80065a0 <_malloc_r+0x1c>
 800659c:	42a9      	cmp	r1, r5
 800659e:	d905      	bls.n	80065ac <_malloc_r+0x28>
 80065a0:	230c      	movs	r3, #12
 80065a2:	603b      	str	r3, [r7, #0]
 80065a4:	2600      	movs	r6, #0
 80065a6:	4630      	mov	r0, r6
 80065a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065ac:	4e2e      	ldr	r6, [pc, #184]	; (8006668 <_malloc_r+0xe4>)
 80065ae:	f000 f89d 	bl	80066ec <__malloc_lock>
 80065b2:	6833      	ldr	r3, [r6, #0]
 80065b4:	461c      	mov	r4, r3
 80065b6:	bb34      	cbnz	r4, 8006606 <_malloc_r+0x82>
 80065b8:	4629      	mov	r1, r5
 80065ba:	4638      	mov	r0, r7
 80065bc:	f7ff ffc2 	bl	8006544 <sbrk_aligned>
 80065c0:	1c43      	adds	r3, r0, #1
 80065c2:	4604      	mov	r4, r0
 80065c4:	d14d      	bne.n	8006662 <_malloc_r+0xde>
 80065c6:	6834      	ldr	r4, [r6, #0]
 80065c8:	4626      	mov	r6, r4
 80065ca:	2e00      	cmp	r6, #0
 80065cc:	d140      	bne.n	8006650 <_malloc_r+0xcc>
 80065ce:	6823      	ldr	r3, [r4, #0]
 80065d0:	4631      	mov	r1, r6
 80065d2:	4638      	mov	r0, r7
 80065d4:	eb04 0803 	add.w	r8, r4, r3
 80065d8:	f000 f878 	bl	80066cc <_sbrk_r>
 80065dc:	4580      	cmp	r8, r0
 80065de:	d13a      	bne.n	8006656 <_malloc_r+0xd2>
 80065e0:	6821      	ldr	r1, [r4, #0]
 80065e2:	3503      	adds	r5, #3
 80065e4:	1a6d      	subs	r5, r5, r1
 80065e6:	f025 0503 	bic.w	r5, r5, #3
 80065ea:	3508      	adds	r5, #8
 80065ec:	2d0c      	cmp	r5, #12
 80065ee:	bf38      	it	cc
 80065f0:	250c      	movcc	r5, #12
 80065f2:	4629      	mov	r1, r5
 80065f4:	4638      	mov	r0, r7
 80065f6:	f7ff ffa5 	bl	8006544 <sbrk_aligned>
 80065fa:	3001      	adds	r0, #1
 80065fc:	d02b      	beq.n	8006656 <_malloc_r+0xd2>
 80065fe:	6823      	ldr	r3, [r4, #0]
 8006600:	442b      	add	r3, r5
 8006602:	6023      	str	r3, [r4, #0]
 8006604:	e00e      	b.n	8006624 <_malloc_r+0xa0>
 8006606:	6822      	ldr	r2, [r4, #0]
 8006608:	1b52      	subs	r2, r2, r5
 800660a:	d41e      	bmi.n	800664a <_malloc_r+0xc6>
 800660c:	2a0b      	cmp	r2, #11
 800660e:	d916      	bls.n	800663e <_malloc_r+0xba>
 8006610:	1961      	adds	r1, r4, r5
 8006612:	42a3      	cmp	r3, r4
 8006614:	6025      	str	r5, [r4, #0]
 8006616:	bf18      	it	ne
 8006618:	6059      	strne	r1, [r3, #4]
 800661a:	6863      	ldr	r3, [r4, #4]
 800661c:	bf08      	it	eq
 800661e:	6031      	streq	r1, [r6, #0]
 8006620:	5162      	str	r2, [r4, r5]
 8006622:	604b      	str	r3, [r1, #4]
 8006624:	4638      	mov	r0, r7
 8006626:	f104 060b 	add.w	r6, r4, #11
 800662a:	f000 f865 	bl	80066f8 <__malloc_unlock>
 800662e:	f026 0607 	bic.w	r6, r6, #7
 8006632:	1d23      	adds	r3, r4, #4
 8006634:	1af2      	subs	r2, r6, r3
 8006636:	d0b6      	beq.n	80065a6 <_malloc_r+0x22>
 8006638:	1b9b      	subs	r3, r3, r6
 800663a:	50a3      	str	r3, [r4, r2]
 800663c:	e7b3      	b.n	80065a6 <_malloc_r+0x22>
 800663e:	6862      	ldr	r2, [r4, #4]
 8006640:	42a3      	cmp	r3, r4
 8006642:	bf0c      	ite	eq
 8006644:	6032      	streq	r2, [r6, #0]
 8006646:	605a      	strne	r2, [r3, #4]
 8006648:	e7ec      	b.n	8006624 <_malloc_r+0xa0>
 800664a:	4623      	mov	r3, r4
 800664c:	6864      	ldr	r4, [r4, #4]
 800664e:	e7b2      	b.n	80065b6 <_malloc_r+0x32>
 8006650:	4634      	mov	r4, r6
 8006652:	6876      	ldr	r6, [r6, #4]
 8006654:	e7b9      	b.n	80065ca <_malloc_r+0x46>
 8006656:	230c      	movs	r3, #12
 8006658:	603b      	str	r3, [r7, #0]
 800665a:	4638      	mov	r0, r7
 800665c:	f000 f84c 	bl	80066f8 <__malloc_unlock>
 8006660:	e7a1      	b.n	80065a6 <_malloc_r+0x22>
 8006662:	6025      	str	r5, [r4, #0]
 8006664:	e7de      	b.n	8006624 <_malloc_r+0xa0>
 8006666:	bf00      	nop
 8006668:	20000244 	.word	0x20000244

0800666c <_realloc_r>:
 800666c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006670:	4680      	mov	r8, r0
 8006672:	4614      	mov	r4, r2
 8006674:	460e      	mov	r6, r1
 8006676:	b921      	cbnz	r1, 8006682 <_realloc_r+0x16>
 8006678:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800667c:	4611      	mov	r1, r2
 800667e:	f7ff bf81 	b.w	8006584 <_malloc_r>
 8006682:	b92a      	cbnz	r2, 8006690 <_realloc_r+0x24>
 8006684:	f7ff ff12 	bl	80064ac <_free_r>
 8006688:	4625      	mov	r5, r4
 800668a:	4628      	mov	r0, r5
 800668c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006690:	f000 f838 	bl	8006704 <_malloc_usable_size_r>
 8006694:	4284      	cmp	r4, r0
 8006696:	4607      	mov	r7, r0
 8006698:	d802      	bhi.n	80066a0 <_realloc_r+0x34>
 800669a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800669e:	d812      	bhi.n	80066c6 <_realloc_r+0x5a>
 80066a0:	4621      	mov	r1, r4
 80066a2:	4640      	mov	r0, r8
 80066a4:	f7ff ff6e 	bl	8006584 <_malloc_r>
 80066a8:	4605      	mov	r5, r0
 80066aa:	2800      	cmp	r0, #0
 80066ac:	d0ed      	beq.n	800668a <_realloc_r+0x1e>
 80066ae:	42bc      	cmp	r4, r7
 80066b0:	4622      	mov	r2, r4
 80066b2:	4631      	mov	r1, r6
 80066b4:	bf28      	it	cs
 80066b6:	463a      	movcs	r2, r7
 80066b8:	f7ff fed0 	bl	800645c <memcpy>
 80066bc:	4631      	mov	r1, r6
 80066be:	4640      	mov	r0, r8
 80066c0:	f7ff fef4 	bl	80064ac <_free_r>
 80066c4:	e7e1      	b.n	800668a <_realloc_r+0x1e>
 80066c6:	4635      	mov	r5, r6
 80066c8:	e7df      	b.n	800668a <_realloc_r+0x1e>
	...

080066cc <_sbrk_r>:
 80066cc:	b538      	push	{r3, r4, r5, lr}
 80066ce:	4d06      	ldr	r5, [pc, #24]	; (80066e8 <_sbrk_r+0x1c>)
 80066d0:	2300      	movs	r3, #0
 80066d2:	4604      	mov	r4, r0
 80066d4:	4608      	mov	r0, r1
 80066d6:	602b      	str	r3, [r5, #0]
 80066d8:	f7fb f8f8 	bl	80018cc <_sbrk>
 80066dc:	1c43      	adds	r3, r0, #1
 80066de:	d102      	bne.n	80066e6 <_sbrk_r+0x1a>
 80066e0:	682b      	ldr	r3, [r5, #0]
 80066e2:	b103      	cbz	r3, 80066e6 <_sbrk_r+0x1a>
 80066e4:	6023      	str	r3, [r4, #0]
 80066e6:	bd38      	pop	{r3, r4, r5, pc}
 80066e8:	2000024c 	.word	0x2000024c

080066ec <__malloc_lock>:
 80066ec:	4801      	ldr	r0, [pc, #4]	; (80066f4 <__malloc_lock+0x8>)
 80066ee:	f000 b811 	b.w	8006714 <__retarget_lock_acquire_recursive>
 80066f2:	bf00      	nop
 80066f4:	20000250 	.word	0x20000250

080066f8 <__malloc_unlock>:
 80066f8:	4801      	ldr	r0, [pc, #4]	; (8006700 <__malloc_unlock+0x8>)
 80066fa:	f000 b80c 	b.w	8006716 <__retarget_lock_release_recursive>
 80066fe:	bf00      	nop
 8006700:	20000250 	.word	0x20000250

08006704 <_malloc_usable_size_r>:
 8006704:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006708:	1f18      	subs	r0, r3, #4
 800670a:	2b00      	cmp	r3, #0
 800670c:	bfbc      	itt	lt
 800670e:	580b      	ldrlt	r3, [r1, r0]
 8006710:	18c0      	addlt	r0, r0, r3
 8006712:	4770      	bx	lr

08006714 <__retarget_lock_acquire_recursive>:
 8006714:	4770      	bx	lr

08006716 <__retarget_lock_release_recursive>:
 8006716:	4770      	bx	lr

08006718 <_init>:
 8006718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800671a:	bf00      	nop
 800671c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800671e:	bc08      	pop	{r3}
 8006720:	469e      	mov	lr, r3
 8006722:	4770      	bx	lr

08006724 <_fini>:
 8006724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006726:	bf00      	nop
 8006728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800672a:	bc08      	pop	{r3}
 800672c:	469e      	mov	lr, r3
 800672e:	4770      	bx	lr
